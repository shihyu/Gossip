<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ObjectConstructor.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
<head>








  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>建構方法（Constructor）</title></head><body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Java Gossip: 建構方法（Constructor）</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>在定義類別時，您可以使用<span style="font-weight: bold;">「建構方法」（Constructor）</span>來進行物件的初始化，而在Java中並沒有<span style="font-weight: bold;">
「解構方法」（Destructor）</span>，而是利用<span style="font-weight: bold;">finalize()</span>函式來達到解構方法的作用，這則在 <a class="wikilink" href="GarbageCollection.htm">垃圾回收</a> 討論。 <br>

      <br>





在Java中建構方法是與類別名稱相同的公開方法成員，且沒有傳回值，例如： <br>

      </small>









      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class SafeArray { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; // .. </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public SafeArray() {&nbsp; // 建構方法 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // .... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; } </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public SafeArray(參數) {&nbsp; // </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // .... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; } </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>





      </small></div>






      <small><br>





在建構方法中，您可以定義無參數的建構方法，或具有參數的建構方法，程式在運行時，會根據配置物件時所指定的引數資料型態等來決定，該使用哪一個建構方法。<br>

      <br>



下面這個程式中，您實作「安全的陣列」，使用我們所定義的陣列類別可以動態配置陣列長度，並可事先檢查存取陣列的索引是否超出陣列長度，在這個陣列類別中，您實作了幾個簡單的功能，像是傳回陣列長度、設定陣列元素值、取得陣列元素值等等，我們的類別定義如下： </small>

      <br>





      
      <ul>

        <li> SafeArray.java </li>

      
      </ul>






      
      <pre>public class SafeArray { <br>    private int[] arr; <br> <br>    public SafeArray() { <br>        this(10); <br>    }<br> <br>    public SafeArray(int length) { <br>        arr = new int[length]; <br>    }<br> <br>    public int[] getArray() {<br>        return arr;<br>    }<br> <br>    public int getElement(int i) { <br>        if(i &gt;= arr.length || i &lt; 0) { <br>            System.err.println("索引錯誤"); <br>            return 0; <br>        } <br> <br>        return arr[i]; <br>    }<br> <br>    public int getLength() { <br>        return arr.length; <br>    }<br> <br>    public void setElement(int i, int data) { <br>        if(i &gt;= arr.length || i &lt; 0) { <br>            System.err.println("索引錯誤"); <br>            return; <br>        }<br> <br>        arr[i] = data; <br>    } <br>} </pre>





      <br>

      <small>



建構方法中，如果不指定引數的話，就會預設配置10個元素的陣列，您也可以由指定的長度來配置陣列；您在無引數的建構方法中直接使用<span style="font-weight: bold;">this()</span> 來呼叫另一個有參數的建構方法，這是一種經常的作法，可以避免撰寫一些重覆的原始碼。<br>

      <br>





下面這個程式示範如何使用自訂的安全陣列類別： </small>



      <br>





      
      <ul>

        <li> UseConstructor.java </li>

      
      </ul>






      
      <pre> <br> public class UseConstructor { <br>    public static void main(String[] args) { <br>        // 預設10個元素 <br>        SafeArray arr1 = new SafeArray();  <br>         // 指定配置20個元素 <br>        SafeArray arr2 = new SafeArray(20);<br> <br>        for(int i = 0; i &lt; arr1.getLength(); i++) <br>            arr1.setElement(i, (i+1)*10);<br><br>        for(int i = 0; i &lt; arr2.getLength(); i++) <br>            arr2.setElement(i, (i+1)*10);<br><br>        for(int element : arr1.getArray())<br>            System.out.print(element + " "); <br>        System.out.println(); <br><br>        for(int element : arr2.getArray())<br>            System.out.print(element + " "); <br>        System.out.println(); <br>    }<br> }<br> <br></pre>






      <br>

      <small>



上面的程式中，您配置了兩個SafeArray物件，一個使用預設的建構方法，所以arr1的陣列元素會有10個，一個使用指定長度的建構方法，所以arr2的陣列元素個
數是我們指定的20，建構方法依引數不同而自行決定該使用哪一個建構方法。<br>

      <br>



物件在建構之前，物件的屬性必須先初始完畢才會執行建構式，例如：<br>

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class Some {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; private Other other = new Other();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; public Some() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println("Some");</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class Other {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; public Other() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; &nbsp; &nbsp; System.out.println("Other");</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>

      <br>



如果建構Some：<br>

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Some some = new Some();</span><br>

      <br>



由於先初始Some的屬性成員，所以會先顯示"Other"，再顯示"Some"。<br>

      <br>


如果您如下撰寫：<br>

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class Test {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("initial...");</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public Test() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Test");</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public Test(int i) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Test i");</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public static void main(String[] args) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Test();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Test(1);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>

      <br>


在 { 與 } 之間的程式，會於執行時期自動加入物件建構流程的開頭（而不是編譯時期展開程式碼），也就是先執行{與}間的程式，再執行指定的建構方法，所以程式將顯示：</small>

























































      <br>


      <span class="postbody"></span>


      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">





  <tbody>





    <tr>





      <td style="background-color: rgb(0, 0, 0);"><small><span style="color: rgb(255, 255, 255);">initial...<br>


Test<br>


initial...<br>


Test i</span></small><span style="color: rgb(255, 255, 255);"><br>





      </span></td>





    </tr>





  
  
  
  
        
        </tbody>
      
      </table>




      <br>


      <br>


      <br>


      <br>

 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      <center>
      
       <br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ObjectConstructor.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
</html>