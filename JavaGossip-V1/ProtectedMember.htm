<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ProtectedMember.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
<head>









  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>被保護的（protected）成員</title></head><body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Java Gossip: 被保護的（protected）成員</a></h1>



<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">



  <tbody>



    <tr>



      <td style="width: 676px; vertical-align: top;"> <small>在之前您的資料成員都預設為"private"成員，也就是私用成員，私用成員只能在類別物件中使用，不能直接透過物件來呼叫使用，而即使是擴充了該類別的衍生類別也是如此，您只能透過該類別所提供的"public"方法成員來呼叫或設定私用成員。<br>


      <br>






然而有些時候，您希望擴充了基底類別的衍生類別，能夠直接存取呼叫基底類別中的成員，但不是透過"public"方法成員，也不是將它宣告為"public"，因為您仍不希望這些成員被物件直接呼叫使用。<br>


      <br>






可以宣告這些成員為<span style="font-weight: bold;">「被保護的成員」（protected）</span>，保護的意思表示存取它有條件限制以保護該成員，當您將類別成員宣告為受保護的成員之後，繼承它的類別中就可以直接使用這些成員，但這些成員仍然受到物件範圍的保護，不可被物件直接呼叫使用。<br>


      <br>






要宣告一個成員成為受保護的成員，就使用<span style="font-weight: bold;">"protected"關鍵字</span>，下面這個程式是個實際的例子，您將資料成員宣告為受保護的成員，擴充它的類別中就可以直接使用，而不用透過"public"方法成員來呼叫： </small>











      <br>







      
      
      <ul>


        <li> Rectangle.java
  </li>


      
      
      </ul>







      
      
      <pre>public class Rectangle { <br>    // 受保護的member <br>    protected int x, y; <br>    protected int width, height; <br><br>    public Rectangle() { <br>        x = y = 0; <br>        width = height = 0; <br>    } <br><br>    public Rectangle(int x, int y, int width, int height) { <br>        this.x = x;  this.y = y; <br>        this.width = width;   this.height = height; <br>    } <br><br>    public int getX() { return x; } <br>    public int getY() { return y; } <br>    public int getWidth() { return width; } <br>    public int getHeight() { return height; } <br>    public int getArea() { return width*height; } <br>} <br></pre>









      
      
      <ul>


        <li> Cubic.java
  </li>


      
      
      </ul>







      
      
      <pre>public class Cubic extends Rectangle { <br>    protected int z; <br>    protected int length; <br><br>    public Cubic() { <br>        z = 0;  length = 0; <br>    } <br><br>    public Cubic(int x, int y, int z, <br>                 int length, int width, int height) { <br>        super(x, y, width, height); <br>        this.z = z; <br>        this.length = length; <br>    } <br><br>    public int getLength() { return length; } <br>    public int getVolumn() { return length*width*height; } <br>} <br></pre>









      
      
      <ul>


        <li> UseProtected.java
  </li>


      
      
      </ul>







      
      
      <pre>public class UseProtected { <br>    public static void main(String[] args) { <br>        Cubic c1 = new Cubic(0, 0, 0, 10, 20, 30); <br><br>        System.out.println("c1 volumn: " + c1.getVolumn()); <br>    } <br>}</pre>






      <br>







      <small><span class="postbody">
執行結果：</span></small><br>







      
      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">







  <tbody>







    <tr>







      <td style="background-color: rgb(0, 0, 0);"><small><span style="color: rgb(255, 255, 255);">&nbsp;c1 volumn: 6000</span></small><span style="color: rgb(255, 255, 255);"><br>







      </span></td>







    </tr>







  
  
  
  
  
        
        
        </tbody>
      
      
      </table>







      <br>


      <small>




在這個例子中，您可以看到直接使用繼承下來的受保護成員確實比較方便，方法成員也可以宣告為受保護的成員，對象通常是僅適用於
類別中使用的一些內部處理方法，這些方法對類別外部來說，可能是呼叫它並沒有意義或是有危險性，但您在衍生類別中仍可能使用到這些方法，所以通常會將之
宣告為受保護的成員。 <br>


      <br>






一個例子就是在視窗事件處理時，設定事件發生時的呼叫函式，它可以被繼承，以自訂一些視窗元件，這些方法在事件發生時才會被呼叫，您在類
別外直接呼叫這些方法並沒有意義，甚至某些條件沒有成立就呼叫它，對整個程式的執行會造成錯誤，這些方法成員通常就會宣告為受保護的成員。<br>


      <br>






在設計上有一個考量，就是對物件內部的field成員最好不要直接呼叫，而仍然透過方法呼叫，例如下面的方式有時不被鼓勵：<br>


      </small>












      
      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class SomeClass {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; private int someInt;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; .....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; public void someMethod() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = someInt;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; someInt = 1234;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>






      </small></div>






      <small><br>







直接在someMethod()中使用field成員，有時會使得someMethod()失去一些彈性，有時建議使用這樣的方式：<br>


      </small>



      
      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class SomeClass {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; private int someInt;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; .....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; private int getSomeInt() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return someInt;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; private void setSomeInt(int someInt) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.someInt = someInt;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; public void someMethod() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = getSomeInt();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setSomeInt(1234);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>






      </small></div>






      <small><br>






這樣作的好處是，您可以在存取field成員前作一些額外的處理（這些處理可能原先您要在someMethod()中進行），當然何時要使用，以及 setter、getter要宣告為"public<br>






、"protected"或是"private"，則視您的程式需求而定了。<br>


      <br>



事實上，對於同一個 <a href="Package.htm">套件（package）</a> 下的類別，可以直接呼叫彼此的protected成員，而對於不同套件（package）下的成員，不能呼叫彼此的protected成員。<br>


      <br>






如果在定義成員時沒有設定任何的存取修飾，則為預設（default）的存取權限，預設存取權限可以在同一個套件（package）中的其它類別直接存取。</small>




      <br>





 </td>



      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>


      </center>


 </td>



    </tr>



  
  
  </tbody>
</table>



<br>


<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ProtectedMember.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
</html>