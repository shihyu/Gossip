<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/GenericsExamples.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
<head>





  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">





  
  
  
  
  
  <title>幾個定義泛型的例子</title>
</head>


<body>





<h3><a href="../index.html">From
Gossip@Openhome</a></h3>





<h1><a href="index-2.html">Java Gossip: 幾個定義泛型的例子</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>您可以在定義泛型類別時，宣告多個類型持有者，例如：</small><br>




      
      <ul>

        <li> GenericFoo.java
  </li>

      
      </ul>




      
      <pre>public class GenericFoo&lt;T1, T2&gt; {<br>    private T1 foo1;<br>    private T2 foo2;<br> <br>    public void setFoo1(T1 foo1) {<br>        this.foo1 = foo1;<br>    }<br> <br>    public T1 getFoo1() {<br>        return foo1;<br>    }<br> <br>    public void setFoo2(T2 foo2) {<br>        this.foo2 = foo2;<br>    }<br> <br>    public T2 getFoo2() {<br>        return foo2;<br>    }<br>} <br></pre>




      
      <p></p>



      
      <p><small>您可以如下使用GenericFoo類別，分別以Integer與Boolean取代T1與T2：<br>



      </small></p>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;Integer, Boolean&gt; foo = </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new GenericFoo&lt;Integer, Boolean&gt;();</span><br>



      <br>



      </small></div>

      <small>


如果是陣列的話，可以像這樣：</small>
      
      <ul>

        <li> GenericFoo.java
  </li>

      
      </ul>




      
      <pre>public class GenericFoo&lt;T&gt; {<br>    private T[] fooArray;<br><br>    public void setFooArray(T[] fooArray) {<br>        this.fooArray = fooArray;<br>    }<br><br>    public T[] getFooArray() {<br>        return fooArray;<br>    }<br>} <br></pre>




      <br>

      <small>

您可以像下面的方式來使用它：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">String[] strs = {"caterpillar", "momor", "bush"};</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;String&gt; foo = new GenericFoo&lt;String&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo.setFooArray(strs);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">strs = foo.getFooArray();</span><br>



      </small></div>

      <small>

&nbsp;<br>






來改寫一下 <a class="wikilink" href="ObjectClass.htm">Object 類別</a> 中的
SimpleCollection：</small><br>




      
      <ul>

        <li> SimpleCollection.java
  </li>

      
      </ul>




      
      <pre>public class SimpleCollection&lt;T&gt; { <br>    private T[] objArr; <br>    private int index = 0; <br> <br>    public SimpleCollection() { <br>        objArr = (T[]) new Object[10]; // 預設10個物件空間 <br>    } <br> <br>    public SimpleCollection(int capacity) { <br>        objArr = (T[]) new Object[capacity]; <br>    } <br> <br>    public void add(T t) { <br>        objArr[index] = t; <br>        index++; <br>    } <br> <br>    public int getLength() { <br>        return index; <br>    } <br> <br>    public T get(int i) { <br>        return (T) objArr[i]; <br>    } <br>} <br></pre>




      <br>

      <small>

現在您可以直接使用它來當作特定類型物件的容器，例如：</small><br>




      
      <ul>

        <li> Test.java
  </li>

      
      </ul>




      
      <pre>public class Test { <br>    public static void main(String[] args) { <br>        SimpleCollection&lt;Integer&gt; c = <br>                new SimpleCollection&lt;Integer&gt;(); <br> <br>        for(int i = 0; i &lt; 10; i++) {<br>            c.add(new Integer(i));<br>        }<br><br>        for(int i = 0; i &lt; 10; i++) {<br>            Integer k = c.get(i);<br>        }<br>    } <br>} <br></pre>




      <br>

      <small>

另一個SimpleCollection的寫法也可以如下，作用是一樣的：</small><br>




      
      <ul>

        <li> SimpleCollection.java
  </li>

      
      </ul>




      
      <pre>public class SimpleCollection&lt;T&gt; { <br>    private Object[] objArr; <br>    private int index = 0; <br> <br>    public SimpleCollection() { <br>        objArr = new Object[10]; // 預設10個物件空間 <br>    } <br> <br>    public SimpleCollection(int capacity) { <br>        objArr = new Object[capacity]; <br>    } <br> <br>    public void add(T t) { <br>        objArr[index] = t; <br>        index++; <br>    } <br> <br>    public int getLength() { <br>        return index; <br>    } <br> <br>    public T get(int i) { <br>        return (T) objArr[i]; <br>    } <br>} <br></pre>




      <br>

      <small>

如果您已經定義了一個泛型類別，想要用這個類別來於另一個泛型類別中宣告成員的話要如何作？舉個實例，假設您已經定義了下面的類別：</small><br>




      
      <ul>

        <li> GenericFoo.java
  </li>

      
      </ul>




      
      <pre>public class GenericFoo&lt;T&gt; {<br>    private T foo;<br> <br>    public void setFoo(T foo) {<br>        this.foo = foo;<br>    }<br> <br>    public T getFoo() {<br>        return foo;<br>    }<br>} <br></pre>




      <br>

      <small>

您想要寫一個包裝類別（Wrapper），這個類別必須也具有GenericFoo的泛型功能，您可以這麼寫：</small><br>




      
      <ul>

        <li> WrapperFoo.java
  </li>

      
      </ul>




      
      <pre>public class WrapperFoo&lt;T&gt; {<br>    private GenericFoo&lt;T&gt; foo;<br>    <br>    public void setFoo(GenericFoo&lt;T&gt; foo) {<br>        this.foo = foo;<br>    }<br> <br>    public GenericFoo&lt;T&gt; getFoo() {<br>        return foo;<br>    }<br>} <br></pre>




      <br>

      <small>

這麼一來，您就可以保留型態持有者 T 的功能，一個使用的例子如下：<br>

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;Integer&gt; foo = new GenericFoo&lt;Integer&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo.setFoo(new Integer(10));</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">WrapperFoo&lt;Integer&gt; wrapper = new WrapperFoo&lt;Integer&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">wrapper.setFoo(foo);</span></small>









 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
       <br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/GenericsExamples.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
</html>
