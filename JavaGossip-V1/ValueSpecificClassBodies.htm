<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ValueSpecificClassBodies.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
<head>




  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">




  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">




  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">




  
  
  
  
  <title>因值而異的類實作（Value-Specific Class Bodies）</title>
</head>


<body>




<h3><a href="../index.html">From
Gossip@Openhome</a></h3>




<h1><a href="index-2.html">Java Gossip: 因值而異的類實作（Value-Specific Class Bodies）</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>因值而異的類實作？原文為 Value-Specific Class
Bodies，其實這個功能簡單的說，實作時像是在使用匿名 <a class="wikilink" href="InnerClass.htm">內
部類別（inner class）</a> 來實現 <a class="wikilink" href="../DesignPattern/CommandPattern.htm">Command
模式</a>，它讓您可以為每個列舉值定義各自的類本體與方法（Method）實作。<br>

      <br>


先來看看其中一種實現的方式，我們先宣告介面：</small>
      <br>



      
      <ul>

        <li> IEnumDescription.java </li>

      
      </ul>



      
      <pre>public interface IEnumDescription {<br>    public String getDescription();<br>} <br></pre>



      <small><br>


這個getDescription()方法，我們希望每個列舉的實例實作自己的方法（而不是像 <a class="wikilink" href="AddMethodToEnum60ee.html?action=print">列
舉上的方法</a> 所介紹的，在定義列舉時統一實作一個getDescription()方法）例如：</small><br>



      
      <ul>

        <li> OpConstants.java </li>

      
      </ul>



      
      <pre>public enum OpConstants implements IEnumDescription {<br>    TURN_LEFT {<br>        public String getDescription() {<br>            return "向左轉";<br>        }<br>    },  // 記得這邊的列舉值分隔 ,<br> <br>    TURN_RIGHT {<br>        public String getDescription() {<br>            return "向右轉";<br>        }<br>    }, // 記得這邊的列舉值分隔 ,<br> <br>    SHOOT {<br>        public String getDescription() {<br>            return "射擊";<br>        }<br>    }; // 記得這邊的列舉值結束 ;<br>} <br></pre>



      
      <p></p>

      <small>

{ 與 }
之間是類本體，您可以在當中如何定義類別一樣宣告field成員或實作方法。TURN_LEFT、TURN_RIGHT與SHOOT三個
OpConstants的列舉實例，它們各自在本體（Body） { 與 }
之間實作了自己的getDescription()方法，而不是像上個主題中統一實作在OpConstants中，再將上個主題中的程式列出，比較一下兩
者的不同：</small><br>



      
      <ul>

        <li> OpConstants.java </li>

      
      </ul>



      
      <pre>public enum OpConstants implements IEnumDescription {<br>    TURN_LEFT("向左轉"), TURN_RIGHT("向右轉"), SHOOT("射擊");<br> <br>    private String description;<br> <br>    OpConstants(String description) {<br>        this.description = description;<br>    }<br> <br>    // 這邊的實作對三個列舉值都一樣<br>    public String getDescription() {<br>        return description;<br>    }<br>} <br></pre>



      <br>

      <small>
寫個測試程式看看結果：</small><br>



      
      <ul>

        <li> ShowEnum.java </li>

      
      </ul>



      
      <pre>public class ShowEnum {<br>    public static void main(String[] args) {<br>        for(OpConstants c : OpConstants.values()) {<br>            System.out.printf("%s%n\t%s%n", <br>                         c, c.getDescription());<br>        }<br>    }<br>} </pre>


      <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><br>


      </span>

      <small><span class="postbody">
執行結果：</span></small><br>




      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">




  <tbody>




    <tr>




      <td style="background-color: rgb(0, 0, 0);"><small><span style="color: rgb(255, 255, 255);">TURN_LEFT<br>


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 向左轉<br>


TURN_RIGHT<br>


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 向右轉<br>


SHOOT<br>


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 射擊</span></small><span style="color: rgb(255, 255, 255);"><br>




      </span></td>




    </tr>




  
  
  
        
        </tbody>
      
      </table>




      <br>

      <small>
這個例子是將因值而異的類實作用在返回列舉值描述上，您可以依相同的方式，為每個列舉值加上一些各自的方法實作，而呼叫的介面是統一的。<br>

      <br>


您也可以運用抽象方法來改寫上面的OpConstants，例如：</small>
      <br>


      
      <ul>

        <li>OpConstants.java</li>

      
      </ul>


      
      <pre>public enum OpConstants {<br>    TURN_LEFT {<br>        public String getDescription() {<br>            return "向左轉";<br>        }<br>    }, <br> <br>    TURN_RIGHT {<br>        public String getDescription() {<br>            return "向右轉";<br>        }<br>    }, <br> <br>    SHOOT {<br>        public String getDescription() {<br>            return "射擊";<br>        }<br>    };<br> <br>   // 宣告個抽象方法<br>   public abstract String getDescription();<br>}</pre>


      <br>

      <small>

執行結果是一樣的；基本上定義介面方法或抽象方法，是為了知道物件的操作方法，這樣您才能去操作這個物件。</small> </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>


<br>


<br>




<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ValueSpecificClassBodies.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
</html>
