<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/VisitorPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:41 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Visitor 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern:&nbsp;Visitor 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
  <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>    <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>您的系統中有客戶、會員與VIP，假設經過設計考量，確定以下的設計是必要的：<br>
      </small>
      <pre>class Customer {<br>    void doCustomer() {<br>        System.out.println("客戶服務");<br>    }<br>    void pay() {<br>        System.out.println("結帳");<br>    }<br>}<br><br>class Member extends Customer {<br>    void doMember() {<br>        System.out.println("會員服務");<br>    }<br>}<br>    <br>class VIP extends Customer {<br>    void doVIP() {<br>        System.out.println("VIP 服務");<br>    }<br>}</pre>
      <small><br>
您要設計一個結帳功能，針對客戶所使用的服務計算客戶要付的費用，計算的演算大部份是針對Customer來進行操作，但其中幾個步驟，不免要針對特定客
戶類型來設計，例如：<br>
      </small>
      <pre>class Service {<br>    void doService(Customer customer) {<br>        customer.doCustomer();<br>        if(customer instanceof Member) {<br>            ((Member) customer).doMember();<br>        }<br>        if(customer instanceof VIP) {<br>            ((VIP) customer).doVIP();<br>        }<br>        customer.pay();<br>    }<br>}</pre>
      <small><br>
使用instanceof來判斷物件類型，一般是不被鼓勵的，如果您的客戶類型繁多，這樣的結構化設計會逐漸加深程式碼的繁複。一般多希望利用多型操作來
解決問題，不要針對特定類型來進行設計。<br>
      <br>
如果經過仔細的考量設計，必須針對特定類型來進行操作確實是不可避免的，那麼您可以換個方式，例如：<br>
      </small>
      <pre><span style="font-weight: bold;">interface Visitable {</span><br style="font-weight: bold;"><span style="font-weight: bold;">    void accept(Visitor visitor);</span><br style="font-weight: bold;"><span style="font-weight: bold;">}</span><br><br><span style="font-weight: bold;">interface Visitor {</span><br style="font-weight: bold;"><span style="font-weight: bold;">    void visit(Member member);</span><br style="font-weight: bold;"><span style="font-weight: bold;">    void visit(VIP vip);</span><br style="font-weight: bold;"><span style="font-weight: bold;">}</span><br style="font-weight: bold;"><br>class Customer <span style="font-weight: bold;">implements Visitable</span> {<br>    void doCustomer() {<br>        System.out.println("客戶服務");<br>    }<br>    void pay() {<br>        System.out.println("結帳");<br>    }<br><span style="font-weight: bold;">    public void accept(Visitor visitor) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        // nothing to do</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }    </span><br>}<br><br>class Member extends Customer {<br>    void doMember() {<br>        System.out.println("會員服務");<br>    }<br><span style="font-weight: bold;">    @Override</span><br style="font-weight: bold;"><span style="font-weight: bold;">    public void accept(Visitor visitor) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        visitor.visit(this); // 看似多型，其實是 overload</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }  </span>  <br>}<br>    <br>class VIP extends Customer {<br>    void doVIP() {<br>        System.out.println("VIP 服務");<br>    }<br><span style="font-weight: bold;">    @Override</span><br style="font-weight: bold;"><span style="font-weight: bold;">    public void accept(Visitor visitor) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        visitor.visit(this); </span><span style="font-weight: bold;">// 看似多型，其實是 overload</span><span style="font-weight: bold;"><br>&nbsp;   }   </span> <br>}<br><br><span style="font-weight: bold;">class VisitorImpl implements Visitor {</span><br style="font-weight: bold;"><span style="font-weight: bold;">    public void visit(Member member) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        member.doMember();</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><span style="font-weight: bold;">    public void visit(VIP vip) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        vip.doVIP();</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><span style="font-weight: bold;">}<br><br></span>class Service {<br>    private Visitor visitor = new VisitorImpl();<br>    void doService(Customer customer) {<br>        customer.doCustomer();<br><span style="font-weight: bold;">        ((Visitable) customer).accept(visitor);</span><br>        customer.pay();<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Service service = new Service();<br>        service.doService(new Member());<br>    }<br>}<span style="font-weight: bold;"></span></pre>
      <small><br>
doService()方法接受的是Customer型態，原先為了針對特別型態作特定操作，不得已使用instanceof作判斷，而上面這個設計，則
是<span style="font-weight: bold;">由Visitor登門入戶，使用物件中的this參考名稱之型態資訊，由物件自行
選擇要呼叫的overload方法。</span><br>
      <br>
      <span style="font-weight: bold;">這是Visitor模式的一個實現，Visitor
模式的目的，是將演算流程與所操作的物件之</span></small><small style="font-weight: bold;">特定</small><small><span style="font-weight: bold;">結構分離，這樣分離之後，針對特定物件的操作部份將集中在Visitor中管理，並可以隨時修
改操作。</span><br>
      <br>
      </small><small>靜
態語言可以使用overload來實現Visitor模式，overload是編譯時期就決定要呼叫哪個方法，對於不支援overload的語言，或者是
動態語言，則可以在Visitor的方法名稱上作個區別（只是少了單一方法名稱呼叫的方便，其實若您將overload的型態資訊也看成是方法名稱的一部
份，也就是方法簽署，道理就相同了）。例如，以下是Python的實現方式：<br>
      </small>
      <pre>class Customer:<br>    def doCustomer(self):<br>        print("客戶服務")<br>    <br>    def pay(self):<br>        print("結帳")<br>    <br>    def accept(self, visitor): pass<br><br>class Member(Customer):<br>    def doMember(self):<br>        print("會員服務")<br>    <br>    def accept(self, visitor):<br>        visitor.visitMember(self)<br>    <br>class VIP(Customer):<br>    def doVIP(self):<br>        print("VIP 服務")<br>        <br>    def accept(self, visitor):<br>        visitor.visitVIP(self)<br><br>class VisitorImpl:<br>    def visitMember(self, member):<br>        member.doMember();<br>    <br>    def visitVIP(self, vip):<br>        vip.doVIP()<br>    <br>class Service:<br>    def __init__(self):<br>        self.visitor = VisitorImpl()<br>    <br>    def doService(self, customer):<br>        customer.doCustomer()<br>        customer.accept(self.visitor)<br>        customer.pay()<br><br>service = Service()<br>service.doService(VIP())</pre>
      <small><br>
Visitor模式的 UML 結構類圖如下：<br>
      <img style="width: 580px; height: 284px;" alt="" src="images/Visitor-1.jpg"></small></td>
    </tr>
  </tbody>
</table>

<br>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/VisitorPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:42 GMT -->
</html>