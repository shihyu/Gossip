<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/GuardedSuspension.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:42 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Guarded Suspension 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern:&nbsp;Guarded Suspension
模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
     <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br> <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>考慮這麼一個伺服器，它可以處理來自多個客戶端的服務請求（Request），為了迅速接受客戶的請求，它要維持一個請求佇
列，客戶的請求會先儲存至請求佇列
中，服務元件會從緩衝區中取出請求並執行，如</small><small>請求佇列</small><small>區中沒有請求，服務元件就等待，直到
被通知有新的請求存入</small><small>請求佇列</small><small>中，服務元件再度進行請求的執行。<br>
      <br>
關於這個描述的一個簡單 UML 順序圖如下所示： <br>
      <br>
      <img style="width: 601px; height: 424px;" alt="" src="images/GuardedSuspension-1.jpg"><br>
      </small><br>
      <small>首先要考慮到，</small><small>請求佇列會</small><small>同時被兩個以上的執行緒進行存取，即
伺服器執行緒與服務元件執行緒，所以必須<span style="font-weight: bold;">對</span></small><small style="font-weight: bold;">請求佇列</small><small><span style="font-weight: bold;">進行防護</span>，當</small><small>請求佇列</small><small>中
沒有請求時，服務元件必須等待直到被通知有新的請求。<br>
      <br>
      <span style="font-weight: bold;">Guarded
Suspension模式強調的是對共用資料的防護，避免共用存取的競爭問題。</span>以Java來實現這個架構的話如下所示： <br>
      </small>
      <pre>import java.util.*;<br><br>interface Request {<br>    void execute();<br>}<br><br><span style="font-weight: bold;">class RequestQueue {</span><br style="font-weight: bold;"><span style="font-weight: bold;">    private LinkedList&lt;Request&gt; requests;</span><br style="font-weight: bold;"><span style="font-weight: bold;">    RequestQueue() {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        requests = new LinkedList&lt;Request&gt;();</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><br style="font-weight: bold;"><span style="font-weight: bold;">    synchronized Request get() {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        while(requests.size() == 0) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">            try {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                wait();</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">            catch(InterruptedException e) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                e.printStackTrace();</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">        }</span><br style="font-weight: bold;"><span style="font-weight: bold;">        return requests.removeFirst();</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><br style="font-weight: bold;"><span style="font-weight: bold;">    synchronized void put(Request request) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        requests.addLast(request);</span><br style="font-weight: bold;"><span style="font-weight: bold;">        notifyAll();</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><span style="font-weight: bold;">} </span><br><br>// 模擬 Server 置入請求<br>class Server implements Runnable {<br>    private RequestQueue queue;<br>    Server(RequestQueue queue) {<br>        this.queue = queue;<br>    }<br>    public void run() {<br>        while(true) {<br>            Request request = new Request() {<br>                public void execute() {<br>                   System.out.println("執行客戶請求...XD");<br>                }<br>            };<br>            queue.put(request);<br>            // 暫停隨機時間<br>            try {<br>                Thread.sleep((int) (Math.random() * 3000)); <br>            }<br>            catch(InterruptedException e) {<br>                e.printStackTrace();<br>            }<br>        }<br>    }<br>}<br><br>// 模擬 Service 取得請求並執行<br>class Service implements Runnable {<br>    private RequestQueue queue;<br>    Service(RequestQueue queue) {<br>        this.queue = queue;<br>    }<br>    public void run() {<br>        while(true) {<br>            queue.get().execute();<br>            // 暫停隨機時間<br>            try {<br>                Thread.sleep((int) (Math.random() * 3000)); <br>            }<br>            catch(InterruptedException e) {<br>                e.printStackTrace();<br>            }<br>        }<br>    }    <br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        RequestQueue queue = new RequestQueue();<br>        (new Thread(new Server(queue))).start();<br>        (new Thread(new Service(queue))).start();<br>    }<br>}</pre>
      <br>
      <small>如果使用Python來示範</small>：<br>
      <pre>import threading<br>import time<br>import random<br><br>class RequestQueue:<br>    def __init__(self):<br>        self.requests = []<br>        self.condition = threading.Condition()<br><br>    def get(self):<br>        self.condition.acquire()<br>        while not self.requests:<br>            self.condition.wait()<br>        request = self.requests.pop(0)<br>        self.condition.release()<br>        return request<br>   <br>    def put(self, request):<br>        self.condition.acquire()<br>        self.requests.append(request)<br>        self.condition.notify()<br>        self.condition.release()<br><br>class Server(threading.Thread):<br>    def __init__(self, queue):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>        <br>    def run(self):<br>        while True:<br>            request = lambda: print("執行客戶請求...XD")<br>            self.queue.put(request)<br>            time.sleep(int(random.random() * 3))<br>            <br>class Service(threading.Thread):<br>    def __init__(self, queue):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>        <br>    def run(self):<br>        while True:<br>            self.queue.get()()<br>            time.sleep(int(random.random() * 3))<br><br>queue = RequestQueue()<br>Server(queue).start()<br>Service(queue).start()<br><br>while True:<br>    try:<br>        time.sleep(1)<br>    except KeyboardInterrupt:<br>        exit()<br></pre>
      <br>
      <small>一個例子是多人聊天伺服器，請求可能只是一個客戶端送出的聊天訊息，聊天訊息會先存至</small><small>訊息佇列</small><small>中，
服務元件會不斷的從訊息佇列中取出
聊天訊息並發給客戶端，如果</small><small>訊息佇列</small><small>中沒有新訊息，則服務元件就進入等待，直到有一個客戶
端發出聊天訊息並存入</small><small>訊息佇列</small><small>中，此時服務元件再度被通知，然後再度取出
訊息並進行發送。</small></td>
    </tr>
  </tbody>
</table>

<br>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/GuardedSuspension.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:42 GMT -->
</html>