<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/DefaultAdapter.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:10 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Default Adapter 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern: Default Adapter 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
<script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;"><small>在Java
中如果要定義事件處理的方式，必須實作EventListener的子介面，例如實作
WindowListener來定義一些視窗事件的處理方式，WindowListener中定義了七個方法：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public
interface WindowListener extends EventListener {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowOpened(WindowEvent e);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowClosing(WindowEvent e);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowClosed(WindowEvent e);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowIconified(WindowEvent e);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowDeiconified(WindowEvent e);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowActivated(WindowEvent e);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowDecativated(WindowEvent e);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>
      </small></div>
      <small>&nbsp;<br>
可以定義一個類別來實作這個介面，以完全想要的事件處理，例如：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public
class WindowEventHandler implements WindowListener {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowOpened(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowClosing(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowClosed(WindowEvent e) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
System.exit(0);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowIconified(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowDeiconified(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowActivated(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowDecativated(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>
      </small></div>
      <small>&nbsp;<br>
      <br>
然而這有個缺點，實作介面的原則是您必須實作當中所定義的所有方法，即使您對某些事件並不感興趣，您也必須實作一個沒有內容的空方法，代表您已經實作了介
面中定義的方法，然而有時，您並不知道介面中到底定義了幾個方法，或是知道也不知道方法的確切名稱與參數，即使您查了API，在程式中寫下一堆沒有實作內
容的方法也是很煩人的一件事。<br>
      <br>
WindowAdapter類別預先實作了WindowListener介面，每個方法中都是空的實作，如下所示：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public
abstract class WindowAdapter </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
implements WindowListener {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowOpened(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowClosing(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowClosed(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowIconified(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowDeiconified(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowActivated(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowDecativated(WindowEvent e) {}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>
      </small></div>
      <small>&nbsp;<br>
可以繼承WindowAdapter類別，並重新定義一些您所感興趣的事件，如此一來，就可以避開之前所提及的，直接實作
WindowListener介面的缺點，如下所示：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public
class WindowEventHandler extends WindowAdapter {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
public void windowClosed(WindowEvent e) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
System.exit(0);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>
      </small></div>
      <small>&nbsp;<br>
      <br>
這就是Default Adapter模式，它使用一個中介的Adapter類別來將真正感興趣的事件實作類別，配接至事件處理介面，上面的程式其
UML 圖如下：<br>
      </small><small><img style="width: 159px; height: 211px;" alt="DefaultAdapter" title="DefaultAdapter" src="images/DefaultAdapter-1.jpg"><br>
      </small><small><br>
將上圖一般化，Default Adapter模式的結構如下所示：<br>
      <img style="width: 127px; height: 143px;" alt="" src="images/DefaultAdapter-2.jpg"><br>
      </small><br>
      <small>像Python這類的動態語言，沒有Java的interface這種機制來規範一個類別所需實作的介面，遵循物件之間的協定
基本上是開發人員的自我約束（當然，還得有適當的說明文件）。這邊可以反過來思考一下，如果你非得有個方式，強制實現某個公開協定，那該怎麼作？<br>
      <br>
可以類似這樣的寫法：<br>
      </small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace; font-weight: bold;">class
XDListener:</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;
&nbsp; def action(self):</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;
&nbsp; &nbsp; &nbsp; assert 0, 'action not implemented'<br>
      <br>
      </small><small style="font-family: Courier New,Courier,monospace; font-weight: bold;">class
Orz(XDListener):<br>
&nbsp;&nbsp;&nbsp; def action(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print("XD")<br>
      <br>
orz = Orz()<br>
orz.action()</small><small style="font-family: Courier New,Courier,monospace; font-weight: bold;"><br>
      </small></div>
      <small><br>
或者引發內建的NotImplementedError：<br>
      </small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace; font-weight: bold;">class
XDListener:<br>
&nbsp;&nbsp;&nbsp; def action(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raise
NotImplementedError("action not implemented")<br>
      <br>
      </small><small style="font-family: Courier New,Courier,monospace; font-weight: bold;">class
Orz(XDListener):<br>
&nbsp;&nbsp;&nbsp; def action(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print("XD")<br>
      <br>
orz = Orz()<br>
orz.action()</small><br>
      </div>
      <br>
      <br>
      <small>這樣的方式，在類別沒有重新定義指定方法時，至少在執行時期可以引起開發人員的注意，告訴他非得實作某個方法才行，如果你還想
要進一步阻止XDListener的實例化，則可以這麼實作：<br>
      </small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">class XDListener:</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; def __new__(clz):</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
raise NotImplementedError('Could not instantiate abstract ' + str(clz))</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; def action(self):</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
raise NotImplementedError("action not implemented")</span></small><br>
      </div>
      <br>
      <small>上例中，如果您試圖實例化XDListener，則會引發錯誤。或者你可以更進一步使用Python的特性：<br>
      </small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace; font-weight: bold;">from
abc import ABCMeta, abstractmethod</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">class
XDListener(metaclass=ABCMeta):</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp;
@abstractmethod</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp;
def action(self):</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pass</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">class
Orz(XDListener):</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp;
def action(self):</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
print("XD")</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">orz
= Orz()</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">orz.action()</small><br>
      </div>
      <br>
      <small>上例中，如果試圖實例化XDListener，則會發生TypeError：<br>
      </small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">TypeError: Can't instantiate abstract class
XDListener with abstract methods action</span></small><br>
      </div>
      <br>
      <small>或者是子類別沒有實作所有被@abstractmethod修飾的方法，也會引發TypeError。例如若未實作
action()的話：</small><br>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">TypeError: Can't instantiate abstract class
Orz with abstract methods action</span></small><br>
      </div>
      <br>
      </td>
    </tr>
  </tbody>
</table>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/DefaultAdapter.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:11 GMT -->
</html>