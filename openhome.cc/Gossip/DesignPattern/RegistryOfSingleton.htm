<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/RegistryOfSingleton.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:10 GMT -->
<head>





  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">





  
  
  
  
  
  <title>Registry of Singleton 模式</title></head>

<body>





<h3><a href="../index.html">From
Gossip@Openhome</a></h3>





<h1><a href="index-2.html">Design Pattern: Registry of Singleton 模式</a></h1>






<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">



  <tbody>



    <tr>



      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>








      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>








      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>








      <br>







      
      
      
      
      
      
      
      <center>
      
      
      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>








      </center>








 </td>



      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>如果你需要管理一群不同類型的物件，並希望在程式中這些物件在取得時都是單例，你可以使用Register of Singleton模式。在Java中若要實現</small><small>Register of Singleton模式，可以使用Reflection機制來達成：<br></small><pre>import java.util.*;<br><br>public class SingletonRegistry {<br>    private static Map&lt;String, Object&gt; registry = <br>                      new HashMap&lt;String, Object&gt;();<br><br>    private SingletonRegistry() {}<br>    <br>    public static Object getInstance(String classname) {<br>        Object singleton = registry.get(classname);<br><br>        if(singleton != null) {<br>            return singleton;<br>        }<br>        try {<br>            singleton = Class.forName(classname).newInstance();<br>        }<br>        catch(Exception e) {<br>            throw new RuntimeException(e);<br>        }<br>      <br>        registry.put(classname, singleton);<br>      <br>        return singleton;<br>    }<br>}</pre><small><br>程式撰寫需透過SingletonRegistry的getInstance()來取得所需之物件，</small><small>SingletonRegistry維持唯一的一個註冊表，註冊表使用Map實現，若註冊表中已有所需之物件就直接傳回，從而保證</small><small>透過SingletonRegistry的getInstance()所取得的都是單例。<br></small><small><br>如果是Python的話，則可以透過Introspection機制來實作</small><small>Registry of Singleton：<br></small><pre>class SingletonRegistry:<br>    __registry = {}<br>    <br>    def __init__(self):<br>        raise Singleton.__single<br>        <br>    def getInstance(classname):<br>        if classname in SingletonRegistry.__registry:<br>            return SingletonRegistry.__registry[classname]<br>        singleton = getattr(sys.modules[__name__] , classname)()<br>        SingletonRegistry.__registry[classname] = singleton<br>        return singleton</pre><small><br><br>如果不使用Reflection</small><small>或Introspection機制</small><small>的話，則可以提供一個註冊方法：<br></small><pre>public class SingletonRegistry {<br>    private static Map&lt;String, Object&gt; registry = <br>                      new HashMap&lt;String, Object&gt;();<br>    private static Singleton instance;<br><br>    private SingletonRegistry() {}<br>    <br>    public static void register(String name, Object singleton) {<br>        registry.put(name, singleton);<br>    }<br><br>    public static Object getInstance(String classname) {<br>        return registry.get(classname);<br>    }<br>}</pre><small><br>註冊的時機可以是在建構物件之時，例如：<br></small><div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class Some {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; public Some() {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; &nbsp; &nbsp; //...</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; &nbsp; &nbsp; SingletonRegistry.register(Some.class.getName(), this);</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; }</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span></small><br></div><small><br>或者是在建構物件之後主動註冊：<br></small><div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">Some some = new Some();</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small style="font-weight: bold; font-family: Courier New,Courier,monospace;">SingletonRegistry.register(Some.class.getName(), some);</small><br></div><small><br>



這種方式的缺點是您必須在程式中有一段初始化程序，先向RegistrySingleton進行註冊，
好處是可以適用於沒有Reflection機制的語言。</small><br>


      </td>



    </tr>



  
  
  </tbody>
</table>



<br>


<br>



<br>





<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/RegistryOfSingleton.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:10 GMT -->
</html>