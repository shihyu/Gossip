<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/TemplateMethod.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:34 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Template Method 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern:&nbsp;Template Method 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
  <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>    <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>您想要設計一個猜數字遊戲，</small><small>猜數字遊戲的流程大致就是：</small><br>
      <div style="margin-left: 40px;"><small style="font-weight: bold;">顯
示訊息（</small><small style="font-weight: bold;">歡迎</small><small style="font-weight: bold;">）<br>
隨機產生數字</small><br>
      <small><span style="font-weight: bold;">遊戲迴圈<br>
&nbsp; &nbsp; </span></small><small style="font-weight: bold;">顯示訊息（</small><small style="font-weight: bold;">提示使用者輸入</small><small style="font-weight: bold;">）</small><br style="font-weight: bold;">
      <small><span style="font-weight: bold;">&nbsp; &nbsp; 取得使用者輸入</span></small><br style="font-weight: bold;">
      <small><span style="font-weight: bold;">&nbsp; &nbsp; 比較是否猜中<br>
      </span></small>&nbsp; &nbsp;<small><span style="font-weight: bold;"></span></small><small style="font-weight: bold;">顯示訊息（</small><small style="font-weight: bold;">輸入正確與否</small><small style="font-weight: bold;">）</small><small><span style="font-weight: bold;"></span></small></div>
      <br>
      <small>在描述流程輸廓時，並沒有提及如何顯示訊息、沒有提及如何取得使用者輸入等具體的作法，只是<span style="font-weight: bold;">歸納出一些共同的流程步驟</span>：<br>
      </small>
      <pre>abstract class GuessGame {<br>    protected String welcome;<br>    protected String prompt;<br>    protected String correct;<br>    protected String bigger;<br>    protected String smaller;<br>   <br>    void go() {<br>        message(welcome);<br> <br>        int number = (int) (Math.random() * 10);<br>        int guess = 0;<br>        do {<br>            message(prompt);<br>            guess = guess();<br>            if(guess &gt; number) {<br>                message(bigger);<br>            }<br>            else if(guess &lt; number) {<br>                message(smaller);<br>            }<br>        } while(guess != number);<br>       <br>        message(correct);<br>    }<br><br>    protected abstract void message(String message);<br>    protected abstract int guess();<br>}<br></pre>
      <small><br>
      </small><small>如果是個文字模式下的猜數字遊戲，可以將顯示訊息、取得使用者輸入等以文字模式下的具體作法實現出來。例如：<br>
      </small>
      <pre>import java.util.Scanner;<br><br>class ConsoleGame extends GuessGame {<br>    private Scanner scanner;<br>   <br>    ConsoleGame() {<br>        welcome = "歡迎";<br>        prompt = "輸入";<br>        correct = "猜中了";<br>        bigger = "你猜的比較大";<br>        smaller = "你猜的比較小";<br>        scanner = new Scanner(System.in);<br>    }<br>   <br>    protected void message(String msg) {<br>        System.out.println(msg);<br>    }<br>   <br>    protected int guess() {<br>        return scanner.nextInt();<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        GuessGame game = new ConsoleGame();<br>        game.go();<br>    }<br>}</pre>
      <small><br>
這是Template Method模式的實例，其在抽象父類別中定義好某個操作的整體流程，而在子類別中才將流程中一些未定的操作實現出來：<br>
      </small><small><img style="width: 427px; height: 279px;" alt="" src="images/TemplateMethod-1.jpg"><br>
      <br>
如果以Python來實現：<br>
      </small>
      <pre>import random<br>from abc import ABCMeta, abstractmethod<br><br>class GuessGame(metaclass=ABCMeta):<br>    @abstractmethod<br>    def message(self, msg):<br>        pass<br><br>    @abstractmethod<br>    def guess(self):<br>        pass    &nbsp;<br><br>    def go(self):<br>        self.message(self.welcome)<br>        number = int(random.random() * 10)<br>        while True:<br>            guess = self.guess();<br>            if guess &gt; number:<br>                self.message(self.bigger)<br>            elif guess &lt; number:<br>                self.message(self.smaller)<br>            else:<br>                break<br>        self.message(self.correct)<br><br>class ConsoleGame(GuessGame):<br>    def __init__(self):<br>        self.welcome = "歡迎"<br>        self.prompt = "輸入數字："<br>       &nbsp;self.correct = "猜中了"<br>        self.bigger = "你猜的比較大"<br>        self.smaller = "你猜的比較小"<br>    <br>    def message(self, msg):<br>        print(msg)<br>    <br>    def guess(self):<br>        return int(input(self.prompt))<br><br>game = ConsoleGame()<br>game.go()</pre>
      <small><br>
      </small><small>在Java
中要撰寫Servlet，會繼承HttpServlet類別，針對GET方法的請求，會重新定義doGet()方法，針對POST方法的請求，會重新定義
doPost()方法....。事實上，這也是Template
Method模式的實際例子，因為在HttpServlet處理請求的service()方法中，是這麼定義的：<br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
protected void service(HttpServletRequest req, </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
HttpServletResponse resp)</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throws ServletException, IOException {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String method = req.getMethod(); // 取得請求的方法</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (method.equals(METHOD_GET)) { // HTTP GET</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // 略...</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <span style="color: red;">doGet(req, resp);</span></span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// 略 ...</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} else if (method.equals(METHOD_HEAD)) { // HTTP HEAD</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// 略 ...</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <span style="color: red;">doHead(req, resp);</span></span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} else if (method.equals(METHOD_POST)) { // HTTP POST</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // 略 ...</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <span style="color: red;">doPost(req, resp);</span></span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} else if (method.equals(METHOD_PUT)) { // HTTP PUT</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // 略 ...</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
}</span><br>
      <br>
當
請求來到時，容器會呼叫Servlet的service()方法，而可以看到，HttpServlet的service()中所定義的，基本上就是判斷
HTTP請求的方式，再分別呼叫doGet()、doPost()等方法，所以若您想針對GET、POST等方法進行處理，才會只需要在繼承
HttpServlet之後，重新定義相對應的doGet()、doPost()方法。<br>
      <br>
Template Method模式著重的是在父類別實作骨架，而將未實作抽象方法部份留待子類別來實作。先前在說明 </small><small><a href="FactoryMethod.htm">Factory
Method 模式</a></small><small> 前，其實就曾使用過 </small><small>Template
Method模式。</small><small><br>
      <br>
      <a href="FactoryMethod.htm">Factory Method 模式</a>將實際<span style="font-weight: bold;">要建立的物件</span>推遲至子類中決定，而
Template
Method模式則是將框架中<span style="font-weight: bold;">抽象的流程部份</span>留待子類來解決。在 </small><small><a href="FactoryMethod.htm">Factory Method 模式</a> </small><small>的例子中，從物件
建立的角度來看</small><small>，createDocument()</small><small>是Factory
Method，而從流程框架的角度來看，</small><small>createDocument()</small><small>則是
Template
Method模式的一個方法實作。</small> <br>
      </td>
    </tr>
  </tbody>
</table>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/TemplateMethod.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:34 GMT -->
</html>