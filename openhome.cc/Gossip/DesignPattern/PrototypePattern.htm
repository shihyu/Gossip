<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/PrototypePattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:07 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Prototype 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern: Prototype 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
<script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>有些物件若以標準的方式建立實例，或者是設定至某個狀態需要複雜的運算及昂貴的資源，則您可以考慮直接以某個物件作為原型，在
需要個別該物件時，複製原型並傳回。<br>
      <br>
先來看看Prototype的類別圖：<br>
      <img style="width: 184px; height: 246px;" alt="" src="images/ProtoType-1.jpg"><br>
      <br>
請注意，在這邊Cloneable並非指Java中的java.lang.Cloneable，而是指支援原型複製的物件，必須實作之公開協定。<br>
      <br>
不
同的語言可能提供不同程度支援之物件複製技術，以Java而言，java.lang.Object本身即定義有clone()方法，因此所有的物件基本上
皆具自我複製之能力，不過真正要讓物件支援複製，則物件必須實作java.lang.Cloneable這個標示介面（Tag interface）。<br>
      <br>
下面這個範例示範了，如何使用Java實作Prototype模式（</small><small>建議您參考：<a href="http://www.javaworld.com/javaworld/jw-01-1999/jw-01-object.html">How
to avoid traps and correctly override methods from java.lang.Object</a></small><small>）：<br>
      </small>
      <pre>import java.util.*;<br><br>class Wheel implements Cloneable {<br>    // 也許還有一些複雜的設定<br>    protected Object clone() throws CloneNotSupportedException { <br>        return super.clone(); <br>    }    <br>}<br><br>class Car implements Cloneable {<br>    // 也許還有一些複雜的設定<br>    private Wheel[] wheels = {new Wheel(), new Wheel(), new Wheel(), new Wheel()};<br>    <br>    protected Object clone() throws CloneNotSupportedException {<br>        Car copy = (Car) super.clone();<br>        copy.wheels = (Wheel[]) this.wheels.clone();<br>        for(int i = 0; i &lt; this.wheels.length; i++) {<br>            copy.wheels[i] = (Wheel) this.wheels[i].clone();<br>        }<br>        return copy; <br>    }<br>    // 也許還有別的方法<br>}<br><br>class Cars {<br>    private Map&lt;String, Car&gt; prototypes = new HashMap&lt;String, Car&gt;();<br>    void addPrototype(String brand, Car prototype) {<br>        prototypes.put(brand, prototype);<br>    }<br>    Car getPrototype(String brand) throws CloneNotSupportedException {<br>        return (Car) prototypes.get(brand).clone();<br>    }<br>}<br>    <br>public class Main {<br>    public static void main(String[] args) throws Exception {<br>        Car bmw = new Car();<br>        // 作一些 BMW 複雜的初始、設定、有的沒的<br>        Car benz = new Car();<br>        // 作一些 BENZ 複雜的初始、設定、有的沒的<br>        Cars cars = new Cars();<br>        cars.addPrototype("BMW", bmw);<br>        cars.addPrototype("BENS", benz);<br>        // 取得 BMW 原型複製<br>        Car bmwPrototype = cars.getPrototype("BMW");<br>    }<br>}</pre>
      <small><br>
如果是Python，則可以透過copy模組的deepcopy()函式來達到物件複製的目的，以下為上面範例的Python實現：<br>
      </small>
      <pre>import copy<br><br>class Wheel:<br>    def clone(self):<br>        return copy.deepcopy(self)<br><br>class Car:<br>    def __init__(self):<br>        self.wheels = [Wheel(), Wheel(), Wheel(), Wheel()]<br>    def clone(self):<br>        return copy.deepcopy(self)<br><br>class Cars:<br>    def __init__(self):<br>        self.prototypes = {}<br>    def addPrototype(self, brand, car):<br>        self.prototypes[brand] = car<br>    def getPrototype(self, brand):<br>        return self.prototypes[brand].clone()<br>        <br>bmw = Car()<br>benz = Car()<br>cars = Cars()<br>cars.addPrototype("BMW", bmw)<br>cars.addPrototype("BENZ", benz)<br>bmwPrototype = cars.getPrototype("BMW")</pre>
      <small><br>
Prototype模式可應用於避免子類化物件創建者（object creator），在 Gof
的設計模式書中有個範例，設計一個通用的圖型編輯器框架。在這個框架中有個工具列，您可以在上面選擇符號以加入圖片中，並可以隨時調整符號的位置等。<br>
      <br>
圖型編輯器框架是通用的，然而事先並不知道這些符號的型態，有人或許會想到繼承圖型編輯器框架來為每個符號設計一個框
架子類別，但由於符號的可能種類很多，這會產生相當多的子類別，為了避免這種情況，可以透過Prototype模式來減少子類別的數目，可以設計出以下的
結構：<br>
      </small><small><img style="width: 472px; height: 317px;" alt="Prototype" title="Prototype" src="images/ProtoType-2.jpg"></small><small><br>
      <br>
依照這個結構，圖型編輯器框架可以獨立於要套用的符號類別，雖然不知道被複製傳回的物件型態是什麼，但可以用原型複製的方式來建立新物件，且可以按照
Graphics所定義的公開介面來操作這些物件，例如使用範例中的draw()方法來繪製符號。<br>
      <br>
      <br>
      <br>
      </small></td>
    </tr>
  </tbody>
</table>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/PrototypePattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:09 GMT -->
</html>