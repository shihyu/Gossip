<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/ProducerConsumer.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:42 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Producer Consumer 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern:&nbsp;Producer Consumer
模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
     <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br> <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>假
設Producer與Consumer是兩個獨立的執行緒，Producer與Consumer生產與消費的速度並不一定，因此Producer將產品放
在中介物件，而Consumer從中介物件取得產品。假設中介物件持有產品的緩衝區長度有限（就像是一個產品桌，它可以擺放的空間是有限的），如果緩衝區
滿了，則Producer必須停止
繼續將產品放到緩衝區中，直到Consumer取走了產品而有了空間，而如果緩衝區中沒有產品，當然Consumer必須等待，直到有新的產品放到緩衝區
中。 <br>
      <br>
一個簡單的 UML 順序圖如下所示：<br>
      <img style="width: 532px; height: 676px;" alt="" src="images/ProducerConsumer-1.jpg"><br>
      </small><small><br>
      <span style="font-weight: bold;">Producer
Consumer模式強調的是如何協調非同步生產與消費的問題。</span>一個用Java實現的簡單流程架構如下：<br>
      </small>
      <pre>import java.util.*;<br><br><span style="font-weight: bold;">class Store {</span><br style="font-weight: bold;"><span style="font-weight: bold;">    private LinkedList&lt;Integer&gt; products = new LinkedList&lt;Integer&gt;();</span><br style="font-weight: bold;"><span style="font-weight: bold;">    synchronized void add(Integer product) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        while(products.size() &gt;= 2) { // 容量限制為 2</span><br style="font-weight: bold;"><span style="font-weight: bold;">            try {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                wait();</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">            catch(InterruptedException e) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                e.printStackTrace();</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">        }</span><br style="font-weight: bold;"><span style="font-weight: bold;">        products.addLast(product);</span><br style="font-weight: bold;"><span style="font-weight: bold;">        notifyAll();</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><span style="font-weight: bold;">    synchronized Integer get() {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        while(products.size() &lt;= 0) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">            try {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                wait();</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">            catch(InterruptedException e) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                e.printStackTrace();</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">        }</span><br style="font-weight: bold;"><span style="font-weight: bold;">        Integer product = products.removeFirst();</span><br style="font-weight: bold;"><span style="font-weight: bold;">        notifyAll();</span><br style="font-weight: bold;"><span style="font-weight: bold;">        return product;</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><span style="font-weight: bold;">} </span><br><br><span style="font-weight: bold;">class Producer implements Runnable {</span><br style="font-weight: bold;"><span style="font-weight: bold;">    private Store store;   </span><br style="font-weight: bold;"><span style="font-weight: bold;">    Producer(Store store) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        this.store = store;</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><span style="font-weight: bold;">    public void run() {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        for(int product = 1; product &lt;= 10; product++) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">            try {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                // wait for a random time</span><br style="font-weight: bold;"><span style="font-weight: bold;">                Thread.sleep((int) Math.random() * 3000);</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">            catch(InterruptedException e) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                e.printStackTrace();</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">            store.add(product);</span><br style="font-weight: bold;"><span style="font-weight: bold;">            System.out.println("Produce " + product);</span><br style="font-weight: bold;"><span style="font-weight: bold;">        }      </span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><span style="font-weight: bold;">} </span><br style="font-weight: bold;"><br style="font-weight: bold;"><span style="font-weight: bold;">class Consumer implements Runnable {</span><br style="font-weight: bold;"><span style="font-weight: bold;">    private Store store;</span><br style="font-weight: bold;"><span style="font-weight: bold;">   </span><br style="font-weight: bold;"><span style="font-weight: bold;">    Consumer(Store store) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        this.store = store;</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><span style="font-weight: bold;">   </span><br style="font-weight: bold;"><span style="font-weight: bold;">    public void run() {</span><br style="font-weight: bold;"><span style="font-weight: bold;">        for(int i = 1; i &lt;= 10; i++) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">            try {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                // wait for a random time</span><br style="font-weight: bold;"><span style="font-weight: bold;">                Thread.sleep((int) (Math.random() * 3000));</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">            catch(InterruptedException e) {</span><br style="font-weight: bold;"><span style="font-weight: bold;">                e.printStackTrace();</span><br style="font-weight: bold;"><span style="font-weight: bold;">            }</span><br style="font-weight: bold;"><span style="font-weight: bold;">            System.out.println("Consume " + store.get());</span><br style="font-weight: bold;"><span style="font-weight: bold;">        }</span><br style="font-weight: bold;"><span style="font-weight: bold;">    }</span><br style="font-weight: bold;"><span style="font-weight: bold;">} </span><br><br>public class Main {<br>    public static void main(String[] args) {<br>        Store store = new Store();<br>        (new Thread(new Producer(store))).start();<br>        (new Thread(new Consumer(store))).start();<br>    }<br>}</pre>
      <br>
      <small>如果使用Python來實現以下範例：<br>
      </small>
      <pre>import threading<br>import time<br>import random<br><br>class Store:<br>    def __init__(self):<br>        self.products = []<br>        self.condition = threading.Condition()<br>    <br>    def add(self, product):<br>        self.condition.acquire()<br>        while len(self.products) &gt;= 2: # 容量限制為 2<br>            self.condition.wait()<br>        self.products.append(product)<br>        self.condition.notify()<br>        self.condition.release()<br>        <br>    def get(self):<br>        self.condition.acquire()<br>        while not self.products:<br>            self.condition.wait()<br>        product = self.products.pop(0)<br>        self.condition.notify()<br>        self.condition.release()<br>        return product<br><br>class Producer(threading.Thread):<br>    def __init__(self, store):<br>        threading.Thread.__init__(self)<br>        self.store = store<br>        <br>    def run(self):<br>        for product in range(1, 11):<br>            time.sleep(int(random.random() * 3))<br>            self.store.add(product)<br>            print("Produce %d" % product)<br><br>class Consumer(threading.Thread):<br>    def __init__(self, store):<br>        threading.Thread.__init__(self)<br>        self.store = store<br>   <br>    def run(self):<br>        for i in range(1, 11):<br>            time.sleep(int(random.random() * 3))<br>            print("Consume %d" % store.get())<br><br>store = Store()<br>Producer(store).start()<br>Consumer(store).start()</pre>
      <br>
      <br>
      <br>
       </td>
    </tr>
  </tbody>
</table>

<br>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/ProducerConsumer.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:46 GMT -->
</html>