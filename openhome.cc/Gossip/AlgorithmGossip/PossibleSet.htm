<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/PossibleSet.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:53 GMT -->
<head>



















  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>產生可能的清單</title></head><body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Algorithm Gossip: 產生可能的清單</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 





      
      <h2>說明</h2>

      <small>

給定一組數字或符號清單，從中挑選元素產生所有可能的清單（包括空清單），例如給定1 2 3，則可能的清單為：[]、[1]、[1, 2]、[1, 2, 3]、[1, 3]、[2]、[2, 3]、[3]。</small><br>



      
      <h2>解法</h2>

      <small>

如果不考慮字典順序，有個簡單的方法可以產生所有清單。思考二進位數字加法，並注意1出現的位置，如果每個位置都對應一個數字，則由1所對應的數字所產生的就是一個清單，例如：</small> <br>




      
      <table border="1" width="50%">



  <tbody>



    <tr>



      <td align="left" valign="top"><small>000 </small></td>




      <td align="left" valign="top"><small>[] </small><br>
</td>




    </tr>




    <tr>




      <td align="left" valign="top"><small>001 </small></td>




      <td align="left" valign="top"><small>[3] </small></td>




    </tr>




    <tr>




      <td align="left" valign="top"><small>010 </small></td>




      <td align="left" valign="top"><small>[2] </small></td>




    </tr>




    <tr>




      <td align="left" valign="top"><small>011 </small></td>




      <td align="left" valign="top"><small>[2, 3] </small></td>




    </tr>




    <tr>




      <td align="left" valign="top"><small>100 </small></td>




      <td align="left" valign="top"><small>[1] </small></td>




    </tr>




    <tr>




      <td align="left" valign="top"><small>101 </small></td>




      <td align="left" valign="top"><small>[1, 3] </small></td>




    </tr>




    <tr>




      <td align="left" valign="top"><small>110 </small></td>




      <td align="left" valign="top"><small>[1, 2] </small></td>




    </tr>




    <tr>




      <td align="left" valign="top"><small>111 </small></td>




      <td align="left" valign="top"><small>[1, 2, 3] </small></td>



    </tr>



  
  
        
        </tbody>
      
      </table>



      <br>

      <small>

瞭解這個方法後，剩下的就是如何產生二進位數？有許多方法可以使用，可以使用unsigned型別加上&amp;位元運算來產生，這邊則是使用陣列搜
尋。首先陣列內容全為0；接著找第一個0，在還沒找到前將走訪過的內容變為0，而第一個找到的0則變為1，如此重複直到所有陣列元素都變為1為止。例如：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">000&nbsp;=&gt; 100&nbsp;=&gt; 010&nbsp;=&gt; 110&nbsp;=&gt; 001&nbsp;=&gt; 101&nbsp;=&gt; 011&nbsp;=&gt; 111</span><br>



      </small></div>



      



      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2><br>
<ul>

        
        <li> <a name="C"></a>C
  </li>


      
      </ul>




      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define MAXSIZE 20 <br><br>int indexOf(int, int*, int);<br>void cleanTo(int, int*);<br>int hasNext(int*, int);<br>void next(int*, int);<br>void printList(int*, int);<br><br>int main(void) {<br>    int digits[MAXSIZE] = {0}; <br>    <br>    int length; <br>    printf("輸入清單個數："); <br>    scanf("%d", &amp;length); <br><br>    printList(digits, length);<br>    while(hasNext(digits, length)) {<br>        next(digits, length);<br>        printList(digits, length);<br>    }<br><br>    return 0; <br>} <br><br>int indexOf(int n, int* digits, int length) {<br>    int i;<br>    for(i = 0; i &lt; length &amp;&amp; digits[i] != n; i++);<br>    return i == length ? -1 : i;<br>}<br><br>void cleanTo(int i, int* digits) {<br>    int j;<br>    for(j = 0; j &lt; i; digits[j] = 0, j++);<br>}<br><br>int hasNext(int* digits, int length) {<br>    return indexOf(0, digits, length) != -1;<br>}<br><br>void next(int* digits, int length) {<br>    int i = indexOf(0, digits, length);<br>    cleanTo(i, digits);<br>    digits[i] = 1;<br>}<br><br>void printList(int* digits, int length) {<br>    int i = indexOf(1, digits, length);<br>    printf(i == -1 ? "[" : "[%d", i + 1);<br>    int j;<br>    for(j = i + 1; j &lt; length; j++) if(digits[j] == 1) {<br>        printf(", %d", j + 1); <br>    }<br>    printf("]\n");<br>}<br></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre>import java.util.*;<br><br>public class PossibleList {<br>    private static class Binary&lt;T&gt; {<br>        int[] digits;<br>        <br>        Binary(int[] digits) { this.digits = digits; }<br>        <br>        int indexOf(int elem) {<br>            int i;<br>            for(i = 0; i &lt; digits.length &amp;&amp; digits[i] != elem; i++);<br>            return i == digits.length ? -1 : i;<br>        }<br>        <br>        boolean hasNext() { return indexOf(0) != -1; }<br>        <br>        Binary&lt;T&gt; next() {<br>            int i = indexOf(0);<br>            int[] nextDigits = Arrays.copyOf(digits, digits.length);<br>            for(int j = 0; j &lt; i; nextDigits[j] = 0, j++);<br>            nextDigits[i] = 1;<br>            return new Binary&lt;&gt;(nextDigits);<br>        }<br>        <br>        public List&lt;T&gt; toList(List&lt;T&gt; src) {<br>            List&lt;T&gt; lt = new ArrayList&lt;&gt;();<br>            int i = indexOf(1);<br>            if(i != -1) {<br>                for(int j = i; j &lt; digits.length; j++) if(digits[j] == 1) {<br>                    lt.add(src.get(j));<br>                }<br>            }<br>            return lt;<br>        }<br>    }<br>    <br>    public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; from(List&lt;T&gt; src) {<br>        Binary&lt;T&gt; binary = new Binary&lt;&gt;(new int[src.size()]);<br>        List&lt;List&lt;T&gt;&gt; all = new ArrayList&lt;&gt;();<br>        all.add(binary.toList(src));<br>        while(binary.hasNext()) {<br>            binary = binary.next();<br>            all.add(binary.toList(src));<br>        }<br>        return all;<br>    }<br>    <br>    public static void main(String[] args) {<br>        for(List&lt;Integer&gt; lt : from(Arrays.asList(1, 2, 3, 4))) {<br>            System.out.println(lt);<br>        }<br>    }<br>}<br></pre>




      <br><ul><li><a name="Python"></a>Python</li></ul><pre>from functools import reduce<br><br>class Binary:<br>    def __init__(self, digits):<br>        self.digits = digits<br>    def hasNext(self):<br>        return 0 in self.digits<br>    def next(self):<br>        i = self.digits.index(0) if 0 in self.digits else -1<br>        return Binary([0] * i + [1] + self.digits[i + 1:])<br>    def toList(self, src):<br>        return reduce(lambda acc, t: acc + [t[1]] if t[0] == 1 else acc,<br>                      zip(self.digits, src), [])<br><br>def possibleLts(src):<br>    def iter(binary):<br>        return [binary.toList(src)] + \<br>            (iter(binary.next()) if binary.hasNext() else [])<br>    return iter(Binary([0] * len(src)))<br>    <br>for lt in possibleLts([1, 2, 3, 4]):<br>    print(lt)</pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>def list[T](elem: T, length: Int) = for(i &lt;- 0 until length) yield elem<br><br>class Binary[T](digits: List[Int]) {<br>    def hasNext = digits.contains(0)<br>    def next = {<br>        val i = if(digits.contains(0)) digits.indexOf(0) else -1<br>        new Binary[T](<br>            (list(0, i) :\ (1 :: digits.drop(i + 1)))(_ :: _))<br>    }<br>    def toList(src: List[T]) = {<br>        (digits.zip(src) :\ (Nil : List[T]))(<br>            (t, acc) =&gt; if(t._1 == 1) t._2 :: acc else acc)<br>    }<br>}<br><br>def from[T](src: List[T]) = {<br>    def iterate(binary: Binary[T]): List[List[T]] = {<br>        binary.toList(src) :: (<br>            if(binary.hasNext) iterate(binary.next) else Nil)<br>    }<br>    iterate(new Binary[T]((list(0, src.size)).toList))<br>}<br><br>from(List(1, 2, 3, 4)).foreach(println)</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>class Binary<br>    def initialize(digits)<br>        @digits = digits<br>    end<br>    def hasNext<br>        @digits.include? 0<br>    end<br>    def next<br>        i = @digits.index(0)<br>        Binary.new([0] * i + [1] + @digits.drop(i + 1))<br>    end<br>    def toList(src)<br>        @digits.zip(src).reduce([]) { |acc, t| <br>            t[0] == 1 ? acc + [t[1]] : acc <br>        }<br>    end<br>end<br><br>def possibleLts(src)<br>    iter = -&gt;(binary) {<br>        [binary.toList(src)] + <br>            (binary.hasNext ? iter.call(binary.next) : [])<br>    }<br>    iter.call(Binary.new([0] * src.size))<br>end<br>    <br>possibleLts([1, 2, 3, 4]).each do |lt|<br>    print("#{lt}\n")<br>end<br></pre>
      <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><br>
</span>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>function list(elem, length) {<br>    var lt = [];<br>    for(var i = 0; i &lt; length; i++) { lt.push(elem); }<br>    return lt;<br>}<br><br>function Binary(digits) { this.digits = digits; }<br><br>Binary.prototype.hasNext = function() {<br>    return this.digits.indexOf(0) != -1;<br>};<br><br>Binary.prototype.next = function() {<br>    var i = this.digits.indexOf(0);<br>    return new Binary(list(0, i).concat(<br>        [1].concat(this.digits.slice(i + 1, this.digits.length))));<br>};<br><br>Binary.prototype.toList = function(src) {<br>    var lt = [];<br>    var i = this.digits.indexOf(1);<br>    if(i != -1) {<br>        for(var j = i; j &lt; this.digits.length; j++) if(this.digits[j] == 1) {<br>            lt.push(src[j]);<br>        }<br>    }<br>    return lt;<br>};<br><br>function from(src) {<br>    var binary = new Binary(list(0, src.length));<br>    var all = [];<br>    all.push(binary.toList(src));<br>    while(binary.hasNext()) {<br>        binary = binary.next();<br>        all.push(binary.toList(src));<br>    }<br>    return all;<br>}<br><br>from([1, 2, 3, 4]).forEach(function(lt) {<br>    print(lt);<br>});<br></pre>
      <br>

      
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"></span>
      <pre>import Data.List (elemIndex)<br><br>hasNext digits = 0 `elem` digits<br><br>next digits =<br>    (replicate i 0) ++ (1 : (drop (i + 1) digits))<br>    where (Just i) = 0 `elemIndex` digits<br>    <br>toList digits src =<br>    foldr (\t acc -&gt; if fst t == 1 then snd t : acc <br>                     else acc) [] $ zip digits src<br><br>possibleLts src = iter $ replicate (length src) 0<br>    where<br>        iter digits = <br>            toList digits src : if hasNext digits <br>                                    then iter $ next digits <br>                                    else []<br>            <br>main = sequence [print lt | lt &lt;- possibleLts [1, 2, 3, 4]]<br></pre>
      <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><br>
<br>
      </span></td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>



<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/PossibleSet.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:53 GMT -->
</html>