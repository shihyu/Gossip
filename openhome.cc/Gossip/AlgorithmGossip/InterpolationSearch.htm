<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/InterpolationSearch.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:06 GMT -->
<head>








  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>插補搜尋法</title></head><body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Algorithm Gossip: 插補搜尋法</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 




      
      <h2>說明</h2>

      <small>
如果卻搜尋的資料分佈平均的話，可以使用插補（Interpolation）搜尋法來進行搜尋，在搜尋的對象大於500時，插補搜尋法會比 二分搜尋法 來的快速。</small><br>


      
      <h2>解法</h2>

      <small>
插補搜尋法是以資料分佈的近似直線來作比例運算，以求出中間的索引並進行資料比對，如果取出的值小於要尋找的值，則提高下界，如果取出的值大於要尋找的
值，則降低下界，如此不斷的減少搜尋的範圍，所以其本原則與二分搜尋法是相同的，至於中間值的尋找是透過比例運算，如下所示，其中K是指定要尋找的對象，
而m則是可能的索引值： </small><br>


      
      <div style="text-align: center;"><img style="width: 435px; height: 182px;" alt="插補搜尋" title="插補搜尋" src="images/interpolationSearch-1.jpg"></div>


      <br>



      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Scala"></a><a href="#Ruby">Ruby</a><br>
      </h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void quickSort(int[], int, int); <br>int interpolationSearch(int[], int); <br><br>int main(void) { <br>    srand(time(NULL)); <br>    <br>    int number[MAX] = {0}; <br>    <br>    int i;<br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>    } <br><br>    quickSort(number, 0, MAX-1); <br><br>    printf("數列："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br><br>    int find;<br>    printf("\n輸入尋找對象："); <br>    scanf("%d", &amp;find); <br><br>    if((i = interpolationSearch(number, find)) &gt;= 0) <br>        printf("找到數字於索引 %d ", i); <br>    else <br>        printf("\n找不到指定數"); <br>        <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>int interpolationSearch(int number[], int find) { <br>    int low = 0; <br>    int upper = MAX - 1; <br>    while(low &lt;= upper) { <br>        int mid = (upper-low)* <br>            (find-number[low])/(number[upper]-number[low]) <br>            + low; <br>        if(mid &lt; low || mid &gt; upper) <br>            break; <br>        if(find &lt; number[mid]) <br>            upper = mid - 1; <br>        else if(find &gt; number[mid]) <br>            low = mid + 1; <br>        else <br>            return mid; <br>     } <br>     return -1;<br>} <br><br>void quickSort(int number[], int left, int right) { <br>    if(left &lt; right) { <br>        int s = number[(left+right)/2]; <br>        int i = left - 1; <br>        int j = right + 1; <br><br>        while(1) { <br>            while(number[++i] &lt; s) ;  // 向右找 <br>            while(number[--j] &gt; s) ;  // 向左找 <br>            if(i &gt;= j) <br>                break; <br>            SWAP(number[i], number[j]); <br>        } <br><br>        quickSort(number, left, i-1);   // 對左邊進行遞迴 <br>        quickSort(number, j+1, right);  // 對右邊進行遞迴 <br>    } <br>} <br></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre>public class Search {    <br>    public static int interpolation(int[] number, int des) { <br>        int low = 0; <br>        int upper = number.length - 1; <br><br>        while(low &lt;= upper) { <br>            int mid = (upper-low)*(des-number[low])<br>                      /(number[upper]-number[low]) + low; <br>            if(mid &lt; low || mid &gt; upper) <br>                break; <br>            if(des &lt; number[mid]) <br>                upper = mid - 1; <br>            else if(des &gt; number[mid]) <br>                low = mid + 1; <br>            else <br>                return mid; <br>        }<br>        return -1;<br>    }<br>    <br>    public static void main(String[] args) {<br>        int[] number = {1, 2, 3, 4, 6, 7, 8};<br>        int find = Search.interpolation(number, 2);<br>        System.out.println(find &gt;= 0 ? "找到數值於索引" + find : "找不到數值"); <br>    }<br>} <br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def search(number, des):<br>    low = 0<br>    upper = len(number) - 1<br>    while low &lt;= upper:<br>        mid = (upper - low) * (des - number[low]) \<br>               // (number[upper] - number[low]) \<br>               + low;<br>        if mid &lt; low or mid &gt; upper:<br>            break<br>        if des &lt; number[mid]:<br>            upper = mid - 1<br>        elif des &gt; number[mid]:<br>            low = mid + 1<br>        else:<br>            return mid<br>        <br>    return -1<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort()<br>find = search(number, 2)<br>print("找到數值於索引 " + str(find) if find &gt;= 0 else "找不到數值")</pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>object Search {<br>    def interpolation(number: Array[Int], des: Int) = {<br>        var low = 0<br>        var upper = number.length - 1<br>        var result = -1<br>        var isContinue = true<br>        while(isContinue &amp;&amp; low &lt;= upper) {<br>            val mid = (upper-low)* (des-number(low)) / <br>                      (number(upper)-number(low)) + low<br>            if(mid &lt; low || mid &gt; upper) isContinue = false<br>            if(des &lt; number(mid))<br>                upper = mid - 1<br>            else if(des &gt; number(mid))<br>                low = mid + 1<br>            else {<br>                result = mid<br>                isContinue = false<br>            }<br>        }<br>        result<br>    }<br>}<br><br>val number = Array(1, 2, 3, 4, 6, 7, 8)<br>val find = Search.interpolation(number, 3)<br>println(if(find &gt;= 0) "找到數值於索引 " + find else "找不到數值")</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre># encoding: Big5<br>def search(number, des)<br>    low = 0<br>    upper = number.length - 1<br>    while low &lt;= upper<br>        mid = (upper - low) * (des - number[low]) / <br>              (number[upper] - number[low]) + low<br>        if mid &lt; low || mid &gt; upper<br>            break<br>        end<br>            <br>        if des &lt; number[mid]<br>            upper = mid - 1<br>        elsif des &gt; number[mid]<br>            low = mid + 1<br>        else<br>            return mid<br>        end<br>    end<br>    -1<br>end<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort!<br>find = search(number, 2)<br>print find &gt;= 0 ? "找到數值於索引 " + find.to_s : "找不到數值", "\n"<br></pre>
<br>

 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>



      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




        
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/InterpolationSearch.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:08 GMT -->
</html>