<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/FibonacciNumber.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:28 GMT -->
<head>























  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>費式數列</title></head><body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Algorithm Gossip:&nbsp;費式數列</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 





      
      <h2> 說明</h2>

      <small>




Fibonacci為1200年代的歐洲數學家，在他的著作中曾經提到：「若有一隻免子每個月生一隻小免子，一個月後小免子也開始生產。起初只有一隻免
子，一個月後就有兩隻免子，二個月後有三隻免子，三個月後有五隻免子（小免子投入生產）......」。 <br>

      <br>





如果不太理解這個例子的話，舉個圖就知道了，注意新生的小免子需一個月成長期才會投入生產，類似的道理也可以用於植物的生長，這就是Fibonacci數
列，一般習慣稱之為費氏數列，例如以下： <br>






1、1 、2、3、5、8、13、21、34、55、89......</small>




 
      
      <h2> 解法</h2>

      <small>




依說明，我們可以將費氏數列定義為以下： <br>

      </small>



      
      <div style="margin-left: 40px; font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>0</sub> = 0<br>
F<sub>1</sub> = 1<br>
F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub><br>
</div><h2>算法</h2>

      <small>




費氏陣列的解法很多，基本上可以使用遞迴解，演算法最簡單，如下： </small><br>






      
      <pre>Procedure FIB(N) <br>    IF (N = 0 OR N = 1) <br>        RETURN N<br>    ELSE <br>        RETURN FIB(N-1) + FIB(N-2)<br><br></pre>






      <br>

      <small>



簡單，但是不實用，因為太慢了，在求每一個費氏數時，都會發生嚴重的重覆計算，也就是遞迴該行 ( FIB(N-1) + FIB(N-2)
)，最差的big-o可以到2的n/2次方，畫張遞迴的樹狀圖就可以知道重覆計算的數有多少了。 <br>

      <br>





可以採取非遞迴的版本，可以將big(o)減至n，演算法如下： </small>




      <br>






      
      <pre>Procedure FIB(N)<br>    IF (N = 0 OR N = 1) <br>        RETURN N<br><br>    a = 0; <br>    b = 1; <br>    FOR i = 2 TO N [<br>        temp = b; <br>        b = a + b; <br>        a = temp; <br>    ]<br>    RETURN b; <br>] <br></pre>






      <br>

      <small>



若想要一次列出所有N之前的費氏數，則可以將for迴圈的部份改以陣列，也就是： </small><br>






      
      <pre>F(0) = 0; <br>F(1) = 1; <br>FOR i&lt;-2 TO N [<br>    F(i) = F(i-1) + F(i-2); <br>] <br></pre>






      <br>

      <small>



費氏陣列並不是使用遞迴來解一定不好，事實上單就執行次數上來說，有一個使用遞迴的演算法可以更快
(big(o)是以2為底的Logn值)，但是要使用到乘法運算，所以實際上要看所使用的機器而定。 </small><br>






      
      <pre>Procedure FIB(N) <br>    IF (n &lt;= 1)<br>        RETURN(n); <br><br>    IF (n = 2) <br>        RETURN(1); <br>    ELSE [ <br>        i = n/2; <br>        f1 = FIB(i+1); <br>        f2 = FIB(i); <br><br>        IF (n mod 2 = 0)<br>            RETURN( f2*(2*f1-f2) ); <br>        ELSE <br>            RETURN ( f1**2+f2**2 ); <br>    ]<br>] <br></pre>






      <br>

      <small>



您可以實際使用費氏數列來印證演算法中的那兩條公式，其中f1**2表示f1的平方；若將遞迴的樹狀圖畫出來，就像這樣：</small><br>





      
      <div style="text-align: center;"><img style="width: 399px; height: 178px;" alt="費式數列" title="費式數列" src="images/fibonacciNumber-1.jpg"></div>





      <br>

      <small>



另外費氏數列還有公式解，導證方式就不提了：</small><br>





      
      <div style="text-align: center;"><img style="width: 320px; height: 53px;" alt="費式數列" title="費式數列" src="images/fibonacciNumber-2.jpg"></div>

      <small>




您說，如果兔子不只生一隻小兔子的話怎麼辦？像這種問題，我們可以將費氏數列加以擴充，稱之為擴充費氏數列： <br>

      </small>



      
      <div style="margin-left: 40px; font-weight: bold; font-family: Courier New,Courier,monospace;"><small><big>F<sub>0</sub> = 0<br>
F<sub>1</sub> = 1<br>
F<sub>n</sub> = X * F<sub>n-1</sub> + Y * F<sub>n-2</sub></big><br>





      </small></div>





      <small><br>





當X、Y等於1時，自然就是一般的費氏數列了。 <br>

      <br>





想瞭解費氏數列與自然界神奇的關係，可以造訪這個 <a href="http://episte.math.ntu.edu.tw/articles/sm/sm_02_08_1/index.html">網頁<cite class="urllink"></cite></a>。</small>






      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2>






      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>






      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#define LEN 20 <br><br>void fill_fibonacci_numbers(int*, int);<br>void print(int*, int len);<br><br>int main(void) { <br>    int fib[LEN] = {0}; <br>    <br>    fill_fibonacci_numbers(fib, LEN);<br>    print(fib, LEN);<br><br>    return 0; <br>} <br><br>void fill_fibonacci_numbers(int* fib, int len) {<br>    fib[0] = 0; <br>    fib[1] = 1; <br>    int i;<br>    for(i = 2; i &lt; len; i++) {<br>        fib[i] = fib[i-1] + fib[i-2]; <br>    }<br>}<br><br>void print(int* arr, int len) {<br>    int i;<br>    for(i = 0; i &lt; len; i++) { printf("%d ", arr[i]); } <br>    printf("\n");<br>}<br></pre>






      <br>






      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>






      
      <pre>import java.util.*;<br><br>public class Fibonacci {<br>    private List&lt;Integer&gt; fib = new ArrayList&lt;&gt;();<br>&nbsp;   {<br>        fib.add(0);<br>        fib.add(1);<br>    }<br>    <br>    Integer get(int n) {<br>        if(n &gt;= fib.size()) for(int i = fib.size(); i &lt;= n; i++) {<br>            fib.add(fib.get(i - 1) + fib.get(i - 2));<br>        }<br>        return fib.get(n);<br>    }<br>    <br>    public static void main(String[] args) {<br>        Fibonacci fibonacci = new Fibonacci();<br>        for(int i = 0; i &lt; 20; i++) {<br>            System.out.print(fibonacci.get(i) + " ");<br>        }<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def fibonacci(n, fib = [0, 1]):<br>    if n &gt;= len(fib):<br>        for i in range(len(fib), n + 1):<br>            fib.append(fib[i - 1] + fib[i - 2])<br>    return fib[n]<br><br>for i in range(0, 20):<br>    print(fibonacci(i), end=' ')<br></pre><br><ul><li><a name="Scala"></a>Scala<br>
</li></ul><pre>def fib(n: Int): Int = n match {<br>    case 0 =&gt; 0<br>    case 1 =&gt; 1<br>    case _ =&gt; fib(n - 1) + fib(n - 2)<br>}<br>(for(i &lt;- 0 until readInt) yield fib(i)).foreach(i =&gt; print(i + " "))<br></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby<br>
        </li>
      </ul>
      <pre># encoding: Big5<br>fibonacci = -&gt; {<br>    fib = [0, 1]<br>    -&gt; n { <br>        if n &gt;= fib.size<br>            fib.size.upto(n) do |i|<br>                fib &lt;&lt; fib[i - 1] + fib[i - 2]<br>            end<br>        end<br>        fib[n]<br>    }<br>}.call<br><br>print "輸入個數："<br>length = gets.to_i<br>0.upto(length - 1) do |i|<br>    print fibonacci.call(i).to_s + ' '<br>end<br></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>var fibonacci = function() {<br>    var fib = [0, 1];<br>    return function(n) {<br>        if(n &gt;= fib.length) for(var i = fib.length; i &lt;= n; i++) {<br>            fib[i] = fib[i - 1] + fib[i - 2];<br>        }<br>        return fib[n];<br>    };<br>}();<br>    <br>for(var i = 0; i &lt; 20; i++) { print(fibonacci(i)); }<br></pre>
      <br>
      
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre>fibonacci 0 = 0<br>fibonacci 1 = 1<br>fibonacci n = addPrevsRecusivelyUntilCounterIsN (fib 1) (fib 0) 2 n<br><br>addPrevsRecusivelyUntilCounterIsN prev1 prev2 counter n<br>    | counter == n = result<br>    | otherwise = addPrevsRecusivelyUntilCounterIsN result prev1 (counter + 1) n<br>    where result = prev1 + prev2<br><br>main = sequence [print (fibonacci i) | i &lt;- [0..19]]<br></pre>

<br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <br>



<script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br><br>
      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>





<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/FibonacciNumber.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:32 GMT -->
</html>