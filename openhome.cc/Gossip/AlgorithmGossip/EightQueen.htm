<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/EightQueen.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:36 GMT -->
<head>



















  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>八個皇后</title></head><body>





<h3><a href="../index.html">From
Gossip@Openhome</a></h3>





<h1><a href="index-2.html">Algorithm Gossip: 八個皇后</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 
      
      <h2>&nbsp;說明</h2>

      <small>
西洋棋中的皇后可以直線前進，吃掉遇到的所有棋子，如果棋盤上有八個皇后，則這八個皇后如何相安無事的放置在棋盤上，1970年與1971年， E.W.Dijkstra與N.Wirth曾經用這個問題來講解程式設計之技巧。</small><br>


      
      <h2>解法</h2>

      <small>
關於棋盤的問題，都可以用遞迴求解，然而如何減少遞迴的次數？在八個皇后的問題中，不必要所有的格子都檢查過，例如若某列檢查過，該該列的其它格子就不用再檢查了，這個方法稱為分支修剪。 </small><br>


      
      <div style="text-align: center;"><img style="width: 169px; height: 167px;" alt="八個皇后" title="八個皇后" src="images/eightQueen-1.jpg"><br>


      <br>


      <br>

      
      <div style="text-align: left;"><small>
所以檢查時，先判斷是否在已放置皇后的可行進方向上，如果沒有再行放置下一個皇后，如此就可大大減少遞迴的次數，例如以下為修剪過後的遞迴檢查行進路徑：</small><br>

      </div>


      <img style="width: 517px; height: 229px;" alt="八個皇后" title="八個皇后" src="images/eightQueen-2.jpg"><br>


      
      <div style="text-align: left;"><br>

      <small>
八個皇后的話，會有92個解答，如果考慮棋盤的旋轉，則旋轉後扣去對稱的，會有12組基本解。&nbsp;</small></div>


      </div>


      <br>


      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#define N 8 <br><br>void backTrack(int*, int*, int*, int*, int, void (*)(int*));<br>void print(int*);<br><br>int main(void) { <br>    int column[N] = {0};        // 同行是否有皇后<br>    int slash[2 * N] = {0};     // 右上至左下是否有皇后 <br>    int backSlash[2 * N] = {0}; // 左上至右下是否有皇后 <br>    int queens[N] = {0}; <br><br>    backTrack(column, slash, backSlash, queens, 0, print); <br>    <br>    return 0; <br>} <br><br>void backTrack(int* column, int* slash, int* backSlash, <br>               int* queens, int i, void (*take)(int*)) { <br>    if(i &gt;= N) { <br>        take(queens); <br>    } <br>    else { <br>        int j;<br>        for(j = 0; j &lt; N; j++) {<br>            if(isVisitable(i, j, column, slash, backSlash)) { <br>                queens[i] = j; <br>                column[j] = slash[i + j] = backSlash[i - j + N] = 1; <br>                backTrack(column, slash, backSlash, queens, i + 1, take); <br>                column[j] = slash[i + j] = backSlash[i - j + N] = 0;<br>            } <br>        }<br>    }<br>}<br><br>int isVisitable(int i, int j, int* column, int* slash, int* backSlash) {<br>   return !(column[j] || slash[i + j] || backSlash[i - j + N]);<br>}<br><br>void print(int* queens) {<br>    int x, y;<br>    for(y = 0; y &lt; N; y++) {<br>        for(x = 0; x &lt; N; x++) {<br>            printf(" %c", queens[y] == x ? 'Q' : '.');<br>        }<br>        printf("\n");<br>    }<br>    printf("\n");<br>}<br></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre>import java.util.*;<br>import static java.lang.Math.abs;<br>import static java.lang.System.out;<br><br>class Queen {<br>    final int x, y;<br>    Queen(int x, int y) {<br>        this.x = x;<br>        this.y = y;<br>    }<br>    <br>    public String toString() {<br>        return String.format("(%d, %d)", x, y);<br>    }<br>}<br><br>public class Queens {<br>    public static List&lt;List&lt;Queen&gt;&gt; queens(int n) {<br>        return placeQueens(n, n);<br>    }<br>    <br>    public static List&lt;List&lt;Queen&gt;&gt; placeQueens(int n, int k) {<br>        List&lt;List&lt;Queen&gt;&gt; queensList = new ArrayList&lt;&gt;();<br>        if(k == 0) {<br>            queensList.add(new ArrayList&lt;Queen&gt;());<br>        }<br>        else {<br>            for(List&lt;Queen&gt; queens : placeQueens(n, k - 1)) {<br>                for(int column = 1; column &lt;= n; column++) {<br>                    Queen queen = new Queen(k, column);<br>                    if(isSafe(queen, queens)) {<br>                        List&lt;Queen&gt; qs = new ArrayList&lt;&gt;();<br>                        qs.addAll(queens);<br>                        qs.add(queen);<br>                        queensList.add(qs);<br>                    }<br>                }<br>            }<br>        }<br>        return queensList;<br>    }<br>    <br>    public static boolean isSafe(Queen queen, List&lt;Queen&gt; queens) {<br>        for(Queen q : queens) if(inCheck(queen, q)) {<br>            return false;<br>        }<br>        return true;<br>    }<br>    <br>    public static boolean inCheck(Queen q1, Queen q2) {<br>        return q1.x == q2.x || // 同列<br>               q1.y == q2.y || // 同行<br>               abs(q1.x - q2.x) == abs(q1.y - q2.y); // 對角線<br>    }<br>    <br>    public static void main(String[] args) {<br>        for(List&lt;Queen&gt; queens : queens(8)) {<br>            for(Queen queen : queens) {<br>                out.print(queen);<br>            }<br>            out.println();<br>        }<br>    }<br>}</pre>


      <br><ul><li><a name="Python"></a>Python</li></ul><pre>def queenss(n):<br>    def placeQueens(k):<br>        return [[]] if k == 0 \<br>                    else [[(k, column)] + queens <br>                             for queens in placeQueens(k - 1)<br>                                 for column in range(1, n + 1) <br>                                     if isSafe((k, column), queens)]<br>    return placeQueens(n)<br><br>def isSafe(queen, queens):<br>    return all(not inCheck(queen, q) for q in queens)<br><br>def inCheck(q1, q2):<br>    return (q1[0] == q2[0] or # 同列<br>            q1[1] == q2[1] or # 同行<br>            abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])) # 對角線<br><br>for qs in queenss(8):<br>    for q in qs:<br>        print(q, end="")<br>    print()</pre><br><ul><li><a name="Scala"></a>Scala<small></small></li></ul><pre>def queens(n: Int): List[List[(Int, Int)]] = {<br>    def placeQueens(k: Int): List[List[(Int, Int)]] = {<br>        if(k == 0) Nil<br>        else for {<br>                 queens &lt;- placeQueens(k - 1)<br>                 column &lt;- 1 to n<br>                 queen = (k, column)<br>                 if isSafe(queen, queens)<br>             } yield queen :: queens<br>    }<br>    placeQueens(n)<br>}<br><br>def isSafe(queen: (Int, Int), queens: List[(Int, Int)]) =<br>    queens forall (q =&gt; !inCheck(queen, q))<br>    <br>def inCheck(q1: (Int, Int), q2: (Int, Int)) =<br>    q1._1 == q2._1 || // 同列<br>    q1._2 == q2._2 || // 同行<br>    (q1._1 - q2._1).abs == (q1._2 - q2._2).abs // 對角線<br><br>queens(8).foreach(q =&gt; {<br>    q.foreach(print)<br>    println()<br>})</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>def queenss(n)<br>    placeQueens(n, n)<br>end<br><br>def placeQueens(n, k)<br>    k == 0 ? [[]] : placeQueens(n, k - 1).map { |queens|<br>            (1..n).map { |column| {x: k, y: column} }<br>                  .find_all { |queen| isSafe(queen, queens) }<br>                  .map { |queen| [queen] + queens } <br>        }.reduce(:+);<br>end<br><br>def isSafe(queen, queens)<br>    queens.all? { |q| !inCheck(queen, q) }<br>end<br><br>def inCheck(q1, q2)<br>    q1[:x] == q2[:x] or # 同列<br>    q1[:y] == q2[:y] or # 同行<br>    (q1[:x] - q2[:x]).abs == (q1[:y] - q2[:y]).abs # 對角線<br>end<br><br>queenss(8).each do |qs|<br>    qs.each do |q|<br>        print "(#{q[:x]}, #{q[:y]})"<br>    end<br>    puts<br>end<br></pre><br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>var queens = function() {<br>    var column = [];<br>    var slash = [];<br>    var backSlash = [];<br>    var queens = [];<br>    <br>    function backTrack(n, i, take) {<br>        if(i &gt;= n) {<br>            take(n, queens);<br>        }<br>        else {<br>            for(var j = 0; j &lt; n; j++) if(isVisitable(i, j, n)) {<br>                queens[i] = j;<br>                column[j] = slash[i + j] = backSlash[i - j + n] = 1; <br>                backTrack(n, i + 1, take); <br>                column[j] = slash[i + j] = backSlash[i - j + n] = 0;<br>            }<br>        }<br>    }<br>    <br>    function isVisitable(i, j, n) {<br>        return !(column[j] || slash[i + j] || backSlash[i - j + n]);<br>    }<br>    <br>    return function(n, take) {<br>        backTrack(n, 0, take);<br>    };<br>}();<br><br>queens(8, function(n, qs) {<br>    var layout = '';<br>    for(var y = 0; y &lt; n; y++) {<br>        for(var x = 0; x &lt; n; x++) {<br>            layout += (qs[y] === x) ? ' Q' : ' .';<br>        }<br>        layout += '\n';<br>    }<br>    print(layout);<br>});<br></pre><br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre>queens n = placeQueens n<br>    where placeQueens k = <br>              if k == 0 then [[]]<br>              else [(k, column) : queens | queens &lt;- placeQueens (k - 1), <br>                                           column &lt;- [1..n], <br>                                           isSafe (k, column) queens]<br>          isSafe queen queens = all (\q -&gt; not $ inCheck queen q) queens<br>          inCheck (q1x, q1y) (q2x, q2y) = q1x == q2x || <br>                                          q1y == q2y ||<br>                                          abs (q1x - q2x) == abs (q1y - q2y)<br><br>main = sequence [print qs | qs &lt;- queens 8]<br></pre>

      <br>



 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>

      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>

<br>


<br>





<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/EightQueen.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:36 GMT -->
</html>