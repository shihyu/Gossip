<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/KnapsackProblem.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:45 GMT -->
<head>












  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>背包問題（Knapsack Problem）</title></head><body>





<h3><a href="../index.html">From
Gossip@Openhome</a></h3>





<h1><a href="index-2.html">Algorithm Gossip: 背包問題（Knapsack Problem）</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 688px; vertical-align: top;"> 



      
      <h2> 說明</h2>

      <small>

假設有一個背包的負重最多可達8公斤，而希望在背包中裝入負重範圍內可得之總價物品，假設是水果好了，水果的編號、單價與重量如下所示： </small><br>



      
      <table border="1" width="50%">



  <tbody>



    <tr>



      <td align="left" valign="top"><small>0 </small></td>



      <td align="left" valign="top"><small>李子 </small></td>



      <td align="left" valign="top"><small>4KG </small></td>



      <td align="left" valign="top"><small>NT$4500 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>蘋果 </small></td>



      <td align="left" valign="top"><small>5KG </small></td>



      <td align="left" valign="top"><small>NT$5700 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>橘子 </small></td>



      <td align="left" valign="top"><small>2KG </small></td>



      <td align="left" valign="top"><small>NT$2250 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>草莓 </small></td>



      <td align="left" valign="top"><small>1KG </small></td>



      <td align="left" valign="top"><small>NT$1100 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>4 </small></td>



      <td align="left" valign="top"><small>甜瓜 </small></td>



      <td align="left" valign="top"><small>6KG </small></td>



      <td align="left" valign="top"><small>NT$6700 </small></td>



    </tr>



  
  
        
        </tbody>
      
      </table>



      
      <p></p>



      
      <h2> 解法</h2>

      <small>

背包問題是關於最佳化的問題，要解最佳化問題可以使用「動態規劃」（Dynamic
programming），從空集合開始，每增加一個元素就先求出該階段的最佳解，直到所有的元素加入至集合中，最後得到的就是最佳解。 <br>

      <br>


以背包問題為例，我們使用兩個陣列value與item，value表示目前的最佳解所得之總價，item表示最後一個放至背包的水果，假設有負重量
1∼8的背包8個，並對每個背包求其最佳解。 <br>

      <br>


逐步將水果放入背包中，並求該階段的最佳解：<br>

      </small>





      
      <ul>

        <li><small> 放入李子</small>
  </li>

      
      </ul>



      
      <table border="1" width="50%">



  <tbody>



    <tr>



      <td align="left" valign="top"><small>背包負重 </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>4 </small></td>



      <td align="left" valign="top"><small>5 </small></td>



      <td align="left" valign="top"><small>6 </small></td>



      <td align="left" valign="top"><small>7 </small></td>



      <td align="left" valign="top"><small>8 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>value </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>4500 </small></td>



      <td align="left" valign="top"><small>4500 </small></td>



      <td align="left" valign="top"><small>4500 </small></td>



      <td align="left" valign="top"><small>4500 </small></td>



      <td align="left" valign="top"><small>9000 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>item </small></td>



      <td align="left" valign="top"><small>－ </small></td>



      <td align="left" valign="top"><small>－ </small></td>



      <td align="left" valign="top"><small>－ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



    </tr>



  
  
        
        </tbody>
      
      </table>



      <br>



      
      <ul>

        <li><small> 放入蘋果</small>
  </li>

      
      </ul>



      
      <table border="1" width="50%">



  <tbody>



    <tr>



      <td align="left" valign="top"><small>背包負重 </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>4 </small></td>



      <td align="left" valign="top"><small>5 </small></td>



      <td align="left" valign="top"><small>6 </small></td>



      <td align="left" valign="top"><small>7 </small></td>



      <td align="left" valign="top"><small>8 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>value </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>4500 </small></td>



      <td align="left" valign="top"><small>5700 </small></td>



      <td align="left" valign="top"><small>5700 </small></td>



      <td align="left" valign="top"><small>5700 </small></td>



      <td align="left" valign="top"><small>9000 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>item </small></td>



      <td align="left" valign="top"><small>－ </small></td>



      <td align="left" valign="top"><small>－ </small></td>



      <td align="left" valign="top"><small>－ </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>０ </small></td>



    </tr>



  
  
        
        </tbody>
      
      </table>




      
      <ul>

        <li><small> 放入橘子</small>
  </li>

      
      </ul>



      
      <table border="1" width="50%">



  <tbody>



    <tr>



      <td align="left" valign="top"><small>背包負重 </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>4 </small></td>



      <td align="left" valign="top"><small>5 </small></td>



      <td align="left" valign="top"><small>6 </small></td>



      <td align="left" valign="top"><small>7 </small></td>



      <td align="left" valign="top"><small>8 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>value </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>2250 </small></td>



      <td align="left" valign="top"><small>2250 </small></td>



      <td align="left" valign="top"><small>4500 </small></td>



      <td align="left" valign="top"><small>5700 </small></td>



      <td align="left" valign="top"><small>6750 </small></td>



      <td align="left" valign="top"><small>7950 </small></td>



      <td align="left" valign="top"><small>9000 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>item </small></td>



      <td align="left" valign="top"><small>－ </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>０ </small></td>



    </tr>



  
  
        
        </tbody>
      
      </table>



      <br>



      
      <ul>

        <li><small> 放入草莓</small>
  </li>

      
      </ul>



      
      <table border="1" width="50%">



  <tbody>



    <tr>



      <td align="left" valign="top"><small>背包負重 </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>4 </small></td>



      <td align="left" valign="top"><small>5 </small></td>



      <td align="left" valign="top"><small>6 </small></td>



      <td align="left" valign="top"><small>7 </small></td>



      <td align="left" valign="top"><small>8 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>value </small></td>



      <td align="left" valign="top"><small>1100 </small></td>



      <td align="left" valign="top"><small>2250 </small></td>



      <td align="left" valign="top"><small>3350 </small></td>



      <td align="left" valign="top"><small>4500 </small></td>



      <td align="left" valign="top"><small>5700 </small></td>



      <td align="left" valign="top"><small>6800 </small></td>



      <td align="left" valign="top"><small>7950 </small></td>



      <td align="left" valign="top"><small>9050 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>item </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



    </tr>



  
  
        
        </tbody>
      
      </table>



      <br>



      
      <ul>

        <li><small> 放入甜瓜</small>
  </li>

      
      </ul>



      
      <table border="1" width="50%">



  <tbody>



    <tr>



      <td align="left" valign="top"><small>背包負重 </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>4 </small></td>



      <td align="left" valign="top"><small>5 </small></td>



      <td align="left" valign="top"><small>6 </small></td>



      <td align="left" valign="top"><small>7 </small></td>



      <td align="left" valign="top"><small>8 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>value </small></td>



      <td align="left" valign="top"><small>1100 </small></td>



      <td align="left" valign="top"><small>2250 </small></td>



      <td align="left" valign="top"><small>3350 </small></td>



      <td align="left" valign="top"><small>4500 </small></td>



      <td align="left" valign="top"><small>5700 </small></td>



      <td align="left" valign="top"><small>6800 </small></td>



      <td align="left" valign="top"><small>7950 </small></td>



      <td align="left" valign="top"><small>9050 </small></td>



    </tr>



    <tr>



      <td align="left" valign="top"><small>item </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>０ </small></td>



      <td align="left" valign="top"><small>1 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



      <td align="left" valign="top"><small>2 </small></td>



      <td align="left" valign="top"><small>3 </small></td>



    </tr>



  
  
        
        </tbody>
      
      </table>



      <br>

      <small>
由最後一個表格，可以得知在背包負重8公斤時，最多可以裝入9050元的水果，而最後一個裝入的
水果是3號，也就是草莓，裝入了草莓，背包只能再放入7公斤（8-1）的水果，所以必須看背包負重7公斤時的最佳解，最後一個放入的是2號，也就
是橘子，現在背包剩下負重量5公斤（7-2），所以看負重5公斤的最佳解，最後放入的是1號，也就是蘋果，此時背包負重量剩下0公斤（5-5），無法
再放入水果，所以求出最佳解為放入草莓、橘子與蘋果，而總價為9050元。</small><br>


      <br>


      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a> &nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre style="width: 620px;">#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define LIMIT 8   // 重量限制 <br><br>typedef struct { <br>    char name[20]; <br>    int weight; <br>    int price; <br>} Fruit; <br><br>void knapsack(Fruit*, int*, int*, int, int);<br>int min(Fruit*, int);<br><br><br>int main(void) { <br>    Fruit fruits[] = {{"李子", 4, 4500}, <br>                      {"蘋果", 5, 5700}, <br>                      {"橘子", 2, 2250}, <br>                      {"草莓", 1, 1100}, <br>                      {"甜瓜", 6, 6700}};<br>    int items[LIMIT + 1] = {0}; <br>    int values[LIMIT + 1] = {0};  <br>    <br>    int length = sizeof(fruits) / sizeof(fruits[0]);<br>    knapsack(fruits, values, items, length, LIMIT);<br><br>    printf("物品\t價格\n"); <br>    int i;<br>    for(i = LIMIT; i &gt;= min(fruits, length); i -= fruits[items[i]].weight) {<br>        printf("%s\t%d\n", fruits[items[i]].name, fruits[items[i]].price); <br>    } <br>    printf("合計\t%d\n", values[LIMIT]); <br><br>    return 0; <br>}  <br><br>void knapsack(Fruit* fruits, int* values, int* items, <br>              int length, int limit) {<br>    int i, w;<br>    for(i = 0; i &lt; length; i++) { <br>        for(w = fruits[i].weight; w &lt;= limit; w++) {<br>            int p = w - fruits[i].weight;<br>            int newValue = values[p] + fruits[i].price; <br>            if(newValue &gt; values[w]) {   // 找到階段最佳解 <br>                values[w] = newValue; <br>                items[w] = i; <br>            }<br>        } <br>    }<br>}<br><br>int min(Fruit* fruits, int length) {<br>    int i, m;<br>    for(i = 0, m = fruits[0].weight; i &lt; length; i++) {<br>        if(fruits[i].weight &lt; m) {<br>            m = fruits[i].weight;<br>        }<br>    }<br>    return m;<br>} <br></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre>import java.util.*;<br><br>class Fruit {<br>    String name;<br>    int weight;<br>    int price;<br>    Fruit(String name, int weight, int price) {<br>        this.name = name;<br>        this.weight = weight;<br>        this.price = price;<br>    }<br>    public String toString() {<br>        return String.format("(%s, %d, %d)", name, weight, price);<br>    }<br>}<br><br>public class Knapsack {<br>    public static List&lt;Fruit&gt; knapsack(List&lt;Fruit&gt; fruits, int limit) {<br>        int[] values = new int[limit + 1];<br>        int[] items = new int[limit + 1];<br>        for(int i = 0; i &lt; fruits.size(); i++) {<br>            for(int w = fruits.get(i).weight; w &lt;= limit; w++) {<br>                int p = w - fruits.get(i).weight;<br>                int newValue = values[p] + fruits.get(i).price; <br>                if(newValue &gt; values[w]) {<br>                    values[w] = newValue; <br>                    items[w] = i; <br>                }<br>            }<br>        }<br>        List&lt;Fruit&gt; solution = new ArrayList&lt;&gt;();<br>        // JDK8 Lambda<br>        int min = Collections.min(fruits<br>                   , (f1, f2) -&gt; f1.weight - f2.weight).weight;<br>        for(int i = limit; i &gt;= min; i -= fruits.get(items[i]).weight) {<br>            solution.add(fruits.get(items[i]));<br>        }<br>        return solution;<br>    }<br><br>    public static void main(String[] args) {<br>        System.out.println(knapsack(Arrays.asList(<br>                      new Fruit("李子", 4, 4500), new Fruit("蘋果", 5, 5700),<br>                      new Fruit("橘子", 2, 2250), new Fruit("草莓", 1, 1100),<br>                      new Fruit("甜瓜", 6, 6700)), 8));<br>    }<br>}</pre>


      <br><ul><li><a name="Python"></a>Python</li></ul><pre>from functools import reduce<br><br>def knapsack(fruits, limit):<br>    def nextVI(i, values, items):<br>        return reduce(<br>            (lambda vis, vi: (vis[0] + [vi[0]], vis[1] + [vi[1]])),  <br>            [(values[w - fruits[i][1]] + fruits[i][2], i) <br>                if w &gt;= fruits[i][1] and w &lt; limit + 1 and<br>                    values[w - fruits[i][1]] + fruits[i][2] &gt; values[w] <br>                else (values[w], items[w]) for w in range(len(values))], <br>            ([], [])<br>        )<br><br>    def iterate(i):<br>        if i == 0:<br>            return nextVI(i, [0] * (limit + 1), [0] * (limit + 1))<br>        else:<br>            values, items = iterate(i - 1)<br>            return nextVI(i, values, items)<br><br>    def solution(i, items, minWeight):<br>        return (([fruits[items[i]]] + <br>                    solution(i - fruits[items[i]][1], items, minWeight)) <br>                if i &gt;= minWeight else [])<br><br>    return solution(limit, <br>               iterate(len(fruits) - 1)[1], min([f[1] for f in fruits]))<br>    <br>print(knapsack([('李子', 4, 4500), ('蘋果', 5, 5700),<br>                ('橘子', 2, 2250), ('草莓', 1, 1100),<br>                ('甜瓜', 6, 6700)], 8))</pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>case class Fruit(name: String, weight: Int, price: Int)<br><br>def knapsack(fruits: List[Fruit], limit: Int) = {<br>    def nextVI(i: Int, values: List[Int], items: List[Int]) = {<br>        val viList = (for(w &lt;- 0 until values.size) yield <br>            if(w &gt;= fruits(i).weight &amp;&amp; w &lt; limit + 1 &amp;&amp; <br>               values(w - fruits(i).weight) + fruits(i).price &gt; values(w)) <br>                (values(w - fruits(i).weight) + fruits(i).price, i) <br>            else (values(w), items(w)))<br>                <br>        ((Nil : List[Int], Nil : List[Int]) /: viList) {<br>            (vis: (List[Int], List[Int]), vi: (Int, Int)) <br>                 =&gt; (vis._1 ++ List(vi._1), vis._2 ++ List(vi._2))<br>        }<br>    }<br>    <br>    def iterate(i: Int): (List[Int], List[Int]) = {<br>        if(i == 0) {<br>            val arr = new Array[Int](limit + 1) <br>            nextVI(i, arr.toList, arr.toList)<br>        } else {<br>            val (values, items) = iterate(i - 1)<br>            nextVI(i, values, items)<br>        }<br>    }<br>    case class Fruit(name: String, weight: Int, price: Int)<br><br>def knapsack(fruits: List[Fruit], limit: Int) = {<br>    def nextVI(i: Int, values: List[Int], items: List[Int]) = {<br>        val viList = (for(w &lt;- 0 until values.size) yield <br>            if(w &gt;= fruits(i).weight &amp;&amp; w &lt; limit + 1 &amp;&amp; <br>               values(w - fruits(i).weight) + fruits(i).price &gt; values(w)) <br>                (values(w - fruits(i).weight) + fruits(i).price, i) <br>            else (values(w), items(w)))<br>                <br>        (viList :\ (Nil : List[Int], Nil : List[Int])) {<br>            (vi: (Int, Int), vis: (List[Int], List[Int])) <br>                 =&gt; (vi._1 :: vis._1, vi._2 :: vis._2)<br>        }<br>    }<br>    <br>    def iterate(i: Int): (List[Int], List[Int]) = {<br>        if(i == 0) {<br>            val arr = new Array[Int](limit + 1) <br>            nextVI(i, arr.toList, arr.toList)<br>        } else {<br>            val (values, items) = iterate(i - 1)<br>            nextVI(i, values, items)<br>        }<br>    }<br>    <br>    def solution(i: Int, items: List[Int], minWeight: Int): List[Fruit] = {<br>        if(i &gt;= minWeight) <br>            fruits(items(i)) :: solution(<br>                i - fruits(items(i)).weight, items, minWeight) <br>        else Nil<br>    }<br>    <br>    solution(limit, iterate(fruits.size - 1)._2, <br>             fruits.map(fruit =&gt; fruit.weight).min)<br>}<br><br>println(knapsack(List(Fruit("李子", 4, 4500), Fruit("蘋果", 5, 5700),<br>                      Fruit("橘子", 2, 2250), Fruit("草莓", 1, 1100),<br>                      Fruit("甜瓜", 6, 6700)), 8))<br></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre># encoding: Big5<br>def knapsack(fruits, limit)<br>    nextVI = -&gt;(i, values, items) {<br>        (0...values.size).map { |w|<br>            if w &gt;= fruits[i][:weight] and w &lt; limit + 1 and <br>               values[w - fruits[i][:weight]] + fruits[i][:price] &gt; values[w]<br>                {value: values[w - fruits[i][:weight]] + fruits[i][:price], <br>                 item: i}<br>            else<br>                {value: values[w], item: items[w]}<br>            end<br>        }.reduce({values: [], items: []}) { |vis, vi|<br>            {values: vis[:values] + [vi[:value]], <br>             items: vis[:items] + [vi[:item]]}<br>        }<br>    }<br><br>    iterate = -&gt;(i) {<br>        if i == 0<br>            nextVI.call(i, [0] * (limit + 1), [0] * (limit + 1))<br>        else<br>            vis = iterate.call(i - 1)<br>            nextVI.call(i, vis[:values], vis[:items])<br>        end<br>    }<br><br>    solution = -&gt;(i, items, minWeight) {<br>        if i &gt;= minWeight<br>            [fruits[items[i]]] + <br>            solution.call(i - fruits[items[i]][:weight], items, minWeight)<br>        else<br>            []<br>        end<br>    }<br><br>    solution.call(limit, iterate.call(fruits.size - 1)[:items], <br>                  fruits.map { |fruit| fruit[:weight] }.min)<br>end<br><br>def fruit(n, w, p)<br>    {name: n, weight: w, price: p}<br>end<br><br>knapsack([fruit('李子', 4, 4500), fruit('蘋果', 5, 5700),<br>          fruit('橘子', 2, 2250), fruit('草莓', 1, 1100),<br>          fruit('甜瓜', 6, 6700)], 8).each do |fruit|<br>    print "(#{fruit[:name]}, #{fruit[:weight]}, #{fruit[:price]})"<br>end<br></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>function fruit(n, w, p) {<br>    return { name : n, weight : w, price : p };<br>}<br><br>function knapsack(fruits, limit) {<br>    Array.prototype.reduce = function(init, f) {<br>        var value = init;<br>	for(var i = 0; i &lt; this.length; i++) {<br>            value = f(value, this[i]);<br>        }<br>	return value;<br>    };<br>    <br>    function range(n) {<br>        var list = [];<br>        for(var i = 0; i &lt; n; i++) {<br>            list[i] = i;<br>        }<br>        return list;<br>    }<br>    <br>    function nextVI(i, values, items) {<br>        return range(values.length).map(function(w) {<br>            return w &gt;= fruits[i].weight &amp;&amp; w &lt; limit + 1 &amp;&amp; <br>               values[w - fruits[i].weight] + fruits[i].price &gt; values[w] ?<br>               {<br>                value : values[w - fruits[i].weight] + fruits[i].price, <br>                item : i<br>               } :<br>               {value : values[w], item : items[w]};<br>        }).reduce({values : [], items : []}, function(vis, vi) {<br>            return { values : vis.values.concat([vi.value]), <br>                     items : vis.items.concat([vi.item]) <br>            };<br>        });<br>    }<br>    <br>    function iterate(i) {<br>        if(i == 0) {<br>            return nextVI(i, <br>                range(limit + 1).map(function(elem) { return 0; }), <br>                range(limit + 1).map(function(elem) { return 0; }));<br>        } else {<br>            var vis = iterate(i - 1)<br>            return nextVI(i, vis.values, vis.items);<br>        }<br>    }<br>    <br>    function solution(i, items, minWeight) {<br>        if(i &gt;= minWeight) {<br>            return [fruits[items[i]]].concat(<br>                solution(i - fruits[items[i]].weight, items, minWeight));<br>        } else {<br>            return [];<br>        }<br>    }<br>    <br>    return solution(limit, iterate(fruits.length - 1).items, <br>            fruits.reduce(fruits[0].weight, function(seed, elem) {<br>                return elem &lt; seed ? elem : seed;<br>            })<br>    );<br>}<br><br>knapsack([fruit('李子', 4, 4500), fruit('蘋果', 5, 5700),<br>          fruit('橘子', 2, 2250), fruit('草莓', 1, 1100),<br>          fruit('甜瓜', 6, 6700)], 8).forEach(function(fruit) {<br>    print(fruit.name);<br>});<br></pre>
<br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre>data Fruit = Fruit { name :: String, <br>                     weight :: Int,<br>                     price ::Int } deriving (Show)<br><br>knapsack fruits limit = <br>    solution limit (snd $ iterate $ length fruits - 1) <br>                   (minimum $ map (\f -&gt; weight f) fruits)<br><br>    where nextVI i values items = <br>            let viList = [if w &gt;= weight (fruits !! i) &amp;&amp; w &lt; limit + 1 &amp;&amp; <br>                  values !! (w - weight (fruits !! i)) + price (fruits !! i) <br>                  &gt; values !! w <br>                  then (values !! (w - weight (fruits !! i)) + <br>                       price (fruits !! i), i) <br>                  else (values !! w, items !! w) |<br>                       w &lt;- [0 .. length values - 1]]<br>            in foldr (\vi vis -&gt; (fst vi : fst vis, snd vi : snd vis)) <br>                     ([], []) viList<br><br>          iterate i = <br>              if i == 0 then<br>                  nextVI i [0 | i &lt;- [0..8]] [0 | i &lt;- [0..8]]<br>              else<br>                  let (values, items) = iterate $ i - 1<br>                  in nextVI i values items<br><br>          solution i items minWeight = <br>              if i &gt;= minWeight then<br>                  fruits !! (items !! i) : <br>                  solution (i - weight (fruits !! (items !! i))) <br>                           items minWeight<br>              else []<br><br>main = print $ knapsack [<br>    Fruit "Plum" 4 4500,  Fruit "Apple" 5 5700,<br>    Fruit "Tangerine" 2 2250, Fruit "Strawberry" 1 1100,<br>    Fruit "Sweet melon" 6 6700] 8<br></pre>
<br>


 </td>


      <td style="width: 252px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>



      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>

<br>


<br>





<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/KnapsackProblem.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:45 GMT -->
</html>