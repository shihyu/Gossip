<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/StackByLink.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:17 GMT -->
<head>







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">







  
  
  
  
  
  
  
  <title>堆疊 - 使用鏈結實作（C 語言動態記憶體宣告）</title>
</head>


<body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Algorithm Gossip:&nbsp;堆疊 - 使用鏈結實作（C 語言動態記憶體宣告）</a></h1>



<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">



  <tbody>



    <tr>



      <td style="width: 676px; vertical-align: top;"> 




      
      
      <h2>說明</h2>


      <small>
使用陣列實作堆疊，會受到陣列大小必須事先宣告好的限制，我們可以使用鏈結（link）的方式來實作堆疊，以動態記憶體宣告的方式來新增每一個元素。</small><br>



      
      
      <h2>解法</h2>


      <small>
鏈結（link）是由節點組成，每一個節點儲存資料之外，還儲存下一個節點的位置，如下圖所示：<br>


      </small>
      
      
      <div style="text-align: center;"><small><img style="width: 368px; height: 34px;" alt="Link" title="Link" src="images/stackByLink-1.jpg"></small></div>



      <small><br>


      <br>



對堆疊而言，加入新節點與刪除節點的方法如下圖所示：<br>



新增節點：<br>


      </small>

      
      
      <div style="text-align: center;"><small><img style="width: 391px; height: 116px;" alt="Link" title="Link" src="images/stackByLink-2.jpg"></small></div>



      <small><br>


      <br>



刪除節點：<br>


      </small>

      
      
      <div style="text-align: center;"><small><img style="width: 394px; height: 115px;" alt="Link" title="Link" src="images/stackByLink-3.jpg"></small></div>



      <small><br>


      <br>



鏈結也可以使用陣列來實作，不過在這邊我們以動態記憶體宣告的方式來進行，在C語言中，這是實作鏈結的基本作法，可以不受陣列大小必須先行宣告的限制，所以使用鏈結實作堆疊時，就不會有堆疊已滿的問題（除了記憶體用盡之外）。<br>


      <br>



上面的圖說只是個示意，在演算的時候，會需要一些暫存變數來協助節點新增與刪除時的連結更動，請直接參照以下的程式實作。 </small>

      <br>




      <br>



      
      
      <h2> 實作</h2>




      
      
      <ul>


        <li> C
  </li>


      
      
      </ul>




      
      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>struct node { <br>    int data; <br>    struct node *next; <br>}; <br><br>typedef struct node Node; <br><br>Node* creates(void);         // 建立堆疊 <br>int isEmpty(Node*);           // 堆疊已空 <br>int stacktop(Node*);   // 傳回頂端元素 <br>Node* add(Node*, int);   // 新增元素 <br>Node* delete(Node*);     // 刪除元素 <br>void list(Node*);      // 顯示所有內容 <br><br>int main(void) { <br>    Node* sTop; <br>    int input, select; <br><br>    sTop = creates(); <br><br>    while(1) { <br>        printf("\n\n請輸入選項(-1結束)："); <br>        printf("\n(1)插入值至堆疊"); <br>        printf("\n(2)顯示堆疊頂端"); <br>        printf("\n(3)刪除頂端值"); <br>        printf("\n(4)顯示所有內容"); <br>        printf("\n$c&gt;"); <br>        scanf("%d", &amp;select); <br>        <br>        if(select == -1) <br>            break; <br><br>        switch(select) { <br>            case 1: <br>                printf("\n輸入值："); <br>                scanf("%d", &amp;input); <br>                sTop = add(sTop, input); <br>                break; <br>            case 2: <br>                printf("\n頂端值：%d", stacktop(sTop)); <br>                break; <br>            case 3: <br>                sTop = delete(sTop); <br>                break; <br>            case 4: <br>                list(sTop); <br>                break; <br>            default: <br>                printf("\n選項錯誤！"); <br>        } <br>    } <br><br>    printf("\n"); <br><br>    return 0; <br>} <br><br>Node* creates() { <br>    return NULL; <br>} <br><br>int isEmpty(Node* top) { <br>    return (top == NULL); <br>} <br><br>int stacktop(Node* top) { <br>    return top-&gt;data; <br>} <br><br>Node* add(Node* top, int item) { <br>    Node* newnode; <br><br>    newnode = (Node*) malloc(sizeof(Node)); <br><br>    if(newnode == NULL) { <br>        printf("\n記憶體配置失敗！"); <br>        exit(1); <br>    } <br><br>    newnode-&gt;data = item; <br>    newnode-&gt;next = top; <br>    top = newnode; <br><br>    return top; <br>} <br><br>Node* delete(Node* top) { <br>    Node* tmpnode; <br><br>    tmpnode = top; <br>    if(tmpnode == NULL) { <br>        printf("\n堆疊已空！"); <br>        return NULL; <br>    } <br><br>    top = top-&gt;next; <br>    free(tmpnode); <br><br>    return top; <br>} <br><br>void list(Node* top) { <br>    getnode* tmpnode; <br>    tmpnode = top; <br><br>    printf("\n堆疊內容："); <br>    while(tmpnode != NULL) { <br>        printf("%d ", tmpnode-&gt;data); <br>        tmpnode = tmpnode-&gt;next; <br>    } <br>}</pre>


 </td>



      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>





      </center>





 </td>



    </tr>



  
  
  </tbody>
</table>



<br>



<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/StackByLink.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:18 GMT -->
</html>
