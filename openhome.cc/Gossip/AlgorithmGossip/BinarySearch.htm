<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/BinarySearch.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:06 GMT -->
<head>









  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>二分搜尋法（搜尋原則的代表）</title></head><body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Algorithm Gossip:&nbsp;二分搜尋法（搜尋原則的代表）</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 





      
      <h2>說明</h2>

      <small>

如果搜尋的數列已經有排序，應該儘量利用它們已排序的特性，以減少搜尋比對的次數，這是搜尋的基本原則，二分搜尋法是這個基本原則的代表。</small><br>



      
      <h2>解法</h2>

      <small>

在二分搜尋法中，從數列的中間開始搜尋，如果這個數小於我們所搜尋的數，由於數列已排序，則該數左邊的數一定都小於要搜尋的對象，所以無需浪費時間在左邊的數；如果搜尋的數大於所搜尋的對象，則右邊的數無需再搜尋，直接搜尋左邊的數。<br>

      <br>



所以在二分搜尋法中，將數列不斷的分為兩個部份，每次從分割的部份中取中間數比對，例如要搜尋92於以下的數列，首先中間數索引為(0+9)/2 = 4（索引由0開始）：<br>

      </small>



      
      <div style="margin-left: 40px;"><small><span style="font-family: Courier New,Courier,monospace;">[3 24 57 57 </span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">67</span><span style="font-family: Courier New,Courier,monospace;"> 68 83 90 92 95]</span><br>



      </small></div>



      <small><br>



由於67小於92，所以轉搜尋右邊的數列：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-family: Courier New,Courier,monospace;">3 24 57 57 67 [68 83 </span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">90</span><span style="font-family: Courier New,Courier,monospace;"> 92 95]</span><br>



      </small></div>



      <small><br>



由於90小於92，再搜尋右邊的數列，這次就找到所要的數了：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-family: Courier New,Courier,monospace;">3 24 57 57 67 68 83 90 [</span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">92</span><span style="font-family: Courier New,Courier,monospace;"> 95] </span></small><br>



      </div>




      <br>



      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Scala"></a><a href="#Ruby">Ruby</a><br>
      </h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void quickSort(int[], int, int); <br>int binarySearch(int[], int); <br><br>int main(void) { <br>    srand(time(NULL)); <br>    <br>    int number[MAX] = {0}; <br><br>    int i;<br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>    } <br><br>    quickSort(number, 0, MAX-1); <br><br>    printf("數列："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br><br>    int find;<br>    printf("\n輸入尋找對象："); <br>    scanf("%d", &amp;find); <br><br>    if((i = binarySearch(number, find)) &gt;= 0) <br>        printf("找到數字於索引 %d ", i); <br>    else <br>        printf("\n找不到指定數"); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>int binarySearch(int number[], int find) { <br>    int low = 0; <br>    int upper = MAX - 1; <br>    while(low &lt;= upper) { <br>        int mid = (low+upper) / 2; <br>        if(number[mid] &lt; find) <br>            low = mid+1; <br>        else if(number[mid] &gt; find) <br>            upper = mid - 1; <br>        else <br>            return mid; <br>    } <br>    return -1; <br>} <br><br>void quickSort(int number[], int left, int right) { <br>    if(left &lt; right) { <br>        int s = number[(left+right)/2]; <br>        int i = left - 1; <br>        int j = right + 1; <br><br>        while(1) { <br>            while(number[++i] &lt; s) ;  // 向右找 <br>            while(number[--j] &gt; s) ;  // 向左找 <br>            if(i &gt;= j) <br>                break; <br>            SWAP(number[i], number[j]); <br>        } <br><br>        quickSort(number, left, i-1);   // 對左邊進行遞迴 <br>        quickSort(number, j+1, right);  // 對右邊進行遞迴 <br>    } <br>} <br></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre>public class Search {<br>    public static int binary(int[] number, int des) {<br>        int low = 0; <br>        int upper = number.length - 1; <br><br>        while(low &lt;= upper) { <br>            int mid = (low+upper) / 2; <br>            if(number[mid] &lt; des) <br>                low = mid+1; <br>            else if(number[mid] &gt; des) <br>                upper = mid - 1; <br>            else <br>                return mid; <br>        } <br><br>        return -1; <br>    }<br>    <br>    public static void main(String[] args) {<br>        int[] number = {1, 2, 3, 4, 6, 7, 8};<br>        int find = Search.binary(number, 2);<br>        System.out.println(find &gt;= 0 ? "找到數值於索引" + find : "找不到數值"); <br>    }<br>} <br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def search(number, des):<br>    low = 0<br>    upper = len(number) - 1<br>    while low &lt;= upper:<br>        mid = (low + upper) // 2<br>        if number[mid] &lt; des:<br>            low = mid + 1<br>        elif number[mid] &gt; des:<br>            upper = mid - 1<br>        else:<br>            return mid<br>    return -1<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort()<br>find = search(number, 2)<br>print("找到數值於索引 " + str(find) if find &gt;= 0 else "找不到數值")  </pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>object Search {<br>    def binary(number: Array[Int], des: Int) = {<br>        var low = 0<br>        var upper = number.length - 1<br>        var result = -1<br>        var isContinue = true<br>        while(isContinue &amp;&amp; low &lt;= upper) {<br>            val mid = (low + upper) / 2<br>            if(number(mid) &lt; des) {<br>                low = mid + 1<br>            }<br>            else if(number(mid) &gt; des) {<br>                upper = mid - 1<br>            }<br>            else {<br>                result = mid<br>                isContinue = false<br>            }<br>        }<br>        result<br>    }<br>}<br><br>val number = Array(1, 2, 3, 4, 6, 7, 8)<br>val find = Search.binary(number, 3)<br>println(if(find &gt;= 0) "找到數值於索引 " + find else "找不到數值")</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre># encoding: Big5<br>def search(number, des)<br>    low = 0<br>    upper = number.length - 1<br>    while low &lt;= upper<br>        mid = (low + upper) / 2<br>        if number[mid] &lt; des<br>            low = mid + 1<br>        elsif number[mid] &gt; des<br>            upper = mid - 1<br>        else<br>            return mid<br>        end<br>    end<br>    -1<br>end<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort!<br>find = search(number, 2)<br>print find &gt;= 0 ? "找到數值於索引 " + find.to_s : "找不到數值", "\n"<br></pre>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>





      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/BinarySearch.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:06 GMT -->
</html>