<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/PascalTriangle.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:32 GMT -->
<head>





















  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>巴斯卡三角形</title></head><body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Algorithm Gossip:&nbsp;巴斯卡三角形</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>巴斯卡（Pascal）三角形基本上就是在解 rCn ，因為三角形上的每一個數字各對應一個r</small>C<small>n，其中 r 為 row，而 n 為 column，如下：<br>





　　　　0</small>C<small>0<br>





　　　1</small>C<small>0 1</small>C<small>1<br>





　　2</small>C<small>0 2</small>C<small>1 2</small>C<small>2<br>





　3</small>C<small>0 3</small>C<small>1 3</small>C<small>2 3</small>C<small>3<br>





4</small>C<small>0 4</small>C<small>1 4</small>C<small>2 4</small>C<small>3 4</small>C<small>4<br>

      <br>





對應的數據如下圖所示：</small>



 <br>







      
      <div style="text-align: center;"><img style="width: 588px; height: 207px;" alt="" src="images/pascal.png"><br>





      <br>





      
      <div style="text-align: left;">
      
      <h2>&nbsp;解法</h2>





      </div>





      <br>





      
      <div style="text-align: left;"><small>巴斯卡三角形中的 rCn 可以使用以下這個公式來計算，以避免階乘運算時的數值溢位：<br>





      </small>
      
      <div style="margin-left: 40px; font-weight: bold; font-family: Courier New,Courier,monospace;"><small>r</small><big>C</big><small>0 = 1</small><br>
r<big>C</big><small>n = </small><small>r</small><big>C</big><small>n-1 * </small><small>(r - n + 1) / n</small><br>
</div>

      <small>



      </small></div>





      </div>





      <br>





      
      <h2> 演算法</h2>






      <br>






      
      <pre>/* 計算nCr，但是並不快，只是方便 */<br>Procedure COMBI(r, n) <br>    FOR(i = 1; i &lt;= n; i = i + 1)<br>        p = p * (r - i + 1) / i<br>    RETURN p<br></pre>





      <br>

      <small>



解決 r</small>C<small>n 的算法之後，剩下的就是如何將這些數字排版成三角形的問題了，這就要看您是如何顯示成果的了。</small>

      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2>







      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>






      
      <pre>#include &lt;stdio.h&gt;<br>#define HEIGHT 12<br><br>int combi(int r, int n){<br>    int p = 1;<br>    int i;<br>    for(i = 1; i &lt;= n; i++) {<br>        p = p * (r - i + 1) / i;<br>    }<br>    return p;<br>}<br><br>int main() {<br>    int r;<br>    for(r = 0; r &lt; HEIGHT; r++) {<br>        char format[5];            <br>        sprintf(format, "%%%ds", (HEIGHT - r) * 3);<br>        printf(format, "");<br>        int n;<br>        for(n = 0; n &lt;= r; n++) {<br>            printf("%6d", combi(r, n));<br>        }<br>        printf("\n");<br>    }<br>    return 0;<br>} <br></pre>






      <br>






      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>






      
      <pre>import static java.lang.System.out;<br>import java.util.*;<br><br>public class Pascal {<br>    private List&lt;List&lt;Integer&gt;&gt; rows = new ArrayList&lt;&gt;();<br>    <br>    Pascal(int height) {<br>        for(int r = 0; r &lt; height; r++) {<br>            rows.add(createRow(r));<br>        }<br>    }<br>    <br>    int combi(int r, int n) {<br>        return rows.get(r).get(n);<br>    }<br>    <br>    private List&lt;Integer&gt; createRow(int r){<br>        List&lt;Integer&gt; row = new ArrayList&lt;&gt;();<br>        row.add(1);<br>        for(int n = 1; n &lt;= r; n++) {<br>            row.add(row.get(n - 1) * (r - n + 1) / n);<br>        }<br>        return row;<br>    }<br>    <br>    public static void main(String[] args) {<br>        final int HEIGHT = 12;<br>        Pascal p = new Pascal(HEIGHT);<br>        for(int r = 0; r &lt; HEIGHT; r++) {<br>            out.printf(String.format("%%%ds", (HEIGHT - r) * 3), "");<br>            for(int n = 0; n &lt;= r; n++) {<br>                out.printf("%6d", p.combi(r, n));<br>            }<br>            out.println();<br>        }<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def combi(r, n):<br>    return 1 if n == 0 else combi(r, n - 1) * (r - n + 1) // n<br>	<br>height = 12<br>c = [[combi(r, n) for n in range(r + 1)] for r in range(height)]<br> <br>for r in range(len(c)):<br>    print(("%" + str((len(c) - r) * 3) + "s") % "", end = "")<br>    for n in range(len(c[r])):<br>	    print("%6d" % c[r][n], end = "");<br>    print()</pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>def combi(r: Int, n: Int): Int = n match {<br>    case 0 =&gt; 1<br>    case _ =&gt; combi(r, n - 1) * (r - n + 1) / n<br>}<br><br>val height = 12<br>val c = for(r &lt;- 0 until height) yield for(n &lt;- 0 to r) yield combi(r, n)<br><br>(0 until c.length).foreach(r =&gt; {<br>    printf("%%%ds".format((c.length - r) * 3), "")<br>    c(r).foreach(printf("%6d", _))<br>    println<br>})<br></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>def combi(r, n)<br>    return 1 if n == 0; combi(r, n - 1) * (r - n + 1) / n<br>end<br><br>height = 12<br>0.upto(height - 1) do |r|<br>    printf "%" + ((height - r) * 3).to_s + "s", ""<br>    0.upto(r) do |n|<br>       printf "%6d", combi(r, n)<br>    end<br>    puts<br>end<br></pre><br>
      
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>function combi(r, n) {<br>    if(n == 0) return 1;<br>    else return combi(r, n - 1) * (r - n + 1) / n;<br>}<br><br>var height = 12;<br>var pascal = '';<br>for(var r = 0; r &lt; height; r++) {<br>    pascal += new Array((height - r) * 3).join(' ');<br>    for(var n = 0; n &lt;=r; n++) {<br>        var c = combi(r, n);<br>        pascal += new Array(6 - (c + '').length).join(' ') + c;<br>    }<br>    pascal += '\n';<br>}<br>print(pascal);<br></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre>import Control.Monad<br>import Text.Printf<br><br>combi _ 0 = 1<br>combi r n = combi r (n - 1) * (r - n + 1) `div` n<br><br>main = do<br>    let height = 12<br>    forM [0..height - 1] (\r -&gt; do<br>        putStr $ take ((height - r) * 3) $ cycle " "<br>        sequence [printf "%6d" (combi r n) | n &lt;- [0..r]]<br>        putStrLn "")<br></pre>

<br>

</td><td style="width: 250px; text-align: center; vertical-align: top;">

      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <br>



<script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br><br>
      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>

<br>
</td></tr></tbody></table><br>

<br>





<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/PascalTriangle.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:33 GMT -->
</html>