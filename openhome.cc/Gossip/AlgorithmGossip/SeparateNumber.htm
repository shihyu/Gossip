<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/SeparateNumber.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:53 GMT -->
<head>














  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>數字拆解</title></head><body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Algorithm Gossip: 數字拆解</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 





      
      <h2>說明</h2>

      <small>

這個題目來自於 <a href="http://www.javaworld.com.tw/jute/post/view?bid=5&amp;id=8317&amp;sty=1&amp;tpg=1&amp;age=0">JavaWorld@TW 數字拆解</a>。題目是這樣的：<br>

      </small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">3&nbsp;= 2 + 1 <br>
&nbsp; = 1 + 1 + 1 所以 3 有三種拆法（包括 3 本身）</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">4 = 3 + 1 <br>
&nbsp; = 2 + 2 <br>
&nbsp; = 2 + 1 + 1 <br>
&nbsp; = 1 + 1 + 1 + 1 五種（包括 4 本身）</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">5 = 4 + 1 <br>
&nbsp; = 3 + 2 <br>
&nbsp; = 3 + 1 + 1 <br>
&nbsp; = 2 + 2 + 1 <br>
&nbsp; = 2 + 1 + 1 + 1 <br>
&nbsp; = 1 + 1 + 1 + 1 + 1 七種（包括 5 本身）</span><br>



      </small></div>



      <small>

      <br>



依此類推，請問一個指定數字的拆解方法有多少個？</small>

      <br>



      
      <h2>解法</h2>

      <small>

我們以上例中第三個數字 5 的拆解為例，假設 f(n) 為數字 n 的可拆解方式個數，而 f(x, y) 為使用 y 以下的數字來拆解 x 的方法個數，則觀察：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"><span style="color: rgb(204, 51, 204);">5</span> = <span style="color: rgb(255, 102, 0);">4 + 1</span> <br>
&nbsp; = <span style="color: rgb(51, 204, 0);">3 + 2</span> <br>
&nbsp; = <span style="color: rgb(51, 255, 51);"><span style="color: rgb(51, 204, 0);">3 + 1 + 1</span> </span><br>
&nbsp; = <span style="color: rgb(0, 204, 204);">2 + 2 + 1</span> <br>
&nbsp; = <span style="color: rgb(0, 204, 204);">2 + 1 + 1 + 1 </span><br>
&nbsp; = <span style="color: rgb(51, 51, 255);">1 + 1 + 1 + 1 + 1</span></span><br>



      </small></div>



      <small><br>



使用函式來表示的話：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">f(5) = <span style="color: rgb(255, 102, 0);">f(4, 1)</span> + <span style="color: rgb(51, 204, 0);">f(3, 2)</span> + <span style="color: rgb(0, 204, 204);">f(2, 3)</span> + <span style="color: rgb(51, 51, 255);">f(1, 4)</span> + <span style="color: rgb(204, 51, 204);">f(0, 5)</span></span><br>



      </small></div>



      <small><br>雖
然f(1, 4) = f(1, 3) + f(1, 2) + f(1, 1)，但是使用大於1的數字來拆解1沒有意義，所以f(1, 4) =
f(1, 1)，也就是數字1只會有一種拆法，也就是 1 本身，同樣地，f(0, 5) 會等於 f(0, 0)，也就是數字 0
只會有一種拆法，也就是 0 本身：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">f(5) = f(4, 1) + f(3, 2) + f(2, 3) + f(1, 1) + f(0, 0)</span><br>



      </small></div>



      <small><br>



依照以上的說明，使用動態程式規畫（Dynamic programming）來進行求解，其中f(4, 1)其實就是f(5 - 1,
min(5 - 1, 1))，f(x, y)就等於f(n - y, min(n - x, y))，其中n為要拆解的數字，而min()表示取兩者中較小的數。<br>
<br>



使用二維陣列表格 table[x][y] 來表示f(x, y)，剛開始每列的索引 0 與索引 1 元素值設為 1，因為任何數以 0 以下的數拆解必只有 1 種，而任何數以 1 以下的數拆解也必只有 1 種：<br>

      </small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">for(i = 0; i &lt; NUM +1; i++) { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; table[i][0] = 1;&nbsp; // 任何數用 0 以下的數拆解必只有 1 種 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; table[i][1] = 1;&nbsp; // 任何數用 1 以下的數拆解必只有 1 種 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>



      </small></div>

      <small>

&nbsp;<br>

      <br>



接下來就開始逐一進行拆解。如果數字為NUM，則陣列維度大小必須為 NUM * (NUM / 2 + 1)。以數字 10 為例，其維度為10 * 6，表格會如下：<br>

      </small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 0 0 0 0</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 0 0 0 0</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 2 0 0 0</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 2 3 0 0</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 3 4 5 0</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 3 5 6 7</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 4 7 9 0</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 4 8 0 0</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 5 0 0 0</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1 1 0 0 0 0 </span></small>

















      <br>



      </div>




      <br>



      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2>




      
      <ul>

        <li> <a name="C"></a>C
  </li>

      
      </ul>




      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#define NUM 10    //  要拆解的數字 <br>#define DEBUG 0 <br><br>void init(int[][NUM / 2 + 1]);<br>int min(int, int);<br>int f(int[][NUM / 2 + 1], int, int);<br>void dp(int[][NUM / 2 + 1]);<br>int count(int[][NUM / 2 + 1]);<br>void print(int[][NUM / 2 + 1]);<br><br>int main(void) { <br>    int table[NUM][NUM / 2 + 1] = {0};<br><br>    init(table);<br>    dp(table);<br>    printf("可拆解出 %d 組數字\n", count(table)); <br><br>    if(DEBUG) { print(table); }<br><br>    return 0; <br>}<br><br>void init(int table[][NUM / 2 + 1]) {<br>    int i;<br>    for(i = 0; i &lt; NUM; i++) { <br>        table[i][0] = 1;  // 任何數用 0 以下的數拆解必只有 1 種 <br>        table[i][1] = 1;  // 任何數用 1 以下的數拆解必只有 1 種 <br>    }<br>}<br><br>int min(int a, int b) { return a &gt; b ? b : a; }<br><br>int f(int table[][NUM / 2 + 1], int x, int y) {<br>    int c, i;<br>    for(c = 0, i = 1 ; i &lt;= y; i++) { c += table[x - i][min(x - i, i)]; }<br>    return c;<br>}<br><br>void dp(int table[][NUM / 2 + 1]) {<br>    int x;<br>    for(x = 2; x &lt; NUM; x++){ <br>        int y;<br>        for(y = 2; y &lt; NUM / 2 + 1 &amp;&amp; y &lt;= x; y++) if(x + y &lt;= NUM) {<br>            table[x][y] = f(table, x, y); <br>        }<br>    } <br>}<br><br>int count(int table[][NUM / 2 + 1]) {<br>    int i, result;<br>    for(i = 1, result = 0 ; i &lt;= NUM; i++) {<br>        result += table[NUM - i][(NUM - i &gt;= i) ? i : NUM - i];<br>    }<br>    return result;<br>}<br><br>void print(int table[][NUM / 2 + 1]) {<br>    int i;<br>    for(i = 0; i &lt; NUM; i++) { <br>        int j;<br>        for(j = 0; j &lt; NUM/2+1; j++) {<br>           printf("%2d", table[i][j]); <br>        }<br>        printf("\n"); <br>    } <br>}</pre>



      <br>
<ul>
        <li><a name="Java"></a>Java</li>
</ul><pre>import java.util.Arrays;<br><br>public class Number {<br>    private static int[][] table(int number) {<br>        int[][] table = new int[number][number / 2 + 1];<br>        for(int i = 0; i &lt; table.length; i++) { <br>            table[i][0] = table[i][1] = 1;<br>        }<br>        return table;<br>    }<br>    <br>    private static int f(int[][] table, int x, int y) {<br>        int c = 0;<br>        for(int i = 1 ; i &lt;= y; i++) { <br>            c += table[x - i][Math.min(x - i, i)]; <br>        }<br>        return c;<br>    }<br>    <br>    private static int[] dp(int[][] table, int x) {<br>        int[] row = Arrays.copyOf(table[x], table[x].length);<br>        for(int y = 2; y &lt; row.length &amp;&amp; y &lt;= x; y++) {<br>            if(x + y &lt;= table.length) { row[y] = f(table, x, y); }<br>        }<br>        return row;<br>    }<br>    <br>    private static int[][] dp(int[][] table) {<br>        table = Arrays.copyOf(table, table.length);<br>        for(int x = 2; x &lt; table.length; x++) { table[x] = dp(table, x); } <br>        return table;<br>    }<br>    <br>    private static int count(int[][] table) {<br>        int result = 0;<br>        for(int i = 1; i &lt;= table.length; i++) {<br>            result += table[table.length - i][<br>                (table.length - i &gt;= i) ? i : table.length - i];<br>        }<br>        return result;<br>    }<br>    <br>    public static int ofDeconstructions(int number) {<br>        return count(dp(table(number)));<br>    }<br>    <br>    public static void main(String[] args) {<br>        System.out.printf("可拆解出 %d 組數字%n", <br>            Number.ofDeconstructions(10));<br>    }<br>}</pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def table(number):<br>    return [[1, 1] + [0] * (number // 2 - 1)] * number<br><br>def f(table, x, y):<br>    def c(i):<br>        return table[x - i][min(x - i, i)] + c(i + 1) if i &lt;= y else 0<br>    return c(1)<br><br>def dpRowOf(table, x):<br>    return table[x][0:2] + [f(table, x, y) <br>        if y &lt;= x and x + y &lt;= len(table) <br>        else table[x][y] for y in range(2, len(table[x]))]<br>    <br>def dp(table):<br>    def dp(t, x):<br>        return dp(t[0:x] + <br>            [dpRowOf(t, x)] + t[x + 1:], x + 1) if x &lt; len(t) else t<br>    return dp(table, 2)<br>    <br>def count(table):<br>    def j(i): return i if len(table) - i &gt;= i else len(table) - i<br>    return sum([table[len(table) - i][j(i)] <br>        for i in range(1, len(table) + 1)])<br><br>def numOfDecons(number): return count(dp(table(number)))<br><br>print("可拆解出 %d 組數字\n" % numOfDecons(10))</pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>import scala.math.min<br>import List.fill<br><br>def table(number: Int) = fill(number)(List(1, 1) ++ fill(number / 2 - 1)(0))<br><br>def f(table: List[List[Int]], x: Int, y: Int) = {<br>    def c(i: Int): Int = <br>        if(i &lt;= y) table(x - i)(min(x - i, i)) + c(i + 1) else 0<br>    c(1)<br>}<br>    <br>def dpRowOf(table: List[List[Int]], x: Int) = {<br>    table(x).take(2) ++ (for(y &lt;- 2 until table(x).size) yield <br>        (if(y &lt;= x &amp;&amp; x + y &lt;= table.size) f(table, x, y) <br>         else table(x)(y)))<br>}<br>    <br>def dp(table: List[List[Int]]) = {<br>    def idp(t: List[List[Int]], x: Int): List[List[Int]] = {<br>        if(x &lt; t.size) <br>            idp(t.take(x) ++ (dpRowOf(t, x) :: t.drop(x + 1)) , x + 1)<br>        else t<br>    }<br>    idp(table, 2)<br>}<br><br>def count(table: List[List[Int]]) = {<br>    def j(i: Int) = if(table.size - i &gt;= i) i else table.size - i<br>    (for(i &lt;- 1 to table.size) yield table(table.size - i)(j(i))).sum<br>}<br><br>def numOfDecons(number: Int) = count(dp(table(number)))<br><br>println("可拆解出 %d 組數字%n".format(numOfDecons(10)))</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre># encoding: Big5<br>def table(number); [[1, 1] + [0] * (number / 2 - 1)] * number end<br><br>def f(table, x, y)<br>    c = -&gt;(i) { i &lt;= y ? table[x - i][[x - i, i].min] + c.call(i + 1) : 0 }<br>    c.call(1)<br>end<br>        <br>def dpRowOf(table, x)<br>    table[x].take(2) + (2...10).map { |y|<br>        y &lt;= x &amp;&amp; x + y &lt;= table.size ? f(table, x, y) : table[x][y]<br>    }<br>end<br>    <br>def dp(table)<br>    dp = -&gt;(t, x) {<br>        x &lt; t.size ? dp.call(<br>            t.take(x) + [dpRowOf(t, x)] + t.drop(x + 1), x + 1) : t<br>    }<br>    dp.call(table, 2)<br>end <br><br>def count(table)<br>    j = -&gt;(i) { table.size - i &gt;= i ? i : table.size - i }<br>    (1..table.size).map { |i| table[table.size - i][j.call(i)] }.reduce(:+)<br>end<br><br>def numOfDecons(number); count(dp(table(number))) end<br>    <br>printf("可拆解出 %d 組數字\n", numOfDecons(10))<br></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>Array.prototype.fill = function(n, ele) {<br>    var arr = this.slice(0, this.length);<br>    for(var i = 0; i &lt; n; i++) { arr.push(ele); }<br>    return arr;<br>};<br><br>function table(number) {<br>    var table = [];<br>    for(var i = 0; i &lt; number; i++) {<br>        table[i] = [1, 1].fill(parseInt(number / 2) + 1, 0);<br>    }<br>    return table;<br>}<br><br>function f(table, x, y) {<br>    var c = 0;<br>    for(var i = 1 ; i &lt;= y; i++) { <br>        c += table[x - i][Math.min(x - i, i)]; <br>    }<br>    return c;<br>}<br><br>function dpRowOf(table, x) {<br>    var row = table[x].slice(0, table[x].length);<br>    for(var y = 2; y &lt; row.length &amp;&amp; y &lt;= x; y++) {<br>        if(x + y &lt;= table.length) {<br>            row[y] = f(table, x, y);<br>        }<br>    }<br>    return row;<br>}<br><br>function dp(table) {<br>    table = table.slice(table, table.length);<br>    for(var x = 2; x &lt; table.length; x++) { <br>        table[x] = dpRowOf(table, x);<br>    }<br>    return table;<br>}<br><br>function count(table) {<br>    var result = 0;<br>    for(var i = 1; i &lt;= table.length; i++) {<br>        result += table[table.length - i][<br>                (table.length - i &gt;= i) ? i : table.length - i];<br>    }<br>    return result;<br>}<br><br>function numOfDecons(number) { return count(dp(table(number))); }<br><br>print('拆解組數：' + numOfDecons(10))<br></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre>table number =<br>    replicate number ([1, 1] ++ replicate (number `div` 2 - 1) 0)<br><br>f table x y = c 1<br>    where c i = if i &lt;= y <br>                    then table !! (x - i) !! min (x - i) i + c (i + 1) <br>                    else 0<br><br>dpRowOf table x =<br>    (take 2 (table !! x)) ++<br>        [if y &lt;= x &amp;&amp; x + y &lt;= length table <br>            then f table x y <br>            else table !! x !! y | y &lt;- [2 .. length (table !! x) - 1]]<br><br>dp table = idp table 2<br>    where <br>        idp t x =<br>            if x &lt; length t <br>                then idp (take x t ++ (dpRowOf t x : drop (x + 1) t)) (x + 1)<br>                else t<br><br>count table = <br>    foldl (+) 0 [table !! (len - i) !! (j i) | i &lt;- [1 .. len]]<br>    where j i = if len - i &gt;= i then i else len - i<br>          len = length table<br><br>numOfDecons = count . dp . table<br><br>main = putStrLn $ "Number of deconstructions: " ++ (show $ numOfDecons 10)<br></pre>
<br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>





      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>


 <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>


      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/SeparateNumber.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:53 GMT -->
</html>