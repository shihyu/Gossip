<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/CrapsGame.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:52 GMT -->
<head>













  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>Craps賭博遊戲</title></head><body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Algorithm Gossip: Craps賭博遊戲</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 




      
      <h2>說明</h2>

      <small>
一個簡單的賭博遊戲，遊戲規則如下：玩家擲兩個骰子，點數為1到6，如果第一次點數和為7或11，則玩家勝，如果點數和為2、3或12，則玩家輸，如果和
為其它點數，則記錄第一次的點數和，然後繼續擲骰，直至點數和等於第一次擲出的點數和，則玩家勝，如果在這之前擲出了點數和為7，則玩家輸。</small><br>


      
      <h2>解法</h2>

      <small>
規則看來有些複雜，這是一個遊戲嗎？不！這是兩個遊戲，第一個遊戲規則是事先設定好輸贏點數，第二個遊戲規則是要指定贏的點數（由玩家擲出），分別對這兩
個遊戲的規則撰寫函式，就可避免看似複雜的switch、if等條件判斷（如 C 到 JavaScript 的實作所示）。<br>
      <br>
不過就流程來說，主要就是擲骰、使用規則判斷、顯示輸贏或繼續。</small><small>規則判斷是一種策略，因此可使用回呼函式或物件傳入，遊戲流程就可當作可重用樣版了（如 Haskell 的實作所示）。</small>


      
      <h2>實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala&nbsp;</a>&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2>


      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;time.h&gt;<br>#define LOST 0<br>#define WON 1<br>#define CONTINUE 2<br><br>int dice();<br>int initialRoll(int);<br>int reRoll(int, int);<br><br>int main(void) {<br>    srand(time(0));<br>    <br>    int firstPoint = dice();<br>    printf("玩家點數：[%d]\n", firstPoint);<br>    <br>    int status = initialRoll(firstPoint);<br>    while(status == CONTINUE) {<br>        int point = dice();<br>        printf("玩家點數：%d\n", point);<br>        status = reRoll(firstPoint, point);<br>    } <br><br>    puts(status == WON ? "玩家勝" : "玩家輸");<br><br>    return 0;<br>} <br><br>int dice() { <br>    return (rand() % 6) + (rand() % 6) + 2;<br>}<br><br>int initialRoll(int firstPoint) {<br>    switch(firstPoint) {<br>       case 7: case 11:         return WON;<br>       case 2: case 3: case 12: return LOST;<br>       default:                 return CONTINUE;<br>    }<br>}<br><br>int reRoll(int firstPoint, int point) {<br>    return firstPoint == point ? WON : (7 == point ? LOST : CONTINUE);<br>}<br></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre>import static java.lang.Math.random;<br>import static java.lang.System.out;<br><br>enum Status { WON, LOST, CONTINUE }<br><br>public class Craps {<br>    public static int dice() { <br>        return (int)(random() * 6) + (int)(random() * 6) + 2;<br>    }<br><br>    public static Status initialRoll(int firstPoint) {<br>        switch(firstPoint) {<br>            case 7: case 11:         return Status.WON;<br>            case 2: case 3: case 12: return Status.LOST;<br>            default:                 return Status.CONTINUE;<br>        }<br>    }<br><br>    public static Status reRoll(int firstPoint, int point) {<br>        return firstPoint == point ? Status.WON :<br>                   (7 == point ? Status.LOST : Status.CONTINUE);<br>    }<br>    <br>    public static void main(String[] args) {<br>        int firstPoint = dice();<br>        out.printf("玩家點數：[%d]%n", firstPoint);<br><br>        Status status = initialRoll(firstPoint);<br> <br>        while(status == Status.CONTINUE) {<br>            int point = dice();<br>            out.printf("玩家點數：%d%n", point);<br>            status = reRoll(firstPoint, point);<br>        } <br><br>        out.println(status == Status.WON ? "玩家勝" : "玩家輸");<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>from random import randint<br><br>class Status:<br>    LOST = 0<br>    WON = 1<br>    CONTINUE = 2<br>    <br>def initialRoll(firstPoint):<br>    return Status.WON if firstPoint in [7, 11] else \<br>    (Status.LOST if firstPoint in [2, 3, 12] else Status.CONTINUE)<br><br>def reRoll(firstPoint, point):<br>    return Status.WON if firstPoint == point else \<br>    (Status.LOST if 7 == point else Status.CONTINUE)<br><br>def dice():<br>    return randint(1, 6) + randint(1, 6)<br><br>firstPoint = dice()<br>print("玩家點數：[%d]" % firstPoint)<br>status = initialRoll(firstPoint)<br><br>while status == Status.CONTINUE:<br>    point = dice()<br>    print("玩家點數：%d" % point)<br>    status = reRoll(firstPoint, point)<br><br>print("玩家勝" if status == Status.WON else "玩家輸")<br></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>import scala.util.Random<br><br>object Status extends Enumeration {<br>    val LOST, WON, CONTINUE = Value<br>}<br>    <br>def dice = {<br>    val r = new Random<br>    (r.nextDouble * 6).toInt + (r.nextDouble * 6).toInt + 2<br>}<br>    <br>def initialRoll(firstPoint: Int) = firstPoint match {<br>    case 7 | 11     =&gt; Status.WON<br>    case 2 | 3 | 12 =&gt; Status.LOST<br>    case _          =&gt; Status.CONTINUE<br>}<br><br>def reRoll(firstPoint: Int, point: Int) = {<br>    if(firstPoint == point) Status.WON else<br>    (if(7 == point) Status.LOST else Status.CONTINUE)<br>}<br><br>def doWhile(status: Status.Value) {<br>    if(status == Status.CONTINUE) {<br>        val point = dice<br>        printf("玩家點數：%d%n", point)<br>        doWhile(reRoll(firstPoint, point))<br>    }<br>}<br><br>val firstPoint = dice<br>printf("玩家點數：[%d]%n", firstPoint)<br>var status = initialRoll(firstPoint)<br><br>while(status == Status.CONTINUE) {<br>    val point = dice<br>    printf("玩家點數：%d%n", point)<br>    status = reRoll(firstPoint, point)<br>}<br><br>println(if(status == Status.WON) "玩家勝" else "玩家輸")</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre># encoding: Big5<br><br>class Status<br>    LOST = 0<br>    WON = 1<br>    CONTINUE = 2<br>end<br>    <br>def initialRoll(firstPoint)<br>    case firstPoint<br>        when 7, 11;     Status::WON<br>        when 2, 3, 12;  Status::LOST<br>        else;           Status::CONTINUE<br>    end<br>end<br><br>def reRoll(firstPoint, point)<br>    firstPoint == point ? Status::WON : <br>    (7 == point ? Status::LOST : Status::CONTINUE)<br>end<br><br>def dice<br>    (rand * 6).to_i + (rand * 6).to_i + 2<br>end<br>    <br>firstPoint = dice<br>puts("玩家點數：[#{firstPoint}]")<br>status = initialRoll(firstPoint)<br><br>while status == Status::CONTINUE<br>    point = dice<br>    puts("玩家點數：#{point}")<br>    status = reRoll(firstPoint, point)<br>end<br><br>puts(status == Status::WON ? "玩家勝" : "玩家輸")<br></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>var Status = {<br>    LOST     : 0,<br>    WON      : 1,<br>    CONTINUE : 2<br>};<br><br>function dice() {<br>    return parseInt(Math.random() * 6) + parseInt(Math.random() * 6) + 2;<br>}<br><br>function initialRoll(firstPoint) {<br>    switch(firstPoint) {<br>        case 7: case 11:         return 0;<br>        case 2: case 3: case 12: return 1;<br>        default:                 return 2;<br>    }<br>    return 3;<br>}<br><br>function reRoll(firstPoint, point) {<br>    return firstPoint === point ? Status.WON :<br>           (7 === point ? Status.LOST : Status.CONTINUE);<br>}<br><br>var firstPoint = dice();<br>print("玩家點數：[" + firstPoint + "]");<br>var sts = initialRoll(firstPoint);<br><br>while(sts === Status.CONTINUE) {<br>    var point = dice();<br>    print("玩家點數：" + point);<br>    sts = reRoll(firstPoint, point);<br>} <br><br>print(sts === Status.WON ? "玩家勝" : "玩家輸");<br></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre>import Data.List<br>import System.Random<br><br>data Status = Won | Lost | Continue deriving (Eq)<br>    <br>initialRoll firstPoint =<br>    if firstPoint `elem` [7, 11] then Won <br>    else if firstPoint `elem` [2, 3, 12] then Lost<br>         else Continue<br><br>reRoll firstPoint point =<br>    if firstPoint == point then Won<br>    else if 7 == point then Lost <br>         else Continue<br>         <br>diceLt gen = randomRs (1, 6) gen::[Int]<br><br>craps roll firstPoint diceLt1 diceLt2 = do<br>    let point = (head diceLt1) + (head diceLt2)<br>        status = roll point<br>    putStrLn $ "Point:" ++ show point<br>    if status == Continue then <br>        craps r2 firstPoint (tail diceLt1) (tail diceLt2)<br>    else <br>        putStrLn (if status == Won then "Won" else "Lost")<br>    where r2 = \point -&gt; reRoll firstPoint point<br>    <br>main = do<br>    gen1 &lt;- getStdGen<br>    gen2 &lt;- newStdGen<br>    let diceLt1 = diceLt gen1<br>        diceLt2 = diceLt gen2<br>    craps r1 ((head diceLt1) + (head diceLt2)) diceLt1 diceLt2<br>    where r1 = \firstPoint -&gt; initialRoll firstPoint<br></pre>
<br>

 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>





      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>   
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/CrapsGame.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:52 GMT -->
</html>