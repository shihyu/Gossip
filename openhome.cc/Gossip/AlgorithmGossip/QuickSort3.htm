<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/QuickSort3.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:03 GMT -->
<head>








  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>快速排序法（三）</title></head><body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Algorithm Gossip:&nbsp;快速排序法（三）</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 




      
      <h2>說明</h2>

      <small>
之前說過軸的選擇是快速排序法的效率關鍵之一，在這邊的快速排序法的軸選擇方式更加快了快速排序法的效率，它是來自演算法名書 Introduction to Algorithms 之中。</small><br>


      
      <h2>解法</h2>

      <small>
先說明這個快速排序法的概念，它以最右邊（或最左邊）的值s作比較的標準，將整個數列分為三個部份，一個是小於s的部份，一個是大於s的部份，一個是未處理的部份，如下所示 ： <br>

      </small>

      
      <div style="text-align: center;"><small><img style="width: 283px; height: 68px;" alt="快速排序" title="快速排序" src="images/quickSort3-1.jpg"></small></div>


      <small><br>


在排序的過程中，i 與 j 都會不斷的往右進行比較與交換，最後數列會變為以下的狀態： <br>

      </small>
      
      <div style="text-align: center;"><small><img style="width: 285px; height: 69px;" alt="快速排序" title="快速排序" src="images/quickSort3-2.jpg"></small></div>


      <small><br>


然後將s的值置於中間，接下來就以相同的步驟會左右兩邊的數列進行排序的動作，如下所示： <br>

      </small>
      
      <div style="text-align: center;"><small><img style="width: 283px; height: 58px;" alt="快速排序" title="快速排序" src="images/quickSort3-3.jpg"></small></div>


      <small><br>



整個演算的過程，直接摘錄書中的虛擬碼來作說明： </small><br>



      
      <pre>QUICKSORT(A, p, r) <br>    if p &lt; r <br>        then q &lt;- PARTITION(A, p, r) <br>                 QUICKSORT(A, p, q-1) <br>                 QUICKSORT(A, q+1, r) <br>end QUICKSORT <br><br>PARTITION(A, p, r) <br>    x &lt;- A[r] <br>    i &lt;- p-1 <br>    for j &lt;- p to r-1 <br>        do if A[j] &lt;= x <br>                 then  i &lt;- i+1 <br>                         exchange A[i]&lt;-&gt;A[j] <br>    exchange A[i+1]&lt;-&gt;A[r] <br>    return i+1 <br>end PARTITION  <br></pre>



      <br>

      <small>
一個實際例子的演算如下所示：</small><br>


      
      <div style="text-align: center;"><img style="width: 493px; height: 241px;" alt="快速排序" title="快速排序" src="images/quickSort3-4.jpg"></div>


      <br>


      <br>


      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Scala"></a><a href="#Ruby">Ruby</a><br>
      </h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>int partition(int[], int, int); <br>void quickSort(int[], int, int); <br><br>int main(void) { <br>    srand(time(NULL)); <br>    <br>    int number[MAX] = {0}; <br><br>    printf("排序前："); <br>    int i;<br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>        printf("%d ", number[i]); <br>    } <br><br>    quickSort(number, 0, MAX-1); <br><br>    printf("\n排序後："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>int partition(int number[], int left, int right) { <br>    int i = left - 1; <br>    int j;<br>    for(j = left; j &lt; right; j++) { <br>        if(number[j] &lt;= number[right]) { <br>            i++; <br>            SWAP(number[i], number[j]); <br>        } <br>    } <br><br>    SWAP(number[i+1], number[right]); <br>    return i+1; <br>} <br><br>void quickSort(int number[], int left, int right) { <br>    if(left &lt; right) { <br>        int q = partition(number, left, right); <br>        quickSort(number, left, q-1); <br>        quickSort(number, q+1, right); <br>    } <br>} <br></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre>public class Sort {<br>    public static void quick(int[] number) {<br>        sort(number, 0, number.length-1);<br>    }<br>    <br>    private static void sort(int[] number, int left, int right) {<br>        if(left &lt; right) { <br>            int q = partition(number, left, right); <br>            sort(number, left, q-1); <br>            sort(number, q+1, right); <br>        } <br><br>    }<br><br>    private static int partition(int number[], int left, int right) {  <br>        int i = left - 1; <br>        for(int j = left; j &lt; right; j++) { <br>            if(number[j] &lt;= number[right]) { <br>                i++; <br>                swap(number, i, j); <br>            } <br>        } <br>        swap(number, i+1, right); <br>        return i+1; <br>    } <br><br>    private static void swap(int[] number, int i, int j) {<br>        int t = number[i]; <br>        number[i] = number[j]; <br>        number[j] = t;<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def sort(lst):<br>    if len(lst) &lt;= 1:<br>        return lst<br>    pivot = lst.pop(0)<br>    before = [i for i in lst if i &lt; pivot]<br>    after = [i for i in lst if i &gt;= pivot]<br>    return sort(before) + [pivot] + sort(after)</pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>object Sort {<br>    def quick(list: List[Int]): List[Int] = {<br>       list match {<br>           case Nil =&gt; Nil     <br>           case x::xs =&gt;        <br>           val (before,after) = xs partition (_ &lt; x)<br>           quick(before) ++ (x :: quick(after))<br>       }<br>    }<br>}<br></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>class Array<br>    def comprehend(&amp;block)<br>        return self if block.nil?<br>        self.collect(&amp;block).compact<br>    end<br>end<br><br>def quick(lst)<br>    case<br>    when lst.length &lt;= 1<br>        lst<br>    when pivot = lst.shift<br>        before = lst.comprehend { |i| i if i &lt; pivot}<br>        after = lst.comprehend { |i| i if i &gt;= pivot}<br>        quick(before) + [pivot] + quick(after)<br>    end<br>end<br></pre>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>





      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>

      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>


<br>


<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/QuickSort3.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:06 GMT -->
</html>