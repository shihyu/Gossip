<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/MultiColorHanoiTower.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:45 GMT -->
<head>
















  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>雙色、三色河內塔</title></head><body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Algorithm Gossip:&nbsp;雙色、三色河內塔</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 




      
      <h2>說明</h2>

      <small>
雙色河內塔與三色河內塔是由之前所介紹過的河內塔規則衍生而來，雙色河內塔的目的是將下圖左上的圓環位置經移動成為右下的圓環位置：</small> <br>


      <img style="width: 381px; height: 141px;" alt="多色河內塔" title="多色河內塔" src="images/multiColorHanoiTower-1.jpg"><br>


      <br>


      <small>而三色河內塔則是將下圖左上的圓環經移動成為右上的圓環： </small><br>


      
      <div style="text-align: center;"><img style="width: 381px; height: 141px;" alt="多色河內塔" title="多色河內塔" src="images/multiColorHanoiTower-2.jpg"><br>


      </div>


      <br>

      <small>

在移動的過程中，一樣遵守大盤必須在小盤之下的規則，而顏色順序則無限制。</small> 
      
      <h2> 解法</h2>

      <small>

無論是雙色河內塔或是三色河內塔，其解法觀念與之前介紹過的河內塔是類似的，同樣也是使用遞迴來解，不過這次遞迴解法的目的不同，我們先來看只有兩個
盤的情況，這很簡單，只要將第一柱的黃色移動至第二柱，而接下來第一柱的藍色移動至第三柱。 <br>

      <br>


再來是四個盤的情況，首先必須用遞迴完成下圖左上至右下的移動： </small>

      <br>


      
      <div style="text-align: center;"><img style="width: 378px; height: 137px;" alt="多色河內塔" title="多色河內塔" src="images/multiColorHanoiTower-3.jpg"></div>


      <br>

      <small>
接下來最底層的就不用管它們了，因為它們已經就定位，只要再處理第一柱的上面兩個盤子就可以了。<br>

      <br>


那麼六個盤的情況呢？一樣！首先必須用遞迴完成下圖左上至右下的移動： </small>
      <br>


      
      <div style="text-align: center;"><img style="width: 377px; height: 137px;" alt="多色河內塔" title="多色河內塔" src="images/multiColorHanoiTower-4.jpg"></div>


      <br>

      <small>
接下來最底層的就不用管它們了，因為它們已經就定位，只要再處理第一柱上面的四個盤子就可以了，這又與之前只有四盤的情況相同，接下來您就知道該如何進行解題了，無論是八個盤、十個盤以上等，都是用這個觀念來解題。<br>

      <br>


那麼三色河內塔呢？一樣，直接來看九個盤的情況，首先必須完成下圖的移動結果：</small>
      <br>


      
      <div style="text-align: center;"><img style="width: 226px; height: 63px;" alt="多色河內塔" title="多色河內塔" src="images/multiColorHanoiTower-5.jpg"><br>


      </div>


      <br>

      <small>
接下來最底兩層的就不用管它們了，因為它們已經就定位，只要再處理第一柱上面的三個盤子就可以了。</small><br>


      
      <div style="text-align: center;"><img style="width: 223px; height: 62px;" alt="多色河內塔" title="多色河內塔" src="images/multiColorHanoiTower-6.jpg"></div>


      <br>

      <small>
您也可以看看 <a href="http://obelix.ee.duth.gr/~apostolo/TowersOfHanoi/index.html">Towers of Hanoi Page</a> 中有關於河內塔的討論。</small><br>


      
      <h2>雙色河內塔實作：<a href="#2_C">C</a>&nbsp;&nbsp; &nbsp;<a href="#2_Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#2_Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#2_Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#2_Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#2_JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="#2_Haskell">Haskell</a><br>
      </h2>

      <small></small><h2>三色河內塔實作：<a href="#3_C">C</a>&nbsp;&nbsp; &nbsp;<a href="#3_Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#3_Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#3_Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#3_Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#3_JavaScript">JavaScript</a> &nbsp;&nbsp; <a href="#3_Haskell">Haskell</a><br>
      </h2><br>
<small></small><ul>

        <li><a name="2_C"></a> 雙色河內塔 C
  </li>

      
      </ul>



      
      <pre>#include &lt;stdio.h&gt;<br><br>void print(char from, char to) {<br>    printf("盤由 %c 移至 %c\n", from, to);<br>}<br><br>void hanoi(int n, char a, char b, char c) {<br>    if (n == 1) {<br>        print(a, c);<br>        print(a, c);<br>    } else {<br>        hanoi(n - 1, a, c, b);<br>        hanoi(1, a, b, c);<br>        hanoi(n - 1, b, a, c);<br>    }<br>}<br><br>void hanoi2colors(int n) {<br>    char a = 'A';<br>    char b = 'B';<br>    char c = 'C';<br>    int i;<br>    for(i = n / 2; i &gt; 1; i--) {<br>        hanoi(i - 1, a, b, c);<br>        print(a, b);<br>        print(a, b);<br>        hanoi(i - 1, c, b, a);<br>        print(b, c);<br>    }<br>    print(a, b);<br>    print(a, c);<br>}<br><br>int main() {<br>    int n;<br>    printf("盤數：");<br>    scanf("%d", &amp;n);<br><br>    hanoi2colors(n);<br>    <br>    return 0;<br>}  <br></pre>



      <br>



      
      <ul>

        <li><a name="2_Java"></a> 雙色河內塔 Java
  </li>

      
      </ul>



      
      <pre>import java.util.*;<br>import static java.lang.System.out;<br><br>public class Hanoi2Colors {<br>    static class Move {<br>        char from, to;<br>        Move(char from, char to) {<br>            this.from = from;<br>            this.to = to;<br>        }<br>    }<br>    <br>    private List&lt;Move&gt; moves;<br>    <br>    List&lt;Move&gt; solve(int n) {<br>        moves = new ArrayList&lt;Move&gt;();<br>        hanoi2Colors(n);<br>        return moves;<br>    }<br>        <br>    public void hanoi(int n, char a, char b, char c) {<br>        if (n == 1) {<br>            moves.add(new Move(a, c));<br>        } else {        <br>            hanoi(n - 1, a, c, b);<br>            hanoi(1, a, b, c);<br>            hanoi(n - 1, b, a, c);<br>        }<br>    }<br> <br>    public void hanoi2Colors(int n) {<br>        char a = 'A';<br>        char b = 'B';<br>        char c = 'C';<br>        for (int i = n / 2; i &gt; 1; i--) {<br>            hanoi(i - 1, a, b, c);<br>            moves.add(new Move(a, b));<br>            moves.add(new Move(a, b));<br>            hanoi(i - 1, c, b, a);<br>            moves.add(new Move(b, c));<br>        }<br>        moves.add(new Move(a, b));<br>        moves.add(new Move(a, c));<br>    }<br><br>    public static void main(String[] args) {<br>        out.print("盤數：");<br>        Hanoi2Colors hanoi2Colors = new Hanoi2Colors();<br>        int n = new Scanner(System.in).nextInt();<br>        for(Move move : hanoi2Colors.solve(n)) {<br>            out.printf("盤由 %c 移至 %c%n", move.from, move.to);<br>        }<br>    }<br>}<br></pre>



      <br><ul><li><a name="2_Python"></a>雙色河內塔 Python<br>
</li></ul><pre>def hanoi(n, a, b, c):<br>    if n == 1:<br>        return [(a, c)]<br>    else:<br>        return hanoi(n - 1, a, c, b) + hanoi(1, a, b, c) + hanoi(n - 1, b, a, c)<br>        <br>def hanoi2Colors(n):<br>    a, b, c= 'A', 'B', 'C'<br>    l = [hanoi(i - 1, a, b, c) + [(a, b), (a, b)] <br>       + hanoi(i - 1, c, b, a) + [(b, c)] for i in range(n // 2, 1, -1)]<br>    return [item for subList in l for item in subList] + [(a, b), (a, c)]<br>    <br>for move in hanoi2Colors(int(input('盤數：'))):<br>    print("盤由 %c 移至 %c" % move)</pre>



      
      <br><ul><li><a name="2_Scala"></a>雙色河內塔 Scala<br>
</li></ul><pre>def hanoi(n: Int, a: Char, b: Char, c: Char): List[(Char, Char)] = {<br>    if(n == 1) List((a, c))<br>    else hanoi(n - 1, a, c, b) ++ hanoi(1, a, b, c) ++ hanoi(n - 1, b, a, c)<br>}<br><br>def hanoi2Colors(n: Int) = {<br>    val (a, b, c) = ('A', 'B', 'C')<br>    val list = for(i &lt;- n / 2 until (1, -1)) yield (hanoi(i - 1, a, b, c)<br>          ++ List((a, b), (a, b)) ++ hanoi(i - 1, c, b, a) ++ List((b, c)))<br>    list.flatten ++ List((a, b), (a, c))<br>}<br><br>print("盤數：")<br>hanoi2Colors(readInt).foreach(_ match {<br>    case (from, to) =&gt; printf("盤由 %c 移到 %c%n", from, to)<br>})</pre><br>
      <ul>
        <li><a name="2_Ruby"></a>雙色河內塔 Ruby<br>
</li>
      </ul>
      <pre>#encoding: Big5<br><br>def step(f, t)<br>    {from: f, to: t}<br>end<br><br>def hanoi(n, a, b, c)<br>    if n == 1<br>        [step(a, c)]<br>    else<br>        hanoi(n - 1, a, c, b) + hanoi(1, a, b, c) + hanoi(n - 1, b, a, c)<br>    end<br>end<br>        <br>def hanoi2Colors(n)<br>    a, b, c = "A", "B", "C"<br>    (2..(n / 2)).to_a.reverse.map { |i|<br>        hanoi(i - 1, a, b, c) + [step(a, b), step(a, b)] + hanoi(i - 1, c, b, a) <br>        + [step(b, c)]<br>    }.flatten + [step(a, b), step(a, c)]<br>end<br>    <br>print "盤數："<br>hanoi2Colors(gets.to_i).each do |move|<br>    print "盤子從 #{move[:from]} 移動至 #{move[:to]}\n"<br>end<br></pre>
      <br>
      <ul>
        <li><a name="2_JavaScript"></a>雙色河內塔 JavaScript</li>
      </ul>
      <pre>Array.prototype.reduce = function(init, f) {<br>    var value = init;<br>    for(var i = 0; i &lt; this.length; i++) {<br>        value = f(value, this[i]);<br>    }<br>    return value;<br>};<br>    <br>function step(f, t) {<br>    return {from: f, to: t};<br>}<br><br>function range(from, to) {<br>    var r = [];<br>    if(to &gt; from) for(var c = 0, i = from; i &lt; to; c++, i++) { r[c] = i; } <br>    else for(var c = 0, i = from; i &gt; to; c++, i--) { r[c] = i; }<br>    return r;<br>}<br><br>function hanoi(n, a, b, c) {<br>    if(n === 1) {<br>        return [step(a, c)];<br>    } else {<br>        return hanoi(n - 1, a, c, b).concat(<br>                 hanoi(1, a, b, c), hanoi(n - 1, b, a, c));<br>    }<br>}<br><br>function hanoi2Colors(n) {<br>    var a = 'A'; var b = 'B'; var c = 'C';<br>    return range(n / 2, 1).map(function(i) {<br>        return hanoi(i - 1, a, b, c).concat([step(a, b), step(a, b)], <br>                hanoi(i - 1, c, b, a), [step(b, c)]);<br>    }).reduce([], function(ac, l) {<br>        return ac.concat(l);<br>    }).concat([step(a, b), step(a, c)]);<br>}<br><br>hanoi2Colors(6).forEach(function(step) {<br>   print('盤從 ' + step.from + ' 移至 ' + step.to);<br>});<br></pre>
      <br>
      <ul>
        <li><a name="2_Haskell"></a>雙色河內塔 Haskell</li>
      </ul>
      <pre>import Text.Printf<br><br>hanoi 1 a _ c = [(a, c)]<br>hanoi n a b c = hanoi (n - 1) a c b ++ hanoi 1 a b c ++ hanoi (n - 1) b a c<br><br>hanoi2Colors n = [item | subList &lt;- list, item &lt;- subList] ++ [(a, b), (a, c)]<br>    where (a, b, c) = ('A', 'B', 'C')<br>          begin = n `div` 2<br>          list = [hanoi (i - 1) a b c ++ [(a, b), (a, b)] ++ hanoi (i - 1) c b a <br>              ++ [(b, c)] |i &lt;- [begin, (begin - 1) .. 2]]<br>    <br>main = do <br>  putStrLn "Please enter a number: "<br>  n &lt;- getLine<br>  sequence [printf "Move from %c to %c\n" from to <br>               | (from, to) &lt;- hanoi2Colors (read n)]<br></pre>
<br>

------------------------------------------------------------------------------------------------------------------<br>
<br>



      
      <ul>
        <li><a name="3_C"></a> 三色河內塔 C
  </li>
</ul>



      
      <pre>#include &lt;stdio.h&gt;<br><br>void print(char from, char to) {<br>    printf("盤由 %c 移至 %c\n", from, to);<br>}<br><br>void hanoi(int n, char a, char b, char c) {<br>    if(n != 0) {<br>        if (n == 1) {<br>            print(a, c);<br>            print(a, c);<br>            print(a, c);<br>        } else {<br>            hanoi(n - 1, a, c, b);<br>            hanoi(1, a, b, c);<br>            hanoi(n - 1, b, a, c);<br>        }<br>    }<br>}<br><br>void hanoi3colors(int n) {<br>    char a = 'A';<br>    char b = 'B';<br>    char c = 'C';<br>    <br>    if(n == 3) {<br>        print(a, b);<br>        print(a, b);<br>        print(a, c);<br>        print(b, c);<br>        print(b, a);<br>        print(c, b);<br>    }<br>    else {<br>        hanoi(n / 3 - 1, a, b, c);<br>        print(a, b);<br>        print(a, b);<br>        print(a, b);<br><br>        hanoi(n / 3 - 1, c, b, a);<br>        print(b, c);<br>        print(b, c);<br>        print(b, c);<br><br>        hanoi(n / 3 - 1, a, c, b);<br>        print(c, a);<br>        print(c, a);<br><br>        hanoi(n / 3 - 1, b, a, c);<br>        print(a, b);<br>        int i;<br>        for(i = n / 3 - 1; i &gt; 0; i--) {<br>            hanoi(i - 1, c, a, b);<br>            print(c, a);<br>            print(c, a);<br>            hanoi(i - 1, b, a, c); <br>            print(a, b);<br>        }<br>    }<br>}<br><br>int main() {<br>    int n;<br>    printf("盤數：");<br>    scanf("%d", &amp;n);<br><br>    hanoi3colors(n);<br>    <br>    return 0;<br>} <br></pre>



<br><ul>

        <li><a name="3_Java"></a> 三色河內塔 Java
  </li>

      
      </ul>



      
      <pre>import java.util.*;<br>import static java.lang.System.out;<br><br>public class Hanoi3Colors {<br>    static class Move {<br>        char from, to;<br>        Move(char from, char to) {<br>            this.from = from;<br>            this.to = to;<br>        }<br>    }<br>    <br>    private List&lt;Move&gt; moves;<br>    <br>    List&lt;Move&gt; solve(int n) {<br>        moves = new ArrayList&lt;Move&gt;();<br>        hanoi3Colors(n);<br>        return moves;<br>    }<br>        <br>    public void hanoi(int n, char a, char b, char c) {<br>        if(n != 0) {<br>            if (n == 1) {<br>                moves.add(new Move(a, c));<br>                moves.add(new Move(a, c));<br>                moves.add(new Move(a, c));<br>            } else {         <br>                hanoi(n - 1, a, c, b);<br>                hanoi(1, a, b, c);<br>                hanoi(n - 1, b, a, c);<br>            }<br>        }<br>    }<br> <br>    public void hanoi3Colors(int n) {<br>        char a = 'A';<br>        char b = 'B';<br>        char c = 'C';<br>        if(n == 3) {<br>            moves.add(new Move(a, b));<br>            moves.add(new Move(a, b));<br>            moves.add(new Move(a, c));<br>            moves.add(new Move(b, c));<br>            moves.add(new Move(b, a));<br>            moves.add(new Move(c, b));<br>        }<br>        else {<br>            hanoi(n / 3 - 1, a, b, c);<br>            moves.add(new Move(a, b));<br>            moves.add(new Move(a, b));<br>            moves.add(new Move(a, b));<br>            <br>            hanoi(n / 3 - 1, c, b, a);<br>            moves.add(new Move(b, c));<br>            moves.add(new Move(b, c));<br>            moves.add(new Move(b, c));<br>            <br>            hanoi(n / 3 - 1, a, c, b);<br>            moves.add(new Move(c, a));<br>            moves.add(new Move(c, a));<br>            <br>            hanoi(n / 3 - 1, b, a, c);<br>            moves.add(new Move(a, b));<br>            for (int i = n / 3 - 1; i &gt; 0; i--) {<br>                hanoi(i - 1, c, a, b);<br>                moves.add(new Move(c, a));<br>                moves.add(new Move(c, a));<br>                hanoi(i - 1, b, a, c);<br>                moves.add(new Move(a, b));<br>            }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        out.print("盤數：");<br>        Hanoi3Colors hanoi3Colors = new Hanoi3Colors();<br>        int n = new Scanner(System.in).nextInt();<br>        for(Move move : hanoi3Colors.solve(n)) {<br>            out.printf("盤由 %c 移至 %c%n", move.from, move.to);<br>        }<br>    }<br>}<br></pre><br><ul><li><a name="3_Python"></a>三色河內塔 Python<br>
</li></ul><pre>def flatten(list):<br>    return [item for sublist in list for item in sublist]<br><br>def hanoi(n, a, b, c):<br>    if n == 0:<br>        return []<br>    else:<br>        if n == 1:<br>            return [(a, c), (a, c), (a, c)]<br>        else:<br>            return hanoi(n - 1, a, c, b) + hanoi(1, a, b, c) \<br>                   + hanoi(n - 1, b, a, c)<br>        <br>def hanoi3Colors(n):<br>    a, b, c= 'A', 'B', 'C'<br>    if n == 3:<br>        return [(a, b), (a, b), (a, c), (b, c), (b, a), (c, b)]<br>    else:<br>        return hanoi(n / 3 - 1, a, b, c) + [(a, b), (a, b), (a, b)] + \<br>               hanoi(n / 3 - 1, c, b, a) + [(b, c), (b, c), (b, c)] + \<br>               hanoi(n / 3 - 1, a, c, b) + [(c, a), (c, a)] + \<br>               hanoi(n / 3 - 1, b, a, c) + [(a, b)] + \<br>               flatten([hanoi(i - 1, c, a, b) + [(c, a), (c, a)] + <br>                   hanoi(i - 1, b, a, c) + [(a, b)] <br>                     for i in range(n // 3 - 1, 0, -1)])<br>    <br>for move in hanoi3Colors(int(input('盤數：'))):<br>    print("盤由 %c 移至 %c" % move)</pre><br><ul><li><a name="3_Scala"></a>三色河內塔 Scala<br>
</li></ul><pre>def hanoi(n: Int, a: Char, b: Char, c: Char): List[(Char, Char)] = {<br>    if(n == 0) Nil<br>    else {<br>        if(n == 1) List((a, c), (a, c), (a, c))<br>        else hanoi(n - 1, a, c, b) ++ <br>             hanoi(1, a, b, c) ++ hanoi(n - 1, b, a, c)<br>    }<br>}<br><br>def hanoi3Colors(n: Int) = {<br>    val (a, b, c) = ('A', 'B', 'C')<br>    if(n == 3) List((a, b), (a, b), (a, c), (b, c), (b, a), (c, b))<br>    else {<br>        hanoi(n / 3 - 1, a, b, c) ++ List((a, b), (a, b), (a, b)) ++ <br>        hanoi(n / 3 - 1, c, b, a) ++ List((b, c), (b, c), (b, c)) ++ <br>        hanoi(n / 3 - 1, a, c, b) ++ List((c, a), (c, a)) ++<br>        hanoi(n / 3 - 1, b, a, c) ++ List((a, b)) ++ <br>        (for(i &lt;- n / 3 - 1 until (0, -1)) yield (hanoi(i - 1, c, a, b) ++ <br>          List((c, a), (c, a)) ++ hanoi(i - 1, b, a, c) ++ List((a, b)))).flatten<br>    }<br>}<br><br>print("盤數：")<br>hanoi3Colors(readInt).foreach(_ match {<br>    case (from, to) =&gt; printf("盤由 %c 移到 %c%n", from, to)<br>})</pre><br>
      <ul>
        <li><a name="3_Ruby"></a>三色河內塔 Ruby</li>
      </ul>
      <pre>#encoding: Big5<br><br>def step(f, t)<br>    {from: f, to: t}<br>end<br><br>def hanoi(n, a, b, c)<br>    if n == 0<br>        []<br>    else<br>        if n == 1<br>            [step(a, c), step(a, c), step(a, c)]<br>        else<br>            hanoi(n - 1, a, c, b) + hanoi(1, a, b, c) + hanoi(n - 1, b, a, c)<br>        end<br>    end<br>end<br>        <br>def hanoi3Colors(n)<br>    a, b, c = "A", "B", "C"<br>    if n == 3<br>        [step(a, b), step(a, b), step(a, c), <br>         step(b, c), step(b, a), step(c, b)]<br>    else<br>        hanoi(n / 3 - 1, a, b, c) + [step(a, b), step(a, b), step(a, b)] + <br>        hanoi(n / 3 - 1, c, b, a) + [step(b, c), step(b, c), step(b, c)] + <br>        hanoi(n / 3 - 1, a, c, b) + [step(c, a), step(c, a)] +<br>        hanoi(n / 3 - 1, b, a, c) + [step(a, b)] +<br>        (1..(n / 3 - 1)).to_a.reverse.map { |i|<br>            hanoi(i - 1, c, a, b) + [step(c, a), step(c, a)] +<br>            hanoi(i - 1, b, a, c) + [step(a, b)]<br>        }.flatten<br>    end<br>end<br>    <br>print "整數："<br>hanoi3Colors(gets.to_i).each do |move|<br>    print "盤子從 #{move[:from]} 移動至 #{move[:to]}\n"<br>end<br></pre>
      <br>
      <ul>
        <li><a name="3_JavaScript"></a>三色河內塔 JavaScript</li>
      </ul>
      <pre>Array.prototype.reduce = function(init, f) {<br>    var value = init;<br>	for(var i = 0; i &lt; this.length; i++) {<br>        value = f(value, this[i]);<br>    }<br>	return value;<br>};<br>    <br>function step(f, t) {<br>    return {from: f, to: t};<br>}<br><br>function range(from, to) {<br>    var r = [];<br>    if(to &gt; from) for(var c = 0, i = from; i &lt; to; c++, i++) { r[c] = i; } <br>    else for(var c = 0, i = from; i &gt; to; c++, i--) { r[c] = i; }<br>    return r;<br>}<br><br>function hanoi(n, a, b, c) {<br>    if(n === 0) {<br>        return [];<br>    } else {<br>        if(n === 1) {<br>            return [step(a, c), step(a, c), step(a, c)];<br>        } else {<br>            return hanoi(n - 1, a, c, b).concat(<br>                    hanoi(1, a, b, c), hanoi(n - 1, b, a, c));<br>        }<br>    }<br>}<br><br>function hanoi3Colors(n) {<br>    var a = 'A'; var b = 'B'; var c = 'C';<br>    if(n === 3) {<br>        return [step(a, b), step(a, b), step(a, c), <br>         step(b, c), step(b, a), step(c, b)];<br>    }<br>    else {<br>        return hanoi(n / 3 - 1, a, b, c).concat(<br>            [step(a, b), step(a, b), step(a, b)],<br>            hanoi(n / 3 - 1, c, b, a), <br>            [step(b, c), step(b, c), step(b, c)],<br>            hanoi(n / 3 - 1, a, c, b), <br>            [step(c, a), step(c, a)],<br>            hanoi(n / 3 - 1, b, a, c), <br>            [step(a, b)], <br>            range(n / 3 - 1, 0).map(function(i) {<br>                return hanoi(i - 1, c, a, b).concat(<br>                        [step(c, a), step(c, a)], <br>                        hanoi(i - 1, b, a, c), [step(a, b)]);<br>            }).reduce([], function(ac, l) {<br>                return ac.concat(l);<br>            })<br>        );<br>    }<br>}<br><br>hanoi3Colors(6).forEach(function(step) {<br>   print('盤從 ' + step.from + ' 移至 ' + step.to);<br>});<br></pre>
      <br>
      <ul>
        <li><a name="3_Haskell"></a>三色河內塔 Haskell</li>
      </ul>
      <pre>import Text.Printf<br><br>hanoi 0 _ _ _ = []<br>hanoi 1 a _ c = [(a, c), (a, c), (a, c)]<br>hanoi n a b c = hanoi (n - 1) a c b ++ hanoi 1 a b c ++ hanoi (n - 1) b a c<br><br>hanoi3Colors n = case n of <br>    3 -&gt; [(a, b), (a, b), (a, c), (b, c), (b, a), (c, b)]<br>    n -&gt; hanoi begin a b c ++ [(a, b), (a, b), (a, b)] ++ <br>         hanoi begin c b a ++ [(b, c), (b, c), (b, c)] ++ <br>         hanoi begin a c b ++ [(c, a), (c, a)] ++<br>         hanoi begin b a c ++ [(a, b)] ++ <br>         [item | subList &lt;- list, item &lt;- subList]<br>    where (a, b, c) = ('A', 'B', 'C')<br>          begin = n `div` 3 - 1<br>          list = [hanoi (i - 1) c a b ++ [(c, a), (c, a)] <br>              ++ hanoi (i - 1) b a c ++ <br>              [(a, b)] |i &lt;- [begin, (begin - 1) .. 1]]<br>    <br>main = do <br>  putStrLn "Please enter a number: "<br>  n &lt;- getLine<br>  sequence [printf "Move from %c to %c\n" from to <br>               | (from, to) &lt;- hanoi3Colors (read n)]<br></pre>
      <br>
<br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>





      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>


      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>


      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/MultiColorHanoiTower.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:48 GMT -->
</html>