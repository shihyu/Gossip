<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/RadixSort.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:06 GMT -->
<head>










  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">








  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">








  
  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>基數排序法</title></head><body>








<h3><a href="../index.html">From
Gossip@Openhome</a></h3>








<h1><a href="index-2.html">Algorithm Gossip:&nbsp;基數排序法</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 
      
      <h2>說明</h2>

      <small>


在之前所介紹過的排序方法，都是屬於「比較性」的排序法，也就是每次排序時 ，都是比較整個鍵值的大小以進行排序。<br>

      <br>




這邊所要介紹的「基數排序法」（radix sort）則是屬於「分配式排序」（distribution
sort），基數排序法會使用到「桶子」（bucket），顧名思義，它是透過鍵值的部份資訊，將要排序的元素分配至某些「桶」中，藉以達到排序的作用，基數排序法是屬於穩定性的排序，其時間複雜度為O
(nlog(r)m)，其中r為所採取的基數，而m為堆數，在某些時候，基數排序法的效率高於其它的比較性排序法。</small>


      <br>




      
      <h2>解法</h2>

      <small>


基數排序的方式可以採用LSD（Least sgnificant digital）或MSD（Most sgnificant digital），LSD的排序方式由鍵值的最右邊開始，而MSD則相反，由鍵值的最左邊開始。<br>

      <br>




以LSD為例，假設原來有一串數值如下所示：<br>

      </small>





      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">73, 22, 93, 43, 55, 14, 28, 65, 39, 81</span><br>




      </small></div>




      <small><br>




首先根據個位數的數值，在走訪數值時將它們分配至編號0到9的桶子中：</small><br>





      
      <table border="1" width="100%">



  <tbody>



    <tr>



      <td align="left" valign="top"><small>0 </small></td>




      <td align="left" valign="top"><small>1 </small></td>




      <td align="left" valign="top"><small>2 </small></td>




      <td align="left" valign="top"><small>3 </small></td>




      <td align="left" valign="top"><small>4 </small></td>




      <td align="left" valign="top"><small>5 </small></td>




      <td align="left" valign="top"><small>6 </small></td>




      <td align="left" valign="top"><small>7 </small></td>




      <td align="left" valign="top"><small>8 </small></td>




      <td align="left" valign="top"><small>9 </small></td>




    </tr>




    <tr>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small>81 </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small>65 </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small>39 </small></td>




    </tr>




    <tr>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small>43 </small></td>




      <td align="left" valign="top"><small>14 </small></td>




      <td align="left" valign="top"><small>55 </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small>28 </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




    </tr>




    <tr>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small>93 </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




    </tr>




    <tr>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small>22 </small></td>




      <td align="left" valign="top"><small>73 </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




    </tr>




  
  
  
        
        </tbody>
      
      </table>




      <br>

      <small>

接下來將這些桶子中的數值重新串接起來，成為以下的數列： <br>

      <em><strong></strong></em></small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">81, 22, 73, 93, 43, 14, 55, 65, 28, 39</span><br>



      </small></div>




      <small><br>



接著再進行一次分配，這次是根據十位數來分配：</small><br>




      
      <table border="1" width="100%">




  <tbody>




    <tr>




      <td align="left" valign="top"><small>0 </small></td>




      <td align="left" valign="top"><small>1 </small></td>




      <td align="left" valign="top"><small>2 </small></td>




      <td align="left" valign="top"><small>3 </small></td>




      <td align="left" valign="top"><small>4 </small></td>




      <td align="left" valign="top"><small>5 </small></td>




      <td align="left" valign="top"><small>6 </small></td>




      <td align="left" valign="top"><small>7 </small></td>




      <td align="left" valign="top"><small>8 </small></td>




      <td align="left" valign="top"><small>9 </small></td>




    </tr>




    <tr>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small> </small><br>
</td>




      <td align="left" valign="top"><small> </small><small>28</small></td>




      <td align="right" valign="top"><small>39</small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




    </tr>




    <tr>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small>14 </small></td>




      <td align="left" valign="top"><small>22 </small></td>




      <td align="right" valign="top"><small> <br>




      </small></td>




      <td align="left" valign="top"><small>43 </small></td>




      <td align="left" valign="top"><small>55 </small></td>




      <td align="left" valign="top"><small>65 </small></td>




      <td align="left" valign="top"><small>73 </small></td>




      <td align="left" valign="top"><small>81 </small></td>




      <td align="left" valign="top"><small>93 </small></td>




    </tr>




  
  
  
        
        </tbody>
      
      </table>




      <br>

      <small>

接下來將這些桶子中的數值重新串接起來，成為以下的數列： <br>

      <em><strong></strong></em></small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">14, 22, 28, 39, 43, 55, 65, 73, 81, 93 </span><br>



      </small></div>




      <small><br>



這時候整個數列已經排序完畢；如果排序的對象有三位數以上，則持續進行以上的動作直至最高位數為止。 <br>

      <br>



LSD的基數排序適用於位數小的數列，如果位數多的話，使用MSD的效率會比較好，MSD的方式恰與LSD相反，是由高位數為基底開始進行分配，其他的演
算方式則都相同。 </small>

      <br>




      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Scala"><a href="#Ruby">Ruby</a><br>
      </a></h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>void radixSort(int[]);<br><br>int main(void) { <br>    int data[10] = {73, 22, 93, 43, 55, 14, 28, 65, 39, 81}; <br>      <br>    printf("\n排序前: "); <br>    int i;<br>    for(i = 0; i &lt; 10; i++) <br>        printf("%d ", data[i]); <br><br>    putchar('\n'); <br><br>    radixSort(data);<br>    <br>    printf("\n排序後: "); <br>    for(i = 0; i &lt; 10; i++) <br>        printf("%d ", data[i]); <br><br>    return 0; <br>} <br><br>void radixSort(int data[]) {<br>    int temp[10][10] = {0}; <br>    int order[10] = {0}; <br>    <br>    int n = 1; <br>    while(n &lt;= 10) { <br>        <br>        int i;<br>        for(i = 0; i &lt; 10; i++) { <br>            int lsd = ((data[i] / n) % 10); <br>            temp[lsd][order[lsd]] = data[i]; <br>            order[lsd]++; <br>        } <br>        <br>        // 重新排列<br>        int k = 0;<br>        for(i = 0; i &lt; 10; i++) { <br>            if(order[i] != 0)  {<br>                int j;<br>                for(j = 0; j &lt; order[i]; j++, k++) { <br>                    data[k] = temp[i][j]; <br>                } <br>            }<br>            order[i] = 0; <br>        } <br><br>        n *= 10; <br>    }     <br>}<br></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre>public class Sort {<br>    public static void radix(int[] number, int d) {<br>        int k = 0;<br>        int n = 1;<br>        <br>        int[][] temp = new int[number.length][number.length];<br>        int[] order = new int[number.length];<br>        <br>        while(n &lt;= d) { <br>            for(int num : number) { <br>                int lsd = (num / n) % 10; <br>                temp[lsd][order[lsd]] = num; <br>                order[lsd]++; <br>            } <br><br>            for(int i = 0; i &lt; number.length; i++) { <br>                if(order[i] != 0) {<br>                    for(int j = 0; j &lt; order[i]; j++) { <br>                        number[k] = temp[i][j];  <br>                        k++; <br>                    } <br>                }<br>                order[i] = 0; <br>            } <br><br>            n *= 10; <br>            k = 0; <br>        } <br>    }<br><br>    public static void main(String[] args) {<br>        int[] data = {73, 22, 93, 43, 55, 14, 28, 65, 39, 81, 33, 100}; <br>        Sort.radix(data, 100);<br>        for(int i : data) {<br>            System.out.print(i + " ");   <br>        }<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def sort(number, d):<br>    length = len(number)<br>    k = 0<br>    n = 1<br>    temp = []<br>    for i in range(length):<br>        temp.append([0] * length)<br>    order = [0] * length<br>    while n &lt;= d:<br>        for i in range(length):<br>            lsd = (number[i] // n) % 10<br>            temp[lsd][order[lsd]] = number[i]<br>            order[lsd] += 1<br>        for i in range(length):<br>            if order[i] != 0:<br>                for j in range(order[i]):<br>                    number[k] = temp[i][j]<br>                    k += 1<br>            order[i] = 0<br>        n *= 10<br>        k = 0<br>        <br>number = [73, 22, 93, 43, 55, 14, 28, 65, 39, 81, 33, 100]<br>sort(number, 100)<br>print(number)<br></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>object Sort {<br>    def radix(number: Array[Int], d: Int) {<br>        var k = 0<br>        var n = 1<br>        val temp = new Array[Array[Int]](number.length, number.length)<br>        val order = new Array[Int](number.length)<br>        while(n &lt;= d) {<br>            number.foreach(num =&gt; {<br>                val lsd = (num / n) % 10<br>                temp(lsd)(order(lsd)) = num<br>                order(lsd) += 1<br>            })<br>            for(i &lt;- 0 until number.length) {<br>                if(order(i) != 0) {<br>                    for(j &lt;- 0 until order(i)) {<br>                        number(k) = temp(i)(j)<br>                        k += 1<br>                    }<br>                }<br>                order(i) = 0<br>            }<br>            n *= 10<br>            k = 0<br>        }<br>    }<br>}<br><br>val data = Array(73, 22, 93, 43, 55, 14, 28, 65, 39, 81, 33, 100)<br>Sort.radix(data, 100)<br>data.foreach(x =&gt; print(x + " "))</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>def sort(number, d)<br>    length = number.length<br>    k = 0<br>    n = 1<br>    temp = Array.new(length) {<br>        Array.new(length, 0)<br>    }<br>    order = Array.new(length, 0)<br>    while n &lt;= d<br>        length.times { |i|<br>            lsd = (number[i] / n) % 10<br>            temp[lsd][order[lsd]] = number[i]<br>            order[lsd] += 1<br>        }<br>        length.times { |i|<br>            if order[i] != 0<br>                order[i].times { |j|<br>                    number[k] = temp[i][j]<br>                    k += 1<br>                }<br>            end<br>            order[i] = 0<br>        }<br>        n *= 10<br>        k = 0<br>    end<br>end<br><br>number = [73, 22, 93, 43, 55, 14, 28, 65, 39, 81, 33, 100]<br>sort(number, 100)<br>p number<br></pre>
<br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>





      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>



      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>




<br>








<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/RadixSort.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:06 GMT -->
</html>