<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JSF/EncodeDecode.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:18:20 GMT -->
<head>






  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">






  
  
  
  
  
  
  <title>編碼、解碼</title>
</head>


<body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">JSF Gossip:&nbsp;編碼、解碼 </a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 250px; text-align: center; vertical-align: top;"><script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br><br>
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>




      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>




      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>




      <br>



      
      
      
      <center>
      
      
      
       <br>




      </center>




 </td>


      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>




Component可以自己負責將物件資料編碼為HTML文件或其它的輸出文件，也可以將這個任務委託給 Renderer，這邊先介紹的是讓Component自己負責編碼的動作。<br>

      <br>


這邊著重的是介紹完成自訂元件所必須的流程，所以我們不設計太複雜的元件，這邊將完成以下的元件，這個元件會有一個輸入文字欄位以及一個送出按鈕：<br>

      <img style="width: 149px; height: 33px;" alt="" src="images/encodeDecode-1.jpg"><br>

      <br>







您要繼承UIComponent或其子類別來自訂Component，由於文字欄位是一個輸入欄位，為了方便，您可以繼承UIInput類別，這可以讓您
省去一些處理細節的功夫，在繼承UIComponent或其子類別後，與編碼相關的主要有三個方法：<br>

      </small>








      
      <ul>

        <li><small> encodeBegin()
  </small></li>

        <li><small> encodeChildren()
  </small></li>

        <li><small> encodeEnd()
  </small></li>

      
      </ul>


      <small><br>


其中encodeChildren()是在包括子元件時必須定義，Component如果它的
getRendersChildren()方法傳回true時會呼叫encodeChildren()方法，預設上，
getRendersChildren()方法傳回false。<br>

      <br>


由於我們的自訂元件相當簡單，所以將編碼的動作寫在encodeBegin()或是encodeEnd()都可以，我們這邊是定義encodeBegin ()方法：</small>
      <br>


      
      <ul>

        <li> UITextWithCmd.java</li>

      
      </ul>






      
      <pre>package onlyfun.caterpillar;<br><br>import java.io.IOException;<br>import java.util.Map;<br>import javax.faces.component.UIInput;<br>import javax.faces.context.FacesContext;<br>import javax.faces.context.ResponseWriter;<br><br>public class UITextWithCmd extends UIInput {<br>    private static final String TEXT = ".text";<br>    private static final String CMD = ".cmd";<br>    <br>    public UITextWithCmd() {<br>        setRendererType(null);   <br>    }<br>    <br>    public void encodeBegin(FacesContext context) <br>                                      throws IOException {<br>        ResponseWriter writer = context.getResponseWriter();<br>        String clientId = getClientId(context);<br>        <br>        encodeTextField(writer, clientId);<br>        encodeCommand(writer, clientId);<br>    }<br>    <br>    public void decode(FacesContext context) {<br>        // .....<br>    }<br>    <br>    private void encodeTextField(ResponseWriter writer, <br>                        String clientId) throws IOException {<br>        writer.startElement("input", this);<br>        writer.writeAttribute("name", clientId + TEXT, null);<br>        <br>        Object value = getValue();<br>        if(value != null) {<br>            writer.writeAttribute("value", <br>                                  value.toString(), null);<br>        }<br>        <br>        String size = (String) getAttributes().get("size");<br>        if(size != null) {<br>            writer.writeAttribute("size", size, null);   <br>        }<br>        <br>        writer.endElement("input");<br>    }<br>    <br>    private void encodeCommand(ResponseWriter writer, <br>                        String clientId) throws IOException {<br>        writer.startElement("input", this);<br>        writer.writeAttribute("type", "submit", null);<br>        writer.writeAttribute("name", clientId + CMD, null);<br>        writer.writeAttribute("value", "submit", null);<br>        writer.endElement("input");<br>    }<br>}</pre>






      <br>

      <small>
在encodeBegin()方法中，我們取得ResponseWriter物件，這個物件可以協助您輸出HTML標籤、屬性等，我們使用 getClientId()取得元件的id，這個id是每個元件的唯一識別，預設上如果您沒有指定，則JSF會自動為您產生id值。<br>

      <br>


接著我們分別對輸入文字欄位及送出鈕作HTML標籤輸出，在輸出時，我們將name屬性設成clientId與一個字串值的結合（即TEXT或CMD），這是為了方便在解碼時，取得對應name屬性的請求值。<br>

      <br>


在encodeTextField中我們有呼叫getValue()方法，這個方法是從UIOutput繼承下來的，getValue()
方法可以取得Component的設定值，這個值可能是靜態的屬性設定值，也可能是JSF
Expression的綁定值，預設會先從元件的屬性設定值開始找尋，如果找不到，再從綁定值（ValueBinding物件）中找尋，元件的屬性值或綁
定值的設定，是在定義Tag時要作的事。<br>

      <br>


編碥的部份總結來說，是取得Component的值並作適當的HTML標籤輸出，再來我們看看解碼的部份，這是定義在decode()方法中，將下面的內容加入至上面的類別定義中：<br>

      </small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public void decode(FacesContext context) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map reqParaMap = context.getExternalContext().</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
getRequestParameterMap();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String clientId = getClientId(context);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String submittedValue = </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(String) reqParaMap.get(clientId + TEXT);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setSubmittedValue(submittedValue);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValid(true);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br>


      </small></div>


      <small><br>


我們必須先取得RequestParameterMap，這個Map物件中填入了所有客戶端傳來的請求參數，
Component在這個方法中有機會查詢這些請求參數中，是否有自己所想要取得的資料，記得我們之前解碼時，是將輸入欄位的name屬性解碼為
client id加上一個字串值（即TEXT設定的值），所以這時，我們嘗試從RequestParameterMap中取得這個請求值。<br>

      <br>


取得請求值之後，您可以將資料藉由setSumittedValue()設定給綁定的bean，最後呼叫setValid()方法，這個方法設定為 true時，表示元件正確的獲得自己的值，沒有任何的錯誤發生。<br>

      <br>


由於我們先不使用Renderer，所以在建構函式中，我們設定RendererType為null，表示我們不使用Renderer進行解碼輸出：<br>

      </small>


      
      <div style="margin-left: 40px; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; public UITextWithCmd() {</span><br style="font-weight: bold;">


      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setRendererType(null);&nbsp;&nbsp; </span><br style="font-weight: bold;">


      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold;">


      </small></div>

      <small>
&nbsp;<br>

      <br>


在我們的例子中，我們都是處理字串物件，所以這邊不需要轉換器，如果您需要使用轉換器，可以呼叫setConverter()方法加以設定，在不使用 Renderer的時候，Component要設定轉換器來自行進行字串與物件的轉換。</small>
      <br>

      </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JSF/EncodeDecode.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:18:21 GMT -->
</html>
