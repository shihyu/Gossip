<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/ComputerGraphics/TwoDimTurtle.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:06:24 GMT -->
<head>




















  
  
  
  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">











  
  
  
  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">











  
  
  
  
  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>二維海龜繪圖法</title></head><body>











<h3><a href="../index.html">From
Gossip@Openhome</a></h3>











<h1><a href="index-2.html">Computer Graphics:&nbsp;二維海龜繪圖法</a></h1>




<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">




  <tbody>




    <tr>




      <td style="width: 250px; text-align: center; vertical-align: top;"><script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br><br>
      
      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>







      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>







      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>







      <br>






      
      
      
      
      
      
      <center>
      
      
      
      
      
      
       <br>







      </center>







 </td>




      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>







海龜繪圖法取名海龜並不是因為它的速度像烏龜，而是它繪圖的方式就像海龜前進的方式。<br>



      <br>




考慮海龜只能前進的情況（我也不知道海龜能不能倒著游？），在2D的情況下，也就是海龜只在一個XY平面運動的情況下，海龜的運動基本上只有前進與轉彎兩個動作，由此開始聯想，定出海龜繪圖法的幾個基本方法： <br>



      <br>



      </small>
















      
      
      
      <ul>



        <li><small>設定海龜起始位置</small></li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;"><small>也就是將海龜直接放至某個(x, y)座標，而不進行任何的繪製動作。 <br>




      <img style="width: 185px; height: 79px;" alt="" src="images/twoDimTurtle-1.jpg"><br>




      </small></div>



















      <small><span class="postbody"></span><br>



      <br>



      </small>

      
      
      
      <ul>



        <li><small>海龜由目前位置游至指定座標</small></li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;"><small>由目前位置游至(x, y)位置，並在經過的路徑畫上直線。 <br>




      <img style="width: 183px; height: 81px;" alt="" src="images/twoDimTurtle-2.jpg"><br>




      </small></div>




      <small><br>



      <br>



      </small>

      
      
      
      <ul>



        <li><small>海龜由目前位置游動L長度</small></li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;"><small>無論海龜目前的頭朝向哪一個角度，由目前位置與角度游動L長度，並在經過的路徑上畫上直線。<br>




      <img style="width: 184px; height: 82px;" alt="" src="images/twoDimTurtle-3.jpg"><br>




      </small></div>




      <small><br>



      <br>



      </small>

      
      
      
      <ul>



        <li><small>設定海龜目前頭朝向的角度</small></li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;"><small>角度的計算是以正X軸及頭所成的角度來計算。 <br>




      <img style="width: 181px; height: 102px;" alt="" src="images/twoDimTurtle-4.jpg"><br>




      </small></div>




      <small><br>



      <br>



      </small>

      
      
      
      <ul>



        <li><small>旋轉海龜的頭為指定的角度θ</small></li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;"><small>即目前已成的角度 a 再加上θ，也就是與正X軸最後會成a+θ。 <br>




      <img style="width: 183px; height: 113px;" alt="" src="images/twoDimTurtle-5.jpg"><br>




      </small></div>




      <small><br>



      <br>





有了以上幾個基本方法，就可以進行各種圖案的繪圖，或是直接擴充海龜繪圖的方法，例如若要在目前的位置上繪製出一個正三角型，由海龜游動的方式，&nbsp;可以如下繪製圖形： <br>



      <img style="width: 320px; height: 259px;" alt="" src="images/twoDimTurtle-6.jpg"><br>



      <br>




如果要繪製實心的三角形，在撰寫方法時，在海龜游動的同時，記下三個頂點的座標，再呼叫API所提供的繪製實心多邊形方法即可。<br>



      <br>




如果要繪製點，可以如下結合兩個基本的海龜繪圖方法： <br>



      <img style="width: 182px; height: 81px;" alt="" src="images/twoDimTurtle-7.jpg"><br>



      <br>




依照以下的描述，您可以自由撰寫並擴充您的海龜繪圖法，使繪圖的功能更加豐富，下面這個Java程式改寫自 <a href="http://www.drmaster.com.tw/info.asp?no=PG20098">Java 於演算法與資料結構之應用</a>，在這邊僅提供程式碼作為參考，解說部份請徑自參考原書： </small>





      <br>




      
      
      
      <ul>



        <li> Turtle.java
  </li>



      
      
      
      </ul>





      
      
      
      <pre>package cc.openhome;<br><br>import java.awt.*;<br><br>public class Turtle {<br>    public double angle;  // current angle<br>    public double currentX, currentY;   // current position<br>    private double wx1, wy1, wx2, wy2; // canvas coordination<br>    private double vx1, vy1, vx2, vy2; // viewable area<br>    private double factX, factY;      // scale<br>    private Graphics g;<br><br>    public void setGraphics(Graphics g) {<br>        this.g = g;<br>    }<br><br>    public Graphics getGraphics() {<br>        return g;<br>    }<br><br>    public double getCurrentX() {<br>        return currentX;<br>    }<br><br>    public double getCurrentY() {<br>        return currentY;<br>    }<br><br>    public void window(double x1, double y1, double x2, double y2) {<br>        wx1 = x1;<br>        wy1 = y1;<br>        wx2 = x2;<br>        wy2 = y2;<br>        factX = (vx2 - vx1) / (wx2 - wx1);<br>        factY = (vy2 - vy1) / (wy2 - wy1);<br>    }<br><br>    public void view(double x1, double y1, double x2, double y2) {<br>        g.setClip((int) x1, (int) y1, (int) (x2 - x1), (int) (y2 - y1));<br>        vx1 = x1;<br>        vy1 = y1;<br>        vx2 = x2;<br>        vy2 = y2;<br>        factX = (vx2 - vx1) / (wx2 - wx1);<br>        factY = (vy2 - vy1) / (wy2 - wy1);<br>    }<br><br>    public void warp(double l) {<br>        setPoint(currentX + l * Math.cos(Math.toRadians(angle)), <br>                 currentY + l * Math.sin(Math.toRadians(angle)));<br>    }<br><br>    public void move(double l) {<br>        double x = currentX + l * Math.cos(Math.toRadians(angle));<br>        double y = currentY + l * Math.sin(Math.toRadians(angle));<br>        double x1 = (currentX - wx1) * factX + vx1;<br>        double y1 = (wy2 - currentY) * factY + vy1;<br>        double x2 = (x - wx1) * factX + vx1;<br>        double y2 = (wy2 - y) * factY + vy1;<br>        g.drawLine((int) x1, (int) y1, (int) x2, (int) y2);<br>        setPoint(x, y);<br>    }<br><br>    public void moveTo(double x, double y) {<br>        double x1 = (currentX - wx1) * factX + vx1;<br>        double y1 = (wy2 - currentY) * factY + vy1;<br>        double x2 = (x - wx1) * factX + vx1;<br>        double y2 = (wy2 - y) * factY + vy1;<br>        g.drawLine((int) x1, (int) y1, (int) x2, (int) y2);<br>        setPoint(x, y);<br>    }<br><br>    public void setPoint(double x, double y) {<br>        currentX = x;<br>        currentY = y;<br>    }<br><br>    public void pset(double x, double y) {<br>        setPoint(x, y);<br>        moveTo(x, y);<br>    }<br><br>    public void line(double x1, double y1, double x2, double y2) {<br>        setPoint(x1, y1);<br>        moveTo(x2, y2);<br>    }<br><br>    public void turn(double a) {<br>        angle = angle + a;<br>        angle = angle % 360;<br>    }<br><br>    public void setAngle(double angle) {<br>        this.angle = angle;<br>    }<br>}</pre>




      <br>
      <small>以下是使用HTML 5 Canvas時的JavaScript實作：<br>
      </small>
      <ul>
        <li><small>turtle.js</small></li>
      </ul>
      <pre>function Turtle(context) {<br>    function toRadians(angle) {<br>        return angle * Math.PI / 180;<br>    }<br>    <br>    function drawLine(x1, y1, x2, y2) {<br>        context.beginPath();<br>        context.moveTo(x1, y1);<br>        context.lineTo(x2, y2);<br>        context.stroke();<br>    }<br>    <br>    this.angle                               // current angle<br>        = this.currentX = this.currentY = 0; // current position<br>        <br>    var wx1 = wy1 = wx2 = wy2                // canvas coordination<br>        = vx1 = vy1 = vx2 = vy2              // viewable area<br>        = factX = factY = 0;                 // scale <br>        <br>    this.context = context;<br>    <br>    this.window = function(x1, y1, x2, y2) {<br>        wx1 = x1;<br>        wy1 = y1;<br>        wx2 = x2;<br>        wy2 = y2;<br>        factX = (vx2 - vx1) / (wx2 - wx1);<br>        factY = (vy2 - vy1) / (wy2 - wy1);    <br>    };<br>    <br>    this.view = function(x1, y1, x2, y2) {<br>        this.context.beginPath();<br>        this.context.rect(x1, y1, x2 - x1, y2 - y1);<br>        this.context.clip();<br>        this.context.stroke();<br>        this.context.closePath();<br>        vx1 = x1;<br>        vy1 = y1;<br>        vx2 = x2;<br>        vy2 = y2;<br>        factX = (vx2 - vx1) / (wx2 - wx1);<br>        factY = (vy2 - vy1) / (wy2 - wy1);<br>    };<br>    <br>    this.setPoint = function(x, y) {<br>        this.currentX = x;<br>        this.currentY = y;<br>    };<br>    <br>    this.setAngle = function(a) {<br>        this.angle = a;<br>    };<br>    <br>    this.warp = function(l) {<br>        this.setPoint(this.currentX + l * Math.cos(toRadians(this.angle)),<br>                      this.currentY + l * Math.sin(toRadians(this.angle)));<br>    };<br>    <br>    this.move = function(l) {<br>        var x = this.currentX + l * Math.cos(toRadians(this.angle));<br>        var y = this.currentY + l * Math.sin(toRadians(this.angle));<br>        var x1 = (this.currentX - wx1) * factX + vx1;<br>        var y1 = (wy2 - this.currentY) * factY + vy1;<br>        var x2 = (x - wx1) * factX + vx1;<br>        var y2 = (wy2 - y) * factY + vy1;<br>        drawLine(x1, y1, x2, y2);<br>        this.setPoint(x, y);<br>    };<br>    <br>    this.moveTo = function(x, y) {<br>        var x1 = (this.currentX - wx1) * factX + vx1;<br>        var y1 = (wy2 - this.currentY) * factY + vy1;<br>        var x2 = (x - wx1) * factX + vx1;<br>        var y2 = (wy2 - y) * factY + vy1;<br>        drawLine(x1, y1, x2, y2);<br>        this.setPoint(x, y);  <br>    };<br>    <br>    this.pset = function(x, y) {<br>        drawLine(x, y, x + 1, y + 1);<br>    };<br>    <br>    this.line = function(x1, y1, x2, y2) {<br>        this.setPoint(x1, y1);<br>        this.moveTo(x2, y2);<br>    };<br>     <br>    this.turn = function(a) {<br>        this.angle = this.angle + a;<br>        this.angle = this.angle % 360;<br>    };<br>}<br></pre>
      <br>
<br>



      </td>




    </tr>




  
  
  
  </tbody>
</table>




<br>



<br>




<br>











<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/ComputerGraphics/TwoDimTurtle.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:06:26 GMT -->
</html>