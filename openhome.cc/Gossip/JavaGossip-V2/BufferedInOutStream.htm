<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V2/BufferedInOutStream.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:19 GMT -->
<head>







  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>BufferedInputStream、 BufferedOutputStream</title></head><body>





<h3><a href="../index.html">From
Gossip@Openhome</a></h3>





<h1><a href="index-2.html">Java Gossip: BufferedInputStream、 BufferedOutputStream</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>在介紹 <a class="wikilink" href="FileInOutStream.htm">FileInputStream、
FileOutputStream</a>的
例子中，您使用了一個陣列來作為資料讀入的緩衝區，以檔案存取為例的話，您知道磁碟存取的速度是遠低於記憶體中的資料存取速度，為了減少對磁碟的存取
，可以一次讀入一定長度的資料，而寫入時也是一次寫入一定長度的資料，這可以增加資料存取的效率。 <br>

      <br>





BufferedInputStream與BufferedOutputStream可以為InputStream類的物件增加緩衝區功能，使用它們，您無需自行設計緩衝區。<br>

      <br>


BufferedInputStream的<span style="font-weight: bold;">資料成員buf是個位元陣列，可查閱標準API原始碼瞭解預設大小</span>，當讀取資料來源時，例如檔案， BufferedInputStream會儘量將buf填滿，當使用<span style="font-weight: bold;">read()</span>方法時，實際上是先讀取buf中的資料，而不是直接對資料來源作讀取，當buf中的資料不足時，BufferedInputStream才會再從資料來源中提取資料。<br>

      <br>


BufferedOutputStream的<span style="font-weight: bold;">資料成員buf是個位元陣列，</span></small><small><span style="font-weight: bold;">可查閱標準API原始碼瞭解預設大小</span></small><small><span style="font-weight: bold;"></span>，當寫入資料時，會先將資料存至buf中，當buf已滿時才會一次將資料寫至目的地，而不是每次寫入都對目的地作寫入。<br>

      <br>


將上一個主題的範例作個改寫，這次不用自行設定緩衝區並進行判斷了，使用BufferedInputStream、 BufferedOutputStream讓程式看來簡單一些，也比較有效率：</small>






      <br>


      
      <ul>

        <li> BufferedStreamDemo.java </li>

      
      </ul>



      
      <pre>package onlyfun.caterpillar;<br> <br>import java.io.*;<br> <br>public class BufferedStreamDemo {<br>    public static void main(String[] args) {<br>        try { <br>            byte[] data = new byte[1]; <br>            File srcFile = new File(args[0]); <br>            File desFile = new File(args[1]); <br> <br>            BufferedInputStream bufferedInputStream = <br>                new BufferedInputStream(<br>                         new FileInputStream(srcFile)); <br>            BufferedOutputStream bufferedOutputStream = <br>                new BufferedOutputStream(<br>                         new FileOutputStream(desFile));<br> <br>            System.out.println("複製檔案：" + <br>                             srcFile.length() + "位元組"); <br>            while(bufferedInputStream.read(data) != -1) { <br>                bufferedOutputStream.write(data); <br>            }<br>            <br>            // 將緩衝區中的資料全部寫出 <br>            bufferedOutputStream.flush();<br> <br>            // 關閉串流 <br>            bufferedInputStream.close(); <br>            bufferedOutputStream.close(); <br>        } <br>        catch(ArrayIndexOutOfBoundsException e) { <br>            System.out.println(<br>                    "using: java UseFileStream src des"); <br>            e.printStackTrace(); <br>        } <br>        catch(IOException e) { <br>            e.printStackTrace(); <br>        } <br>    }<br>} <br></pre>



      <br>

      <small>
為了確保緩衝區中的資料一定被寫出，建議最後執行flush()將緩衝區中的資料全部寫出目的串流中。 <br>

      <br>

      <span style="font-weight: bold;">BufferedInputStream、BufferedOutputStream並沒有改變來源InputStream或目的
OutputStream的行為</span>，讀入或寫出時的動作還是InputStream、OutputStream負責，
BufferedInputStream、BufferedOutputStream只是在這之前動態的為它們加上一些功能（像是緩衝區功能），在這邊是
以檔案存取串流為例，實際上您可以在其它串流物件上加上BufferedInputStream、BufferedOutputStream功能。</small>

      <br>

 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>



      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>



      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>



      <br>


      
      
      <center>
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>



      </center>



 </td>


    </tr>


  
  </tbody>
</table>


<br>





<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V2/BufferedInOutStream.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:19 GMT -->
</html>