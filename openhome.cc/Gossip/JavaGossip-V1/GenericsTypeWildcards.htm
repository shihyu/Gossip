<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/GenericsTypeWildcards.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
<head>








  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">








  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">








  
  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">








  
  
  
  
  
  
  
  
  <title>型態通配字元</title>
</head>


<body>








<h3><a href="../index.html">From
Gossip@Openhome</a></h3>








<h1><a href="index-2.html">Java Gossip: 型態通配字元</a></h1>









<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>假設您撰寫了一個泛型類別：</small><br>







      
      <ul>

        <li> GenericFoo.java </li>

      
      </ul>







      
      <pre>public class GenericFoo&lt;T&gt; {<br>    private T foo;<br> <br>    public void setFoo(T foo) {<br>        this.foo = foo;<br>    }<br> <br>    public T getFoo() {<br>        return foo;<br>    }<br>}</pre>






      <br>

      <small>






分別使用下面的程式宣告了foo1與foo2兩個參考名稱：<br>

      </small>




      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;Integer&gt; foo1 = null;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;Boolean&gt; foo2 = null;</span><br>






      </small></div>

      <small>




&nbsp;<br>

      <br>






那麼 foo1 就只接受GenericFoo&lt;Integer&gt;的實例，而foo2只接受GenericFoo&lt;Boolean&gt;的實例。<br>

      <br>






現在您有這麼一個需求，您希望有一個參考名稱foo可以接受所有下面的實例（List、Map或List介面以及其實介面的相關類別，在J2SE 5.0中已經針對泛型功能作了改寫，在這邊仍請將之當作介面就好，這是為了簡化說明的考量）：<br>

      </small>














      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo = new GenericFoo&lt;ArrayList&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo = new GenericFoo&lt;LinkedList&gt;();</span><br>






      </small></div>

      <small>




&nbsp;<br>

      <br>






簡單的說，實例化型態持有者時，它必須是實作List的類別或其子類別，要宣告這麼一個參考名稱，您可以使用 '?' 通配字元，並使用"extends"關鍵字限定型態持有者的型態，例如：<br>

      </small>









      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;? extends List&gt; foo = null;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo = new GenericFoo&lt;ArrayList&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">.....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo = new GenericFoo&lt;LinkedList&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">....</span><br>






      </small></div>

      <small>




&nbsp;<br>

      <br>






如果指定了不是實作List的類別或其子類別，則編譯器會回報錯誤，例如：<br>

      </small>









      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;? extends List&gt; foo = new GenericFoo&lt;HashMap&gt;();</span><br>






      </small></div>

      <small>




&nbsp;<br>

      <br>






上面這段程式編譯器會回報以下的錯誤：<br>

      </small>









      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace; color: rgb(255, 0, 0);">incompatible types</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace; color: rgb(255, 0, 0);">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace; color: rgb(255, 0, 0);">found : GenericFoo&lt;java.util.HashMap&gt;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace; color: rgb(255, 0, 0);">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace; color: rgb(255, 0, 0);">required: GenericFoo&lt;? extends java.util.List&gt;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace; color: rgb(255, 0, 0);">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace; color: rgb(255, 0, 0);">GenericFoo&lt;? extends List&gt; foo = new GenericFoo&lt;HashMap&gt;();</span><br>






      </small></div>






      <small><br>






這樣的限定是很有用的，例如如果您想要自訂一個showFoo()方法，方法的內容實作是針對List而制定的，例如：<br>

      </small>




      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public void showFoo(GenericFoo foo) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; // 針對List而制定的內容</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>






      </small></div>

      <small>




&nbsp;<br>

      <br>






您當然不希望任何的型態都可以傳入showFoo()方法中，您可以使用以下的方式來限定，例如：<br>

      </small>









      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public void showFoo(GenericFoo&lt;? extends List&gt; foo) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; // </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>






      </small></div>

      <small>




&nbsp;<br>

      <br>






這麼一來，如果有粗心的程式設計人員傳入了您不想要的型態，例如GenericFoo&lt;Boolean&gt;型態的實例，則編譯器都會告訴它這是不可行的，在宣告名稱時如果指定了<span style="font-weight: bold;">&lt;?&gt;</span>而
不使用"extends"，則預設是允許Object及其下的子類，也就是所有的Java物件了，那為什麼不直接使用GenericFoo宣告就好了，何
必要用GenericFoo&lt;?&gt;來宣告？使用通配字元有點要注意的是，透過使用通配字元宣告的名稱所參考的物件，您沒辦法再對它加入新的資
訊，您只能取得它的資訊或是移除它的資訊，例如：<br>

      </small>









      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;String&gt; foo = new GenericFoo&lt;String&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo.setFoo("caterpillar");</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;?&gt; immutableFoo = foo;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">// 可以取得資訊</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">System.out.println(immutableFoo.getFoo());</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">// 可透過immutableFoo來移去foo所參考實例內的資訊</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">immutableFoo.setFoo(null);</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">// 不可透過immutableFoo來設定新的資訊給foo所參考的實例</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">// 所以下面這行無法通過編譯</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">






      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">//&nbsp; immutableFoo.setFoo("良葛格");</span><br>






      </small></div>






      <small><br>





所以使用&lt;?&gt;或是&lt;? extends
SomeClass&gt;的宣告方式，意味著您只能透過該名稱來取得所參考實例的資訊，或者是移除某些資訊，但不能增加它的資訊，因為只知道當中放置的
是SomeClass的子類，但不確定是什麼類的實例，編譯器不讓您加入物件，理由是，如果可以加入物件的話，那麼您就得記得取回的物件實例是什麼形態，
然後轉換為原來的型態方可進行操作，這就失去了使用泛型的意義。<br>

      <br>


事實上，<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;?&gt; immutableFoo</span><span style="font-family: Courier New,Courier,monospace;">相當於</span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo immutableFoo</span><span style="font-family: Courier New,Courier,monospace;">。</span><br>

      <br>

      <br>






除了可以向下限制，您也可以向上限制，只要使用<span style="font-weight: bold;">"super"關鍵字</span>，例如：<br>

      </small>













      
      <div style="margin-left: 40px; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold;">GenericFoo&lt;? super StringBuilder&gt; foo;</span><br>






      </small></div>



      <small><span style="font-family: Courier New,Courier,monospace;">


&nbsp;</span><br>






如此，foo就只接受 <a href="StringBuilder.htm">StringBuilder</a> 及其上層的父類型態之物件。</small> </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>








<br>








<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/GenericsTypeWildcards.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
</html>
