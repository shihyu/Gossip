<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/InnerClass.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
<head>






  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">






  
  
  
  
  
  
  <title>內部類別（Inner class）</title></head>

<body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Java Gossip:&nbsp;內部類別（Inner class）</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>在類別中您還可以定義類別，稱之為<span style="font-weight: bold;">內部類別（Inner class）</span>或<span style="font-weight: bold;">「巢狀類別」（Nested class）</span>。非"static"的內部類別可以分為三種：<span style="font-weight: bold;">成員內部類別（Member inner class）</span>、<span style="font-weight: bold;">區域內部類別（Local inner class）</span>與<span style="font-weight: bold;">匿名內部類別（Anonymous inner class）</span>。<br>

      <br>




使用內部類別的好處在於可以直接存取外部類別的私用（private）成員，舉個例子來說，在視窗程式中，您可以使用內部類別來實作一個事件傾聽者類別，這個視窗傾聽者類別可以直接存取視窗元件，而不用透過參數傳遞。<br>

      <br>




另一個好處是，當某個Slave類別完全只服務於一個Master類別時，我們可以將之設定為內部類別，如此使用Master類別的人就不用知道 Slave的存在。<br>

      <br>




成員內部類別是直接宣告類別為成員，例如：<br>

      </small>











      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class OuterClass { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; // .... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; // 內部類別 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; private class InnerClass { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // .... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; } </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>




      </small></div>

      <small>


&nbsp;<br>




內部類別同樣也可以使用"public"、"protected"或"private"來修飾，通常宣告為"private"的情況較多，下面這個程式簡單示範成員內部類別的使用：</small><br>






      
      <ul>

        <li> OutClass.java
  </li>

      
      </ul>





      
      <pre>public class OutClass { <br>    // 內部類別 <br>    private class Point { <br>        private int x, y; <br> <br>        public Point() { <br>            x = 0; y = 0; <br>        } <br> <br>        public void setPoint(int x, int y) { <br>            this.x = x; <br>            this.y = y; <br>        } <br> <br>        public int getX() { <br>            return x; <br>        } <br> <br>        public int getY() { <br>            return y; <br>        } <br>    } <br> <br>    private Point[] points; <br> <br>    public OutClass(int length) { <br>        points = new Point[length]; <br>        <br>        for(int i = 0; i &lt; points.length; i++) { <br>            points[i] = new Point(); <br>            points[i].setPoint(i*5, i*5); <br>        } <br>    } <br> <br>    public void showPoints() { <br>        for(int i = 0; i &lt; points.length; i++) { <br>            System.out.printf("Point[%d]: x = %d, y = %d%n",<br>                      i, points[i].getX(), points[i].getY());<br>        } <br>    } <br>} <br></pre>





      <br>

      <small>


上面的程式假設Point類別只服務於OutClass類別，所以使用OutClass時，不必知道Point類別的存在，例如：</small><br>





      
      <ul>

        <li> UseInnerClass.java
  </li>

      
      </ul>





      
      <pre>public class UseInnerClass { <br>    public static void main(String[] args) { <br>        OutClass out = new OutClass(10); <br> <br>        out.showPoints(); <br>    } <br>}</pre>




      <br>

      <small>


區域內部類別的使用與成員內部類別類似，區域內部類別定義於一個方法中，類別的可視範圍與生成之物件僅止於該方法之中，區域內部類別的應用一般較為少見。<br>

      <br>




內部匿名類別可以不宣告類別名稱，而使用new直接產生一個物件，該物件可以是繼承某個類別或是實作某個介面，內部匿名類別的宣告方式如下：<br>

      </small>





      
      <div style="margin-left: 40px; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold;">new [類別或介面()] {</span><br style="font-weight: bold;">




      <span style="font-weight: bold;">// 實作</span><br style="font-weight: bold;">




      <span style="font-weight: bold;">}</span><br>




      </small></div>




      <small><br>




一個使用內部匿名類別的例子如下所示，您直接繼承Object類別來生成一個物件，並改寫其toString()方法：</small><br>






      
      <ul>

        <li> UseInnerClass.java
  </li>

      
      </ul>





      
      <pre>public class UseInnerClass { <br>    public static void main(String[] args) { <br>        Object obj = new Object() { <br>                             public String toString() { <br>                                 return "匿名類別物件"; <br>                             } <br>                         }; <br>        System.out.println(obj.toString()); <br>    } <br>} </pre>




      <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><br>




      </span>

      <small><span class="postbody">
執行結果：</span></small><br>






      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">






  <tbody>






    <tr>






      <td style="background-color: rgb(0, 0, 0);"><small><span style="color: rgb(255, 255, 255);">匿名類別物件</span></small><span style="color: rgb(255, 255, 255);"><br>






      </span></td>






    </tr>






  
  
  
  
  
        
        </tbody>
      
      </table>






      <br>

      <small>


注意如果要在內部匿名類別中使用某個方法中的變數，它必須宣告為<span style="font-weight: bold;">"final"</span>，例如下面是無法通過編譯的：<br>

      </small>


      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public void someMethod() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x = 10;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object obj = new Object() { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
public String toString() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return "" + x; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj.toString()); </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; } </span><br>




      </small></div>

      <small>


&nbsp;<br>

      <br>




編譯器會回報以下的錯誤：<br>

      </small>





      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace; color: rgb(255, 0, 0);">local variable x is accessed from within inner class; needs to be declared final</span><br>




      </small></div>




      <small><br>




您要在 x 宣告時加上final才可以通過編譯：<br>

      </small>


      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public void someMethod() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final int x = 10;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object obj = new Object() { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
public String toString() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return "" + x; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj.toString()); </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; } </span><br>




      </small></div>

      <small>


&nbsp;<br>





究其原因，在於 區域變數 x
並不是真正被拿來於內部匿名類別中使用，而是在內部匿名類別中複製一份，作為field成員來使用，由於是複本，即便您在內部匿名類別中對 x
作了修改，會不會影響真正的區域變數
x，事實上您也通不過編譯器的檢查，因為編譯器要求您加上"final"關鍵字，這樣您就知道您不能在內部匿名類別中改變 x 的值。<br>

      <br>






內部類別還可以被宣告為"static"，不過由於是"static"，它不能存取外部類別的方法，而必須透過外部類別所生成的物件來進行呼叫，一般來說較少使
用，一種情況是在main()中要使用某個內部類別時，例如：</small>


      <br>





      
      <ul>

        <li> UseInnerClass.java
  </li>

      
      </ul>





      
      <pre>public class UseInnerClass { <br>    private static class Point { <br>        private int x, y; <br>        public Point(int x, int y) { <br>            this.x = x; <br>            this.y = y; <br>        }<br> <br>        public int getX() { <br>            return x; <br>        } <br> <br>        public int getY() { <br>            return y; <br>        } <br>    } <br> <br>    public static void main(String[] args) { <br>        Point p = new Point(10, 20);<br> <br>        System.out.printf("x = %d, y = %d%n", <br>                 p.getX(), p.getY()); <br>    } <br>} </pre>




      <br>

      <small>


由於main()方法是"static"，為了要能使用Point類別，該類別也必須被宣告為"static"。若不宣告為static，則必須透過外部類別實例加上new關鍵字來產生，例如：<br></small><pre>public class UseInnerClass { <br>    private class Point { <br>        private int x, y; <br>        public Point(int x, int y) { <br>            this.x = x; <br>            this.y = y; <br>        }<br> <br>        public int getX() { <br>            return x; <br>        } <br> <br>        public int getY() { <br>            return y; <br>        } <br>    } <br> <br>    public static void main(String[] args) { <br>        UseInnerClass inner = new UseInnerClass();<br>        Point p = inner.new Point(10, 20);<br> <br>        System.out.printf("x = %d, y = %d%n", <br>                 p.getX(), p.getY()); <br>    } <br>} </pre><small>

      <br>


被宣告為static的內部類別，事實上也可以看作是另一種名稱空間的管理方式，例如：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class Outer {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; public static class Inner {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; &nbsp; &nbsp; ....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; ....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>


      </small></div>




      <small><br>


您可以如以下的方式來使用Inner類別：<br>

      </small>
      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Outer.Inner inner = new Outer.Inner();</span><br>


      </small></div>


      <small><br>


在檔案管理方面，內部類別在編譯完成之後，所產生的檔案名稱為<span style="font-weight: bold;">「外部類別名稱$內部類別名稱.class」</span>，而內部匿名類別則在編譯完成之後產生<span style="font-weight: bold;">「外部類別名稱$編號.class」</span>，編號為1、2、3.....，看它是外部類別中的第幾個匿名類別。</small> </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>
<script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
       <br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/InnerClass.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
</html>