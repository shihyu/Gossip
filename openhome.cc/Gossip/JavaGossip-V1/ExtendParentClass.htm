<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ExtendParentClass.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
<head>



  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">



  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">



  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">



  
  
  
  <title>擴充（extends）父類別</title>
</head>


<body>



<h3><a href="../index.html">From
Gossip@Openhome</a></h3>



<h1><a href="index-2.html">Java Gossip: 擴充（extends）父類別</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>假設您先前已經撰寫了一些2D繪圖相關類別，現在您想要將之擴充為適用於3D繪圖，3D的觀念是2D的延伸，許多 2D繪圖時所使用的功能都可以留下來加以擴充，在Java中您不用重寫所有的類別，您可以<span style="font-weight: bold;">「擴充」（extend）</span>原先已定義好的類別，增加新的定義。<br>

      <br>


Java中使用"extends"作為其擴充父類別的關鍵字，其實就相當於我們一般所常稱的<span style="font-weight: bold;">繼承（Inherit）</span>，只不過"extends"除了繼承之外，還有將繼承下來的類別予以新增定義的意思。<br>

      <br>


例如繪圖中最基本的「點」類別，您原先已定義好一個Point2D類別，您繼承它並將之擴充為Point3D類別，在擴充的關係中，稱被擴充的類別為<span style="font-weight: bold;">「父類別」（Parent class）</span>或<span style="font-weight: bold;">「基礎類別」（Base class）</span>，而擴充父類別的類別就稱之為<span style="font-weight: bold;">「子類別」（Child class）</span>或<span style="font-weight: bold;">「衍生類別」（Derived class）</span>，在擴充時您使用"extends" 關鍵字，並指定要被擴充的類別。<br>

      <br>


直接使用一個實際例子來說明好了： </small>


      <br>



      
      <ul>

        <li> Point2D.java </li>

      
      </ul>



      
      <pre>public class Point2D { <br>    private int x, y; <br> <br>    public Point2D() {} <br>    public Point2D(int x, int y) {this.x = x; this.y = y;} <br>    public int getX() {return x;} <br>    public int getY() {return y;} <br>} <br></pre>




      
      <ul>

        <li> Point3D.java </li>

      
      </ul>



      
      <pre>public class Point3D extends Point2D { // 擴充Point2D類別 <br>    private int z;  // 新增私用資料 <br> <br>    public Point3D() { <br>        super(); <br>    } <br> <br>    // 建構函式，同時指定呼叫父類別建構函式 <br>    Point3D(int x, int y, int z) { <br>        super(x, y); <br>        this.z = z; <br>    } <br> <br>    // 新增函式 <br>    public int getZ() {return z;}<br>}  <br></pre>




      
      <ul>

        <li> UseExtend.java </li>

      
      </ul>



      
      <pre>public class UseExtend { <br>    public static void main(String[] args) { <br>        Point3D p1 = new Point3D(1, 3, 4); <br>        Point3D p2 = new Point3D(); <br> <br>        System.out.printf("p1: (%d, %d, %d) \n", <br>            p1.getX(), p1.getY(), p1.getZ());<br>        System.out.printf("p2: (%d, %d, %d) \n", <br>            p2.getX(), p2.getY(), p2.getZ()); <br>    } <br>} <br></pre>



      <br>

      <small>
執行結果： </small><span class="postbody"></span><br>



      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">



  <tbody>



    <tr>



      <td style="background-color: rgb(0, 0, 0);"><small><span style="color: rgb(255, 255, 255);">p1: (1, 3, 4) <br>


p2: (0, 0, 0)&nbsp;</span></small><span style="color: rgb(255, 255, 255);"><br>



      </span></td>



    </tr>



  
  
        
        </tbody>
      
      </table>



      <br>

      <small>
當您擴充某個類別時，該類別的所有public成員都可以在衍生類別中被呼叫使用，而private成員則不可以直接在衍生類別中被呼叫使用；在這個例子
中，Point2D中已經有x,
y兩個成員，您新增z成員，而方法上您新增一個public的getZ()方法，而getX()與getY()直接繼承父類別中已定義的內容。<br>

      <br>


在擴充某個類別之後，您可以一併初始父類別的建構方法，以完成相對應的初始動作，這可以使用<span style="font-weight: bold;">super()</span>方法來達到，它表示呼叫基底類別的建構方法。<br>

      <br>


父類別的public成員可以直接在衍生類別中使用，而private成員則不行，private類別只限於定義它的類別來存取，如果想要與父類別的
private成員溝通，就只能透過父類別中繼承下來的public函式成員，例如上例中的getX()與getY()方法。<br>

      <br>


下面這個程式是另一個示範存取父類別private成員的方法： </small>


      <br>


      
      <ul>

        <li> Point2D.java </li>

      
      </ul>



      
      <pre>public class Point2D { <br>    private int x, y; <br> <br>    public Point2D() {x = 0; y = 0;} <br>    public Point2D(int x, int y) {this.x = x; this.y = y;} <br>    public int getX() {return x;} <br>    public int getY() {return y;} <br>    public void setX(int x) {this.x = x;} <br>    public void setY(int y) {this.y = y;} <br>} <br></pre>




      
      <ul>

        <li> Point3D.java </li>

      
      </ul>



      
      <pre>public class Point3D extends Point2D { // 繼承Point2D類別 <br>    private int z;  // 新增私用資料 <br><br>    public Point3D() { <br>        z = 0; <br>    } <br><br>    // 建構函式，同時指定呼叫父類別建構函式 <br>    Point3D(int x, int y, int z) { <br>        super(x, y); <br>        this.z = z; <br>    } <br><br>    // 新增函式 <br>    public int getZ() {return z;}; <br>    public void setZ(int z) {this.z = z;} <br>} <br></pre>




      
      <ul>

        <li> UseExtend.java </li>

      
      </ul>



      
      <pre>public class UseExtend { <br>    public static void main(String[] args) { <br>        Point3D p1 = new Point3D(1, 3, 4); <br>        Point3D p2 = new Point3D(); <br> <br>        System.out.printf("p1: (%d, %d, %d) \n", <br>            p1.getX(), p1.getY(), p1.getZ());<br> <br>        p2.setX(2); <br>        p2.setY(4); <br>        p2.setZ(6);<br>        System.out.printf("p2: (%d, %d, %d) \n", <br>            p2.getX(), p2.getY(), p2.getZ()); <br>    } <br>} <br></pre>



      <br>

      <small>
執行結果： </small><span class="postbody"></span><br>



      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">



  <tbody>



    <tr>



      <td style="background-color: rgb(0, 0, 0);"><small><span style="color: rgb(255, 255, 255);">p1: (1, 3, 4) <br>


p2: (2, 4, 6) </span></small><span style="color: rgb(255, 255, 255);"><br>



      </span></td>



    </tr>



  
  
        
        </tbody>
      
      </table>


      <br>

      <small>
父類別的private成員並非無法在衍生類別中使用，而是必須看父類別本身是否提供有可繼承使用的管道來存取它們，就如同上例中的public成員 getX()、setX()等方法。</small> </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>


<br>


<br>


<br>



<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ExtendParentClass.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
</html>
