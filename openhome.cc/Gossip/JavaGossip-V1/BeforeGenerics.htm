<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/BeforeGenerics.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
<head>






  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">






  
  
  
  
  
  
  <title>沒有泛型之前</title>
</head>


<body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Java Gossip: 沒有泛型之前</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>考慮您要設計下面的兩個類別（兩個很無聊的類別，但足以說明需求）：</small><br>





      
      <ul>

        <li> BooleanFoo.java </li>

      
      </ul>





      
      <pre>public class BooleanFoo {<br>    private Boolean foo;<br> <br>    public void setFoo(Boolean foo) {<br>        this.foo = foo;<br>    }<br> <br>    public Boolean getFoo() {<br>        return foo;<br>    }<br>} <br></pre>






      
      <ul>

        <li> IntegerFoo.java </li>

      
      </ul>





      
      <pre>public class IntegerFoo {<br>    private Integer foo;<br> <br>    public void setFoo(Integer foo) {<br>        this.foo = foo;<br>    }<br> <br>    public Integer getFoo() {<br>        return foo;<br>    }<br>} <br></pre>





      
      <p><small>類別定義時邏輯完全一樣，只是當中宣告的成員型態不同，有點小聰明的程式設計人員會將第一個類的內容複製至另一個檔案中，然後用編輯器「取代」功能一次取
代所有的型態名稱（即將Boolean取代為Integer）。</small></p>

      <small>



OK！是有些小聰明，但還是不太聰明，如果類別中的邏輯要修改，您要修改兩個檔案，<span style="font-weight: bold;">泛型（Generics）</span>的需求就在此產生，當您定義類
別時，發現到好幾個類別的邏輯其實都相同，就只是當中所涉及的型態不一樣時，使用複製、貼上、取代的功能來撰寫程式只是讓您增加不必要的檔案管理困擾，有
沒有辦法只寫一個檔案就好，畢竟它們的邏輯是相同的。<br>

      <br>




別忘了，Java中所有的類別都擴充自Object，這樣寫會比較好：</small>



      <br>





      
      <ul>

        <li> ObjectFoo.java </li>

      
      </ul>





      
      <pre>public class ObjectFoo {<br>    private Object foo;<br> <br>    public void setFoo(Object foo) {<br>        this.foo = foo;<br>    }<br> <br>    public Object getFoo() {<br>        return foo;<br>    }<br>} <br></pre>





      <br>

      <small>


由於Java中所有定義的類別，都以Object為最上層的父類別，所以用它來實現泛型（Generics）功能是一個不錯的考量，大部份的人都這麼作，您只要撰寫這麼一個類別，然後可以如下的使用它：<br>

      </small>




      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">ObjectFoo foo1 = new ObjectFoo();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">ObjectFoo foo2 = new ObjectFoo();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo1.setFoo(new Boolean(true));</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">// 記得轉換介面</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Boolean b = (Boolean) foo1.getFoo();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">// 記得轉換介面</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo2.setFoo(new Integer(10));</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Integer i = (Integer) foo2.getFoo();</span><br>




      </small></div>






      <small><br>




看來還不錯，但是由於傳回的是Object，您必須轉換它的介面，問題出在這邊，粗心的程式設計人員往往會忘了要作這個動作，或者是轉換介面時用錯了型態（像是該用Boolean卻用了Integer），例如：<br>

      </small>


      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">ObjectFoo foo1 = new ObjectFoo();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo1.setFoo(new Boolean(true));</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">




      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">String s = (String) foo1.getFoo();</span><br>




      </small></div>

      <small>


&nbsp;<br>

      <br>




要命的是，語法上是可以的，所以編譯器檢查不出錯誤，真正的錯誤要在執行時期才會發生，這時惱人的<span style="font-weight: bold;">ClassCastException</span>就會出來搞怪，在使用Object設計泛型程式時，程式人員要再細心一些、小心一些。<br>

      <br>

      </small>







 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/BeforeGenerics.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
</html>
