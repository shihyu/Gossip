<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ExceptionHandling.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
<head>


  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">


  
  <link rel="stylesheet" href="css/print.css" type="text/css">


  
  <meta content="text/html; charset=Big5" http-equiv="content-type">

  
  <title>簡介例外處理</title>
</head>


<body>


<h3><a href="../index.html">From
Gossip@Openhome</a></h3>


<h1><a href="index-2.html">Java Gossip: 簡介例外處理</a></h1>



<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="vertical-align: top; width: 690px;"> <small>在還沒有學習例外處理之前，如果您要撰寫一個除法程式，並由使用者輸入除數與被除數，由於被除數除以0沒有意義，所以之前可能
必須像以下這樣避免錯誤：<br>


      </small>
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">if(b
!= 0) </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
System.out.println(a / b); </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">else
      </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
System.out.println("除數不能為0");<br>

      <br>

      </span></small><small>
這樣的方式過去在一些程式語言中會很常被利用，利用判斷式來避免錯誤的發生，然而這樣的方式會讓錯誤處理與程式的處理邏輯混在一起，使得程式難以閱讀，而
由於使用了一些判斷式，即使有一些很少發生的錯誤，也都必須一視同仁的進行判斷檢查，這會使得程式的執行效能受到一定程度的影響。<br>


      </small><br>

      <small>
Java的例外處理機制可以協助我們捕捉程式執行時期的錯誤，它用來處理一些系統可以恢復的錯誤，<span style="font-weight: bold;">例外（Exception）</span>是Java中定義
的一種物件資料型態，在特定錯誤發生時會丟出例外物件，我們可以捕捉這些例外並加以處理，避免程式可能的錯誤發生。<br>

      <br>

      </small><small>
Java的例外處理藉由<span style="font-weight: bold;">"try"</span>、<span style="font-weight: bold;">"catch"</span>、<span style="font-weight: bold;">"finally</span>"三個關鍵字組合的語言來達
到，其語法基本結構如下：<br>


      </small>
      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">try
{</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;
&nbsp; // 陳述句</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">catch
(例外型態 名稱) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;
&nbsp; // 例外處理</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">finally
{</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;
&nbsp; // 一定會處理的區塊</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>


      </small></div>


      <small><br>


一個"try"所包括的區塊，必須有對應的"catch"區塊，它可以有多個"catch"區域，而"finally"可有可無，如果沒有定義
"catch"區塊，則一定要有"finally"區塊。<br>

      <br>

      </small><small>
先來看個實例，瞭解如何使用try...catch來處理使用者輸入的錯誤： </small>
      <br>


      
      <ul>

        <li> UseException.java </li>

      
      </ul>


      
      <pre>import java.io.*; <br> <br>public class UseException { <br>    public static void main(String[] args) { <br>        try { <br>            int input; <br>            BufferedReader buf = new BufferedReader( <br>                                        new InputStreamReader(System.in)); <br>            System.out.print("請輸入整數: "); <br>            input = Integer.parseInt(buf.readLine()); <br>            System.out.println("input x 10 = " + (input*10)); <br>        } <br>        catch(IOException e) { <br>            System.out.println("I/O錯誤"); <br>        } <br>        catch(NumberFormatException e) { <br>            System.out.println("輸入格式有誤"); <br>        } <br>    } <br>} <br></pre>


      <br>


      <small>例外處理是程式在執行但發生錯誤並無法處理時，會丟出一個例外物件，在這個程式中，您特意 <a class="wikilink" href="BufferedReader.htm">使用
BufferedReader 取得輸入</a>，當使用
BufferedReader類別時，若發生I/O錯誤會丟出<span style="font-weight: bold;">IOException
例外</span>，這個例外您必須處理。<br>


      <br>


您試著從使用者輸入取得一個整數值，由BufferedReader物件所讀取到的輸入是個字串，您使用Integer類別的
parseInt()方法試著剖析該字串為整數，如果無法剖析，則會發生錯誤並丟出一個<span style="font-weight: bold;">NumberFormatException例外</span>物
件，當這個例外丟出後，程式會離開目前執行的位置，而如果設定的"catch"有捕捉這個例外，則會執行對應區塊中的陳述句，注意當例外一但丟出，就不會
再回到例外的丟出點了。<br>


      <br>


來看看這個程式的執行範例：</small>
      <br>


      
      <table style="text-align: left; background-color: rgb(0, 0, 0); color: rgb(255, 255, 255); width: 687px; height: 110px;" border="0" cellpadding="2" cellspacing="2">


        <tbody>


          <tr>


            <td><small>$ java UseException <br>


請輸入整數: 10 <br>


input x 10 = 100 <br>


$ java UseException <br>


請輸入整數: XX <br>


輸入格式有誤</small></td>


          </tr>


        
        </tbody>
      
      </table>


      <br>


&nbsp;<br>


      <small>如果程式中設定有"finally"區塊，則無論例外是否有發生，則一定會執行"finally"區塊中所定義的陳述句，
"finally"區塊使用時機
的例子之一，就是當您開啟了某個檔案時，在讀/寫的過程中發生錯誤，在使用"catch"區塊處理相對應的例外之後，最後在"finally"區塊中定義
一些關閉檔案的動作，讓關閉檔案的動作一定會被執行。<br>


      <br>


使用例外處理的好處是您可以將程式邏輯與錯誤處理分開，使得程式易於撰寫、閱讀與維護，由於例外處理是在程式執行時發生錯誤，而沒有辦法處理之時才產生例
外物件，所以與使用判斷式來避免例外的方式比起來，例外處理會有比較好的執行效能。</small> </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<small><br>

</small><small></small>
<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ExceptionHandling.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
</html>
