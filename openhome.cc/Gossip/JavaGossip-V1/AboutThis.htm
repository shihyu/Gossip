<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/AboutThis.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
<head>






  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">






  
  
  
  
  
  
  <title>關於 this</title>
</head>


<body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Java Gossip: 關於 this</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>考慮下面這個類別：</small><br>






      
      <ul>

        <li> Ball.java </li>

      
      </ul>






      
      <pre> public class Ball { <br>    private double radius; <br>    private String name; <br> <br>    public Ball() {<br>        this(0.0, "no name");<br>    }<br> <br>    public Ball(double radius, String name) { <br>        this.radius = radius; <br>        this.name = name; <br>    }<br> <br>    public double getRadius() { <br>        return radius; <br>    }<br> <br>    public double getVolumn() { <br>        return (4 / 3 * Math.PI * radius * radius * radius); <br>    } <br> <br>    public String getName() { <br>        return name; <br>    }<br>    <br>    public void setRadius(double radius) { <br>        this.radius = radius; <br>    }<br>  <br>    public void setName(String name) {<br>        this.name = name; <br>    } <br>}<br></pre>






      <br>

      <small>



當使用這個類別新增兩個物件ball1與ball2時，ball1與ball2會各自擁有自己的radius與name資料成員，然而方法成員在記憶
體中卻只有一份。 <br>

      <br>





當使用ball1.getName()與b2.getName()方法取回name的名稱時，即然類別的方法成員只有一份，getName()如何知
道它傳回的name是ball1物件的，還是ball2物件的呢？ <br>

      <br>





其實您使用物件名稱來呼叫方法成員時，程式會將物件的參考告知方法成員，而在方法中，<span style="font-weight: bold;">一個類別資料成員其實會隱含一個this參考</span>，這個this參
考會儲存傳遞進來的物件參考，當您呼叫getRadius()函式時，其實相當於執行： <br>

      </small>














      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public double getRadius() { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; return this.radius; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">} </span><br>





      </small></div>






      <small><br>





當ball1呼叫getRadius()方法時，this所參考的就是ball1所參考的物件，而使用ball2呼叫
getRadius()方法時，this所參考的就是ball2所參考的物件，所以getRadius()可以正確的得知該傳回哪一個物件的radius
資料。<br>

      <br>





每一個類別的方法成員都會隱含一個this參考，用來指向呼叫它的物件，當您在方法中使用資料成員時，都會隱含的使用this指標，當然您也可以明確的指定，例如在函式定義時使用： <br>

      </small>







      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public Ball(double radius, String name) {</span><br style="font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; this.radius = radius;</span><br style="font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; this.name = name;</span><br style="font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">} </span><span style="font-style: italic;"><span style="font-weight: bold;"></span></span><br>


      <span style="font-style: italic;"><span style="font-weight: bold;"></span></span></small></div>


      <small><span style="font-style: italic;"><span style="font-weight: bold;"><br>


      </span></span>


參數名稱與資料成員名稱相同時，為了識別是參數或是資料成員，我們必須明確的使用this參考來指定，但如果是下例則不用：<br>

      </small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public Ball(double r, String n) { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; radius = r;&nbsp; // 實際等於this.radius = r;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; name = n;&nbsp;&nbsp;&nbsp; // 實際等於this.name = n;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">} </span><br>





      </small></div>

      <small>



&nbsp;<br>

      <br>





再介紹一個this參考的使用時機：當物件需要得知自己的記憶體位址時。這種例子很多，例如告知某個函式處理對象為自己、或在Java視窗程式中，註冊物件本身為事件處理者，例如下面這個簡單的Java程式中就有使用到this參考：<br>

      </small>







      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class GUIExample extends JFrame </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
implements MouseListener { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; // .... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; // 實作事件處理的物件為自已</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addMouseListener(this);&nbsp;&nbsp;&nbsp; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; // .... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; // ==&nbsp; 滑鼠事件實作 == </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public void mouseEntered(MouseEvent e) { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ..... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; } </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; // .... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">} </span><br>





      </small></div>

      <small>



&nbsp;<br>





這只是一個示範，告知您this參考的用法，如果日後您學到Java視窗程式的事件處理，相信這樣的例子您會看到不少。<br>

      <br>





this除了上面的用法之外，還有一種可以帶參數的用法，主要是用於類別中呼叫建構方法，而避免直接以建構方法的名稱來呼叫，例如：<br>

      </small>







      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class Ball { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; private String name; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public Ball() { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this("No name"); </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public Ball(String name) { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name = name; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .... </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; } </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">} </span><br>





      </small></div>

      <small>



&nbsp;<br>

      <br>





當使用無參數的建構方法時，它會呼叫有參數的建構方法，這是this()一個應用的基本範例，如此，您不用在建構方法中撰寫重覆的程式碼。</small>



 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>





<br>





<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/AboutThis.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
</html>
