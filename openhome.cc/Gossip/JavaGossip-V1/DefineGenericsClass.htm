<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/DefineGenericsClass.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
<head>





  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">





  
  
  
  
  
  <title>定義泛型類別</title>
</head>


<body>





<h3><a href="../index.html">From
Gossip@Openhome</a></h3>





<h1><a href="index-2.html">Java Gossip: 定義泛型類別</a></h1>






<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>當您定義類別時，發現到好幾個類別的邏輯其實都相同，就只是當中所涉及的型態不一樣時，使用複製、貼上、取代的功能來撰寫程式只是讓您增加不必要的檔案管理困擾。<br>

      <br>



由於Java中所有定義的類別，都以Object為最上層的父類別，所以在 <a href="http://java.sun.com/j2se/1.5.0/download.jsp">J2SE 5.0</a> 之前，Java程式設計人員可以使用Object來解決上面這樣的需求，為了讓定義出來的類別可以更加通用（Generic），傳入的值或傳回的物件都是以Object為主，當您要取出這些物件來使用時，必須記得將介面轉換為原來的類型，這樣才可以操作物件上的方法。<br>

      <br>



然而使用Object來撰寫泛型類別（Generic
Class）留下了一個問題，因為您必須要轉換介面，粗心的程式設計人員往往會忘了要作這個動作，或者是轉換介面時用錯了型態（像是該用Boolean卻
用了Integer），要命的是，語法上是可以的，所以編譯器檢查不出錯誤，真正的錯誤要在執行時期才會發生，這時惱人的<span style="font-weight: bold;">ClassCastException</span>就會出來搞怪，在使用Object設計泛型程式時，程式人員要再細心一些、小心一些。<br>

      <br>



在J2SE 5.0之後，提出了針對泛型（Generics）設計的解決方案，要定義一個簡單的泛型類別是簡單的，直接來看個例子：</small>





      <br>





      
      <ul>

        <li> GenericFoo.java </li>

      
      </ul>




      
      <pre>public class GenericFoo&lt;T&gt; {<br>    private T foo;<br> <br>    public void setFoo(T foo) {<br>        this.foo = foo;<br>    }<br> <br>    public T getFoo() {<br>        return foo;<br>    }<br>}</pre>



      <br>

      <small>

&lt;T&gt; 用來宣告一個<span style="font-weight: bold;">型態持有者（Holder）</span>T，之後您可以用 T 作為型態代表來宣告變數（參考）名稱，然後您可以像下面的程式來使用這個類別：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;Boolean&gt; foo1 = new GenericFoo&lt;Boolean&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;Integer&gt; foo2 = new GenericFoo&lt;Integer&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo1.setFoo(new Boolean(true));</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Boolean b = foo1.getFoo();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo2.setFoo(new Integer(10));</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Integer i = foo2.getFoo();</span><br>



      </small></div>

      <small>

&nbsp;<br>

      <br>



不同的地方在於，在宣告與配置物件時，您可以一併指定泛型類別中真正的型態，這將用來取代定義時所使用的
T，而這次您可以看到，介面轉換不再需要了，所定義出來的泛型類別在使用時多了一層安全性，至少可以省去惱人的ClassCastException
發生，編譯器可以幫您作第一層防線，例如下面的程式會被檢查出錯誤：<br>

      </small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;Boolean&gt; foo1 = new GenericFoo&lt;Boolean&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">foo1.setFoo(new Boolean(true));</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Integer b = foo1.getFoo();</span><br>



      </small></div>

      <small>

&nbsp;<br>

      <br>



foo1.getFoo()傳回的是Boolean，您要將它指定給Integer，這顯然語法上不合，編譯器這時可以派上用場：<br>

      </small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Test.java:7: incompatible types</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">found : java.lang.Boolean</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">required: java.lang.Integer</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Integer b = foo1.getFoo();</span><br>



      </small></div>



      <small><br>



如果使用泛型類別，但宣告時不一併指定型態呢？那麼預設會使用Object，不過您就要自己轉換物件的介面型態了，但編譯器會提出警訊，告訴您這可能是不安全的操作：<br style="font-family: Courier New,Courier,monospace;">

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Note: Test.java uses unchecked or unsafe operations.</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">Note: Recompile with -Xlint:unchecked for details.</span><br>



      </small></div>



      <small><br>



回過頭來看看下面的宣告：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;Boolean&gt; foo1 = new GenericFoo&lt;Boolean&gt;();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">GenericFoo&lt;Integer&gt; foo2 = new GenericFoo&lt;Integer&gt;();</span><br>



      </small></div>

      <small>

&nbsp;<br>

      <br>



GenericFoo&lt; Boolean&gt;宣告的foo1與GenericFoo&lt; Integer&gt;宣告的foo2是相同的類型嗎？答案是否定的，基本上它們分屬於兩個不同類別的類型，即「相當於」下面兩個類型（只是個比喻）：<br>

      </small>



      
      <div style="margin-left: 40px; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold;">public class GenericFooBoolean {</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; private Boolean foo;</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">&nbsp;</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; public void setFoo(Boolean foo) {</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.foo = foo;</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">&nbsp;</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; public Boolean getFoo() {</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return foo;</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold;">



      <span style="font-weight: bold;">}</span><br>



      </small></div>

      <small>

&nbsp;<br>



以及：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class GenericFooInteger {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; private Integer foo;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public void setFoo(Integer foo) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.foo = foo;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public Integer getFoo() {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return foo;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>



      </small></div>

      <small>

&nbsp;<br>

      <br>



所以您不可以將 foo1 指定給 foo2，或是將 foo2 指定給 foo1，編譯器會回報以下錯誤：<br>

      </small>



      
      <div style="margin-left: 40px; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold;">incompatible types</span><br style="font-weight: bold;">

      <span style="font-weight: bold;">found : GenericFoo&lt;java.lang.Integer&gt;</span><br style="font-weight: bold;">

      <span style="font-weight: bold;">required: GenericFoo&lt;java.lang.Boolean&gt;</span><br style="font-weight: bold;">

      <span style="font-weight: bold;">foo1 = foo2;</span></small>





      <br>



      </div>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>



<br>





<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/DefineGenericsClass.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:17 GMT -->
</html>
