<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ClassMember.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
<head>




  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">




  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">




  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">




  
  
  
  
  <title>類別成員（Class member）</title>
</head>


<body>




<h3><a href="../index.html">From
Gossip@Openhome</a></h3>




<h1><a href="index-2.html">Java Gossip: 類別成員（Class member）</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>在Java中，一個類別可以定義Field成員及方法（Method） 成員。<br>

      <br>



先來定義一個程式： </small>

      <br>




      
      <ul>

        <li> Ball.java </li>

      
      </ul>




      
      <pre>public class Ball { <br>    private double radius; // 半徑 <br>    private String name;  // 名稱 <br> <br>    public void setRadius(double radius) { <br>        this.radius = radius; <br>    }<br>    <br>    public void setName(String name) { <br>        this.name = name; <br>    } <br> <br>    public double getRadius() { <br>        return radius; <br>    } <br> <br>    public String getName() { <br>        return name; <br>    } <br>    <br>    public double getVolumn() { <br>        return 4/3 * Math.PI * radius * radius * radius; <br>    } <br>}  <br></pre>




      <br>

      <small>

在Java中，類別的存取權限修飾詞有<span style="font-weight: bold;">"public"</span>、<span style="font-weight: bold;">"protected"</span>、<span style="font-weight: bold;">"private"</span>三個，如果在宣告成員時不使用存取修飾詞，則預設以<span style="font-weight: bold;">套件
（package</span>）為存取範圍，也就是說在package外就無法存取，這些存取修飾，之後在 <a class="wikilink" href="Package.htm">套件（package）</a> 還會見到說明。 <br>

      <br>



在這個程式中，您定義了一個Ball類別，當中定義了radius與name兩個field成員，這兩個資料成員被宣告為"private"，表示它是<span style="font-weight: bold;">
「私用成員」（Private member）</span>，它只能在同一個類別中被使用，不可以直接藉由物件參考名稱來存取它。 <br>

      <br>



再來看到方法（Method）成員，它被宣告為"public"，表示它可以被程式呼叫，一個方法成員為一小個程式片段或一個單元（Unit），這個程式
片段可重覆被呼叫使用，並可傳入引數或傳回一個數值，一個方法成員的基本宣告與定義方式如下 ： <br>

      </small>







      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">存取修飾 傳回值型態 方法名稱(參數列) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">　　// 實作</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">　　return 傳回值;</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">} </span><br>


      </small></div>


      <small><br>



參數列用來告知方法成員執行時所需的資料，如果傳入的引數是基本資料型態（Primitive data type），則會將值複製至參數列上的變數，如果傳入的引數是一個物件，則會將參數列上的變數參考至指定的物件。<br>

      <br>



方法區塊中可以宣告變數（Variable），變數在方法執行結束後就會自動清除，如果方法中的變數名稱與類別資料成員名稱同名，則方法中的變數名稱會暫
時覆蓋類別field資料成員的作用範圍，同樣的引數列上的引數名稱也會覆蓋field資料成員的作用範圍，如果此時要在方法區塊中使用
field成員，可以使用this關鍵字來特別指定。<br>

      <br>



方法的傳回值可以將計算的結果或其它想要的數值、物件傳回，如果是物件，則將傳回的物件給接受的變數參考。<br>

      <br>



在物件導向程式設計的過程中，有一個基本的原則，如果field成員能不公開就不公開，在Java中就是宣告其為"private"，這是<span style="font-weight: bold;">「資訊的最小化」</span>，所以在程式中，private成員就經由setXXX()與getXXX()的公開方法來進行設定或存取，而不是直接呼叫該 field資料成員來存取。 <br>

      <br>




Math.PI是由Java所提供的功能變數，它定義了圓周率3.14159......，在Math類別中還包括有許多公用的數學功能函式，您可以自行查詢 <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Math.html"><cite class="urllink">java.lang.Math</cite></a>
線上說明文件以得知這些功能。 <br>

      <br>



另外可以注意到，<a class="wikilink" href="AutoBoxingUnBoxing.htm">autoboxing、
unboxing</a> 在方法的參數列中是可以作用的，也就是說如果您的方法中是這樣設計的：<br>

      </small>












      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">public class SomeClass {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; ....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public void someMethod(Integer integer) {</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ......</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; ....</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>



      </small></div>



      <small><br>



您可以使用這樣的方式來設定引數：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">SomeClass someObj = new SomeClass();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">someObj.someMethod(1);</span><br>



      </small></div>

      <small>

&nbsp;<br>



autoboxing、unboxing會自動作用，但記得要小心使用這個功能。<br>

      <br>



一般在命名類別時，類別名稱首字會大寫，而方法名稱首字是小寫，名稱命名時以一目瞭解名稱的作用為原則，上面所採取的都是駱駝式的命名方式，也就是每個單字的首字予以適當的大寫，例如someMethodOfSomeClass這樣的方式，這是常見的一種命名慣例。<br>

      <br>



為field成員設定setXXX()或getXXX()這類的方法時，XXX名稱最好與field名稱相對應，例如name這個field
成員對應的方法，可以命名為setName()與getName()，而radius這個成員，則對應於setRadius()與getRadius()
這樣的名稱，如此閱讀程式時可以一目瞭解setter與getter方法的存取對象。</small>



      <br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>


      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>


      <br>

      
      <center>
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>


      </center>


 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>




<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>

<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V1/ClassMember.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:16 GMT -->
</html>
