<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/SparseMatrix.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:10 GMT -->
<head>










  
  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">









  
  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">









  
  
  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>稀疏矩陣</title></head><body>









<h3><a href="../index.html">From
Gossip@Openhome</a></h3>









<h1><a href="index-2.html">Algorithm Gossip: 稀疏矩陣</a></h1>



<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">



  <tbody>



    <tr>



      <td style="width: 676px; vertical-align: top;"> 






      
      
      <h2>說明</h2>


      <small>


如果在矩陣中，多數的元素並沒有資料，稱此矩陣為稀疏矩陣（sparse
matrix），由於矩陣在程式中常使用二維陣列表示，二維陣列的大小與使用的記憶體空間成正比，如果多數的元素沒有資料，則會造成記憶體空間的浪費，為
此，必須設計稀疏矩陣的陣列儲存方式，利用較少的記憶體空間儲存完整的矩陣資訊。</small><br>





      
      
      <h2>解法</h2>


      <small>


在這邊所介紹的方法較為簡單，陣列只儲存矩陣的行數、列數與有資料的索引位置及其值，在需要使用矩陣資料時，再透過程式運算加以還原，例如若矩陣資料如下 ，其中0表示矩陣中該位置沒有資料：<br>


      </small>


      
      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; 0 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0&nbsp; 3&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; 0 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0&nbsp; 0&nbsp; 0&nbsp; 6&nbsp; 0&nbsp; 0 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0&nbsp; 0&nbsp; 9&nbsp; 0&nbsp; 0&nbsp; 0 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; 12 0</span><br>





      </small></div>





      <small><br>





這個矩陣是5X6矩陣，非零元素有4個，您要使用的陣列第一列記錄其列數、行數與非零元素個數：<br>


      </small>


      
      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">5&nbsp; 6&nbsp; 4 </span><br>





      </small></div>





      <small><br>





陣列的第二列起，記錄其位置的列索引、行索引與儲存值：<br>


      </small>


      
      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1&nbsp; 1&nbsp; 3 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">2&nbsp; 3&nbsp; 6 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">3&nbsp; 2&nbsp; 9 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">





      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">4&nbsp; 4&nbsp; 12 </span><br>





      </small></div>





      <small><br>





所以原本要用30個元素儲存的矩陣資訊，現在只使用了15個元素來儲存，節省了不少記憶體的使用。 </small><br>




      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; aaas<a href="#Scala"><a href="#Ruby"></a><br>
      </a></h2><small></small>






      
      
      <ul>


        <li><a name="C"></a> C
  </li>


      
      
      </ul>






      
      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>int main(void) { <br>    int num[5][3] = {{5, 6, 4}, <br>                     {1, 1, 3}, <br>                     {2, 3, 6}, <br>                     {3, 2, 9}, <br>                     {4, 4, 12}}; <br><br>    int k = 1;<br>    int i;<br>    for(i = 0; i &lt; num[0][0]; i++) { <br>        int j;<br>        for(j = 0; j &lt; num[0][1]; j++) { <br>            if(k &lt;= num[0][2] &amp;&amp; <br>               i == num[k][0] &amp;&amp; j == num[k][1]) { <br>                printf("%4d ", num[k][2]); <br>                k++; <br>            } <br>            else <br>                printf("%4d ", 0); <br>        } <br>        putchar('\n'); <br>    } <br><br>    return 0; <br>} <br></pre>






      <br>






      
      
      <ul>


        <li> <a name="Java"></a>Java
  </li>


      
      
      </ul>






      
      
      <pre>public class Matrix {<br>    public static int[][] restore(int[][] sparse) {<br>        int row = sparse[0][0];<br>        int column = sparse[0][1];        <br>        int[][] array = new int[row][column];<br>        <br>        for(int i = 0, k = 1; i &lt; row; i++) { <br>            for(int j = 0; j &lt; column; j++) { <br>                if(k &lt;= sparse[0][2] &amp;&amp; <br>                    i == sparse[k][0] &amp;&amp; j == sparse[k][1]) { <br>                    array[i][j] = sparse[k][2]; <br>                    k++; <br>                } <br>                else {<br>                    array[i][j] = 0; <br>                }<br>            }  <br>        } <br>        <br>        return array;<br>    }<br><br>    public static void main(String[] args) {<br>        int[][] sparse = {{5, 6, 4}, <br>                          {1, 1, 3}, <br>                          {2, 3, 6}, <br>                          {3, 2, 9}, <br>                          {4, 4, 12}};<br>        <br>        for(int[] arr : Matrix.restore(sparse)) {<br>            for(int elm : arr) {<br>                System.out.print(elm + " ");<br>            }<br>            System.out.println();<br>        }<br>    }<br>}</pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def restore(sparse):<br>    row = sparse[0][0]<br>    column = sparse[0][1]<br>    array = [[0] * column for i in range(row)]<br>    k = 1<br>    for i in range(row):<br>        for j in range(column):<br>            if k &lt;= sparse[0][2] and \<br>               i == sparse[k][0] and j == sparse[k][1]:<br>               array[i][j] = sparse[k][2]<br>               k += 1<br>            else:<br>                array[i][j] = 0<br>    return array<br><br>sparse = [<br>             [5, 6, 4], <br>             [1, 1, 3], <br>             [2, 3, 6],<br>             [3, 2, 9], <br>             [4, 4, 12]<br>          ]<br>array = restore(sparse)<br>print(array)</pre>





      <br>





      <ul><li><a name="Scala"></a>Scala</li></ul><pre>object Matrix {<br>    def restore(sparse: Array[Array[Int]]) = {<br>        val row = sparse(0)(0)<br>        val column = sparse(0)(1)<br>        val array = new Array[Array[Int]](row, column)<br>        var k = 1<br>        for(i &lt;- 0 until row; j &lt;- 0 until column) {<br>            if(k &lt;= sparse(0)(2) &amp;&amp; i == sparse(k)(0) &amp;&amp; j == sparse(k)(1)) {<br>                array(i)(j) = sparse(k)(2)<br>                k += 1<br>            }<br>            else {<br>                array(i)(j) = 0<br>            }<br>        }<br>        array<br>    }<br>}<br><br>val sparse = Array(<br>                 Array(5, 6, 4),<br>                 Array(1, 1, 3),<br>                 Array(2, 3, 6),<br>                 Array(3, 2, 9),<br>                 Array(4, 4, 12)<br>             )<br>Matrix.restore(sparse).foreach(arr =&gt; {<br>    arr.foreach(elm =&gt; print(elm + " "))<br>    println()<br>})<br></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>def restore(sparse)<br>    row = sparse[0][0]<br>    column = sparse[0][1]<br>    array = Array.new(row) {<br>        Array.new(column, 0)<br>    }<br>    k = 1<br>    row.times { |i|<br>        column.times { |j|<br>            if k &lt;= sparse[0][2] &amp;&amp;<br>               i == sparse[k][0] &amp;&amp; j == sparse[k][1]<br>                array[i][j] = sparse[k][2]<br>                k += 1<br>            else<br>                array[i][j] = 0<br>            end<br>        }<br>    }<br>    array<br>end<br><br>sparse = [<br>             [5, 6, 4], <br>             [1, 1, 3], <br>             [2, 3, 6],<br>             [3, 2, 9], <br>             [4, 4, 12]<br>          ]<br>array = restore(sparse)<br>p array<br></pre>
      <br>





 </td>



      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>






<br>







      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>






      <br>

      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>






      <br>





      
      
      
      
      
      <center>
      
      
      
      
      
       <br>






      </center>






 </td>



    </tr>



  
  
  </tbody>
</table>



<br>









<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/SparseMatrix.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:10 GMT -->
</html>