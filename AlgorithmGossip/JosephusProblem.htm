<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/JosephusProblem.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:52 GMT -->
<head>
















  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>約瑟夫問題（Josephus Problem）</title></head><body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Algorithm Gossip: 約瑟夫問題（Josephus Problem）</a></h1>



<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">



  <tbody>



    <tr>



      <td style="width: 676px; vertical-align: top;"> 
      
      
      <h2>說明</h2>


      <small>
據說著名猶太歷史/數學家約瑟夫（Josephus）有過以下的故事：在羅馬人佔領喬塔帕特後，40個猶太士兵與</small><small>約瑟夫</small><small>躲到一個洞中，眼見脫逃無望，一群人決定集體自殺，然而</small><small>私下</small><small>約瑟夫</small><small>與某個傢伙並不贊成，</small><small>於是</small><small>約瑟夫</small><small>建議</small><small>自殺方式，41個人排成圓圈，由第1個人
開始報數，每報數到3的人就必須自殺，然後由下一個重新報數，直到所有人都自殺身亡為止。</small><small>約瑟夫</small><small>與不想自殺的那個人分別排在第16個與第31個位置，於是逃過了這場死亡遊戲。</small>
      <br>



      
      
      <h2>解法</h2>


      <small>只要畫兩個圓圈就可以讓</small><small>約瑟夫與不想死的傢伙</small><small>免於死亡遊戲，這兩個圓圈內圈是排列順序，而外圈是自殺順序，如下圖所示： </small><br>




      
      
      <div style="text-align: center;"><img style="width: 327px; height: 347px;" alt="約瑟夫問題" title="約瑟夫問題" src="images/josephusProblem-1.jpg"></div>


      <small>
使用程式來求解的話，只要將陣列當作環狀來處理就可以了，在陣列中由計數1開始，每找到三個無資料區就填入一個計數，直而計數達41為止，然後將陣列由索引1開始列出，就可以得知每個位置的自殺順序，這就是約瑟夫排列，41個人而報數3的約琴夫排列如下所示：</small><br>



      
      
      <div style="margin-left: 40px;"><span style="font-weight: bold;">14 36 1 38 15 2 24 30 3 16 34 4 25 17 5 40 31 6 18 26 7 37 19 8 35 27 9 20 32 10 41 21 11 28 39 12 22 33 13 29 23</span><br>



      </div>



      <br>


      <small>由上可知，最後一個自殺的是在第31個位置，而倒數第二自殺的要排在第16個位置。 <br>
      <br>
如果從另一角度來看，每次有人自殺後，剩下的人重新編號，那問題就可以分解為數個子問題。<br>
      <br>
如果使用動態規畫，有個遞迴推導公式可在 <a href="http://en.wikipedia.org/wiki/Josephus_problem#The_general_case">Josephus problem</a> 找到：<br>
      <span style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;"></span></span></small><small><span style="font-family: Courier New,Courier,monospace; font-weight: bold;">g(1, k) = 0</span><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <span style="font-family: Courier New,Courier,monospace; font-weight: bold;">g(n, k) = (g(n - 1, k) + k) % n</span><br>
      <br>其
中k表示報數k的人就自殺，g(n, k)就是n人組成的圓最後存活者編號，編號是從0開始，由於1人時該人就是存活者，所以g(1,
k)為0。簡單來說，如果可以求得n - 1的圓時最後存活者編號x，就可以用來求得n的圓時最後存活者編號(x + k) %
n（如果要得到1開始的編號，就對結果加一即可）。<br>
      <br>
如果使用鏈結串列，問題會更簡單，A串列中是1到n的編號，逐一移出A串列中的編號至B串列，最後A串列為空，B串列就是自殺編號順序，1到n編號所在的索引加一就是約瑟夫排列。<br>
      </small>



      
      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala&nbsp;</a>&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2>




      
      
      <ul>


        <li><a name="C"></a> C </li>


      
      
      </ul>




      
      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#define LEN 41<br>#define STEP 3<br><br>void josephus(int*, int, int);<br>int next(int*, int, int, int);<br>int winner(int, int);<br><br>int main(void) { <br>    int man[LEN] = {0}; <br>    josephus(man, LEN, STEP);<br><br>    printf("約琴夫排列："); <br>    int i;<br>    for(i = 0; i &lt; LEN; i++) {<br>        printf("%d ", man[i]); <br>    }<br>    printf("\nWinner: %d", winner(LEN, STEP));<br><br>    return 0; <br>} <br><br>void josephus(int* man, int len, int k) {<br>    int i, n;<br>    for(i = 1, n = -1; i &lt;= len; i++) {<br>        n = next(man, len, k, n);<br>        man[n] = i;<br>    }<br>}<br><br>int next(int* man, int len, int k, int n) {<br>    int count = 0;<br>    while(count &lt; k) {<br>        n = (n + 1) % len;<br>        if(man[n] == 0) { count++; }<br>    }    <br>    return n;<br>}<br><br>int winner(int len, int k) {<br>    int g, n;<br>    for(g = 0, n = 1; n &lt;= len; n++) {<br>        g = (g + k) % n;<br>    }<br>    return g + 1;<br>}<br></pre><br>




      
      
      <ul>


        <li><a name="Java"></a> Java </li>


      
      
      </ul>




      
      
      <pre>import java.util.*;<br>import static java.lang.System.out;<br><br>public class Josephus {<br>    public static List&lt;Integer&gt; awayOrder(int len, int k) {<br>        List&lt;Integer&gt; numbers = new LinkedList&lt;&gt;();<br>        for(int i = 1; i &lt;= len; i++) { numbers.add(i); }<br>        <br>        List&lt;Integer&gt; awayOrder = new ArrayList&lt;&gt;(len);<br>        for(int i = 2;;) {<br>            awayOrder.add(numbers.remove(i));<br>            if(numbers.isEmpty()) { break; }<br>            i = (i + k - 1) % numbers.size();<br>        }<br><br>        return awayOrder;<br>    }<br><br>    public static List&lt;Integer&gt; josephus(List&lt;Integer&gt; awayOrder) {<br>        List&lt;Integer&gt; josephus = new ArrayList&lt;&gt;(awayOrder.size());<br>        for(int i = 1; i &lt;= awayOrder.size(); i++) {<br>            josephus.add(awayOrder.indexOf(i) + 1);<br>        }<br>        return josephus;<br>    }<br>    <br>    public static List&lt;Integer&gt; josephus(int len, int k) {<br>        return josephus(awayOrder(len, k));<br>    }<br>    <br>    public static void main(String[] args) {<br>        List&lt;Integer&gt; awayOrder = awayOrder(41, 3);<br>        out.print("自殺順序：");<br>        for(Integer number : awayOrder) { <br>            out.printf("%3d", number); <br>        }<br>        out.print("\n約瑟夫環：");<br>        for(Integer number : josephus(awayOrder)) { <br>            out.printf("%3d", number); <br>        }<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def remove(list, i):<br>    return list[0:i] + list[i + 1:]<br>    <br>def awayOrder(l, k):<br>    def suicide(numbers, awayOrder, i):<br>        awayOrd = awayOrder + [numbers[i]]<br>        nums = remove(numbers, i)<br>        return awayOrd if len(nums) == 0 \<br>            else suicide(nums, awayOrd, (i + k - 1) % len(nums))<br><br>    return suicide([i for i in range(1, l + 1)], [], 2)<br><br>def josephus(awayOrder):<br>    return [awayOrder.index(i) + 1 for i in range(1, len(awayOrder) + 1)]<br>    <br>awayOrd = awayOrder(41, 3)<br>print("自殺順序：" + str(awayOrd))<br>print("約瑟夫環：" + str(josephus(awayOrd)))<br></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>def awayOrder(len: Int, k: Int) = {<br>    def suicide(numbers: List[Int], <br>                awayOrder: List[Int], i: Int): List[Int] = {<br>        val awayOrd = numbers(i) :: awayOrder<br>        val nums = numbers.filterNot(numbers.indexOf(_) == i)<br>        if(nums.isEmpty) awayOrd.reverse <br>        else suicide(nums, awayOrd, (i + k - 1) % nums.size)<br>    }<br>    suicide((1 to len).toList, Nil, 2)<br>}<br><br>def josephus(awayOrder: List[Int]) = {<br>    (for(i &lt;- 1 to awayOrder.size) yield awayOrder.indexOf(i) + 1).toList<br>}<br><br>def josephus(len: Int, k: Int): List[Int] = josephus(awayOrder(len, k))<br><br>println("自殺順序：" + awayOrder(41, 3).toString.drop(4))<br>println("約瑟夫環：" + josephus(41, 3).toString.drop(4))</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre># encoding: Big5<br>def awayOrder(l, k)<br>    suicide = -&gt;(numbers, awayOrder, i) {<br>        awayOrd = awayOrder + [numbers[i]]<br>        nums = numbers.select {|e| numbers.find_index(e) != i }<br>        nums.empty? ? awayOrd : <br>            suicide.call(nums, awayOrd, (i + k - 1) % nums.size)<br>    }<br>    suicide.call((1..l).to_a, [], 2)<br>end<br><br>def josephus(awayOrder)<br>    (1..awayOrder.size).map {|i| awayOrder.find_index(i) + 1}<br>end<br>    <br>awayOrd = awayOrder(41, 3)<br>puts("自殺順序：" + awayOrd.to_s)<br>puts("約瑟夫環：" + josephus(awayOrd).to_s)<br></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>function awayOrder(len, k) {<br>    var numbers = [];<br>    for(var i = 1; i &lt;= len; i++) { numbers.push(i); }<br>        <br>    var awayOrder = [];<br>    for(var i = 2;;) {<br>        awayOrder.push(numbers.splice(i, 1)[0]);<br>        if(numbers.length === 0) { break; }<br>        i = (i + k - 1) % numbers.length;<br>    }<br><br>    return awayOrder;<br>}<br><br>function josephus(awayOrder) {<br>    var jp = [];    <br>    for(var i = 1; i &lt;= awayOrder.length; i++) {<br>        jp.push(awayOrder.indexOf(i) + 1);<br>    }<br>    return jp;<br>}<br><br>var awayOrd = awayOrder(41, 3);<br>print('自殺順序：' + awayOrd);<br>print('約瑟夫環：' + josephus(awayOrd));<br></pre>
      <br>
      
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre>import Data.List<br><br>remove lt i = (take i lt) ++ (drop (i + 1) lt)<br><br>indexOf elem list = a<br>    where (Just a) = elem `elemIndex` list<br><br>awayOrder l k = suicide [1..l] [] 2<br>    where suicide numbers awayOrder i =<br>              if length nums == 0 then reverse awayOrd<br>              else suicide nums awayOrd ((i + k - 1) `mod` (length nums))<br>              where awayOrd = (numbers !! i) : awayOrder<br>                    nums = remove numbers i<br><br>josephus awayOrder =<br>    [(indexOf i awayOrder) + 1 | i &lt;- [1..(length awayOrder)]]<br>    <br>main = do<br>    putStrLn $ "Away order    : " ++ show awayOrd<br>    putStrLn $ "Josephus order: " ++ show (josephus awayOrd)<br>    where awayOrd = awayOrder 41 3<br></pre>

<br>


 </td>



      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>




      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>



    </tr>



  
  
  </tbody>
</table>



<br>



<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/JosephusProblem.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:53 GMT -->
</html>