<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/TwoNOneArray.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:12 GMT -->
<head>








  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>2(2N+1) 魔方陣</title></head><body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Algorithm Gossip:&nbsp;2(2N+1) 魔方陣</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 




      
      <h2>說明</h2>

      <small>
方陣的維度整體來看是偶數，但是其實是一個奇數乘以一個偶數，例如6X6，其中6=2X3，我們也稱這種方陣與單偶數方陣。</small><br>


      
      <h2>解法</h2>

      <small>
如果您會解奇數魔術方陣，要解這種方陣也就不難理解，首先我們令n=2(2m+1)，並將整個方陣看作是數個奇數方陣的組合，如下所示： <br>

      </small>

      
      <div style="text-align: center;"><small><img style="width: 393px; height: 236px;" alt="2(2N+1)魔方陣" title="2(2N+1)魔方陣" src="images/twoNOneArray-1.jpg"><br>


      </small></div>


      <small><br>


首先依序將A、B、C、D四個位置，依奇數方陣的規則填入數字，填完之後，方陣中各行的和就相同了，但列與對角線則否，此時必須在A-D與C- B之間，作一些對應的調換，規則如下：<br>

      </small>
      
      <ol>

        <li><small>將A中每一列(中間列除外)的頭m個元素，與D中對應位置的元素調換。</small></li>

        <li><small>將A的中央列、中央那一格向左取m格，並與D中對應位置對調</small></li>

        <li><small>將C中每一列的倒數m-1個元素，與B中對應的元素對調</small></li>

      
      </ol>


      <small><br>


舉個實例來說，如何填6X6方陣，我們首先將之分解為奇數方陣，並填入數字，如下所示： <br>

      </small>
      
      <div style="text-align: center;"><small><img style="width: 202px; height: 258px;" alt="2(2N+1)魔方陣" title="2(2N+1)魔方陣" src="images/twoNOneArray-2.jpg"></small></div>


      <small><br>


接下來進行互換的動作，互換的元素以不同顏色標示，如下：<br>

      </small>
      
      <div style="text-align: center;"><small><img style="width: 194px; height: 192px;" alt="2(2N+1)魔方陣" title="2(2N+1)魔方陣" src="images/twoNOneArray-3.jpg"></small></div>


      <small><br>


由於m-1的數為0，所以在這個例子中，C-B部份並不用進行對調。</small><br>


      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala&nbsp;</a>&nbsp;&nbsp; <a href="#Scala"><a href="#Ruby">Ruby</a><br>
      </a></h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define N 6 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void magic_o(int [][N], int); <br>void exchange(int [][N], int); <br><br>int main(void) { <br>    int square[N][N] = {0}; <br><br>    magic_o(square, N/2); <br>    exchange(square, N); <br><br>    int i, j; <br>    for(i = 0; i &lt; N; i++) { <br>        for(j = 0; j &lt; N; j++) <br>            printf("%2d ", square[i][j]); <br>        printf("\n"); <br>    } <br><br>    return 0; <br>} <br><br>void magic_o(int square[][N], int n) { <br>    int row = 0; <br>    int column = n / 2; <br>    int count;<br>    for(count = 1; count &lt;= n*n; count++) { <br>        square[row][column] = count;            // 填A <br>        square[row+n][column+n] = count + n*n;  // 填B <br>        square[row][column+n] = count + 2*n*n;  // 填C <br>        square[row+n][column] = count + 3*n*n;  // 填D <br>        if(count % n == 0) <br>            row++; <br>        else { <br>            row = (row == 0) ? n - 1 : row - 1 ; <br>            column = (column == n-1) ? 0 : column + 1; <br>        } <br>    } <br>} <br><br>void exchange(int x[][N], int n) { <br>    int m = n / 4; <br>    int m1 = m - 1; <br><br>    int i, j; <br>    for(i = 0; i &lt; n/2; i++) { <br>        if(i != m)  {    <br>            for(j = 0; j &lt; m; j++)          // 處理規則 1 <br>                SWAP(x[i][j], x[n/2+i][j]); <br>            for(j = 0; j &lt; m1; j++)         // 處理規則 2 <br>                SWAP(x[i][n-1-j], x[n/2+i][n-1-j]); <br>        } <br>        else {  // 處理規則 3 <br>            for(j = 1; j &lt;= m; j++) <br>                SWAP(x[m][j], x[n/2+m][j]); <br>            for(j = 0; j &lt; m1; j++) <br>                SWAP(x[m][n-1-j], x[n/2+m][n-1-j]); <br>        } <br>    } <br>} <br></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre>public class Matrix {<br>    public static int[][] magic(int n) {<br>        int[][] square = new int[n][n]; <br>        magic_o(square, n/2); <br>        exchange(square, n);         <br>        return square;<br>    }<br>    <br>    private static void magic_o(int[][] square, int n) {<br>        int row = 0; <br>        int column = n / 2; <br><br>        for(int count = 1; count &lt;= n*n; count++) { <br>            square[row][column] = count;            // 填A <br>            square[row+n][column+n] = count + n*n;  // 填B <br>            square[row][column+n] = count + 2*n*n;  // 填C <br>            square[row+n][column] = count + 3*n*n;  // 填D <br>            if(count % n == 0) <br>                row++; <br>            else { <br>                row = (row == 0) ? n - 1 : row - 1 ; <br>                column = (column == n-1) ? 0 : column + 1; <br>            } <br>        }<br>    }<br>    <br>    private static void exchange(int[][] x, int n) {<br>        int m = n / 4; <br>        int m1 = m - 1; <br><br>        for(int i = 0; i &lt; n/2; i++) { <br>            if(i != m)  {    <br>                for(int j = 0; j &lt; m; j++)          // 處理規則 1 <br>                    swap(x, i, j, n/2+i, j); <br>                for(int j = 0; j &lt; m1; j++)         // 處理規則 2 <br>                    swap(x, i, n-1-j, n/2+i, n-1-j); <br>            } <br>            else {  // 處理規則 3 <br>                for(int j = 1; j &lt;= m; j++) <br>                    swap(x, m, j, n/2+m, j); <br>                for(int j = 0; j &lt; m1; j++) <br>                    swap(x, m, n-1-j, n/2+m, n-1-j); <br>            } <br>        } <br>    }<br>    <br>    private static void swap(int[][] number, int i, int j, int k, int l) {<br>        int t = number[i][j]; <br>        number[i][j] = number[k][l]; <br>        number[k][l] = t;<br>    }<br>    <br>    public static void main(String[] args) {<br>        int[][] magic = Matrix.magic(6);<br>        for(int[] row : magic) {<br>            for(int number: row) {<br>                System.out.printf("%2d ", number);<br>            }<br>            System.out.println();<br>         }<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def magic(n):<br>    square = []<br>    for i in range(n):<br>        square.append([0] * n)<br>    magic_o(square, n // 2)<br>    exchange(square, n)<br>    return square<br><br>def magic_o(square, n):<br>    row = 0<br>    column = n // 2<br>    for count in range(1, n ** 2 + 1):<br>        square[row][column] = count;            # 填A <br>        square[row + n][column + n] = count + n * n;  # 填B <br>        square[row][column + n] = count + 2 * n * n;  # 填C <br>        square[row + n][column] = count + 3 * n * n;  # 填D<br>        if count % n == 0:<br>            row += 1<br>        else:<br>            row = n - 1 if row == 0 else row - 1<br>            column = 0 if column == n - 1 else column + 1<br>                <br>def exchange(x, n):<br>    m = n // 4<br>    m1 = m - 1<br>    for i in range(n // 2):<br>        if i != m:<br>            for j in range(m):<br>                x[i][j], x[n // 2 + i][j] = \<br>                x[n // 2 + i][j], x[i][j]<br>            for j in range(m1):<br>                x[i][n - 1 - j], x[n // 2 + i][n - 1 -j] = \<br>                x[n // 2 + i][n - 1 - j], x[i][n - 1 - j]<br>        else:<br>            for j in range(1, m + 1):<br>                x[m][j], x[n // 2 + m][j] = \<br>                x[n // 2 + m][j], x[m][j]<br>            for j in range(m1):<br>                x[m][n - 1 - j], x[n // 2 + m][n - 1 -j] = \<br>                x[n // 2 + m][n - 1 -j], x[m][n - 1 - j]<br>            <br>matrix = magic(6)<br>print(matrix)<br></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>object Matrix {<br>    def magic(n: Int) = {<br>        val square = new Array[Array[Int]](n, n)<br>        magic_o(square, n / 2)<br>        exchange(square, n)<br>        square<br>    }<br>    <br>    private def magic_o(square: Array[Array[Int]], n: Int) {<br>        var row = 0<br>        var column = n / 2<br>        for(count &lt;- 1 to n * n ) {<br>            square(row)(column) = count<br>            square(row+n)(column+n) = count + n*n;<br>            square(row)(column+n) = count + 2*n*n;<br>            square(row+n)(column) = count + 3*n*n;<br>            if(count % n == 0) row += 1<br>            else {<br>                row = if(row == 0) n - 1 else row - 1<br>                column = if(column == n-1) 0 else column + 1<br>            }<br>        }<br>    }<br>    <br>    private def exchange(x: Array[Array[Int]], n: Int) {<br>        val m = n / 4<br>        val m1 = m - 1<br>        for(i &lt;- 0 until n / 2) {<br>            if(i != m) {<br>                for(j &lt;- 0 until m) swap(x, i, j, n/2+i, j)<br>                for(j &lt;- 0 until m1) swap(x, i, n-1-j, n/2+i, n-1-j)<br>            }<br>            else {<br>                for(j &lt;- 1 to m) swap(x, m, j, n/2+m, j)<br>                for(j &lt;- 0 until m1) swap(x, m, n-1-j, n/2+m, n-1-j)<br>            }<br>        }<br>    }<br>    <br>    private def swap(number: Array[Array[Int]], <br>                     i: Int, j: Int, k: Int, l: Int) {<br>        val t = number(i)(j)<br>        number(i)(j) = number(k)(l)<br>        number(k)(l) = t<br>    }<br>}<br><br>Matrix.magic(6).foreach(row =&gt; {<br>    row.foreach(number =&gt; printf("%2d ", number))<br>    println()<br>})<br></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>def magic(n)<br>    square = Array.new(n) {<br>        Array.new(n, 0)<br>    }<br>    magic_o(square, n / 2)<br>    exchange(square, n)<br>    square<br>end<br><br>def magic_o(square, n)<br>    row = 0<br>    column = n / 2<br>    1.upto(n ** 2) { |count|<br>        square[row][column] = count;            # 填A <br>        square[row + n][column + n] = count + n * n;  # 填B <br>        square[row][column + n] = count + 2 * n * n;  # 填C <br>        square[row + n][column] = count + 3 * n * n;  # 填D <br>        if count % n == 0<br>            row += 1<br>        else<br>            row = (row == 0) ? n - 1 : row - 1<br>            column = (column == n - 1) ? 0 : column + 1<br>        end <br>    }<br>end<br><br>def exchange(x, n)<br>    m = n / 4<br>    m1 = m - 1<br>    (n / 2).times { |i|<br>        if i != m<br>            m.times { |j|<br>                x[i][j], x[n / 2 + i][j] =<br>                x[n / 2 + i][j], x[i][j]<br>            }<br>            m1.times { |j|<br>                x[i][n - 1 - j], x[n / 2 + i][n - 1 -j] =<br>                x[n / 2 + i][n - 1 - j], x[i][n - 1 - j]            <br>            }<br>        else<br>            1.upto(m) { |j|<br>                x[m][j], x[n / 2 + m][j] = <br>                x[n / 2 + m][j], x[m][j]                <br>            }<br>            m1.times { |j|<br>                x[m][n - 1 - j], x[n / 2 + m][n - 1 -j] = <br>                x[n / 2 + m][n - 1 -j], x[m][n - 1 - j]            <br>            }<br>        end<br>    }<br>end<br><br>matrix = magic(6)<br>p matrix<br></pre>
      <br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>





      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <br>





      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>


<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/TwoNOneArray.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:14 GMT -->
</html>