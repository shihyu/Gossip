<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/EightCoins.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:38 GMT -->
<head>














  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>八枚銀幣</title></head><body>





<h3><a href="../index.html">From
Gossip@Openhome</a></h3>





<h1><a href="index-2.html">Algorithm Gossip:&nbsp;八枚銀幣</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 



      
      <h2>&nbsp;說明</h2>

      <small>
現有八枚銀幣a b c d e f g h，已知其中一枚是假幣，其重量不同於真幣，但不知是較輕或較重，如何使用天平以最少的比較次數，決定出哪枚是假幣，並得知假幣比真幣較輕或較重。</small><br>


      
      <h2>解法</h2>

      <small>
單就求假幣的問題是不難，但問題限制使用最少的比較次數，所以我們不能以單純的迴圈比較來求解，我們可以使用決策樹（decision tree），使用分析與樹狀圖來協助求解。<br>

      <br>


一個簡單的狀況是這樣的，我們比較a+b+c與d+e+f ，如果相等，則假幣必是g或h，我們先比較g或h哪個較重，如果g較重，再與a比較（a是真幣），如果g等於a，則g為真幣，則h為假幣，由於h比g輕而 g是真幣，則h假幣的重量比真幣輕。<br>

      <br>


完整的比較決策樹如下圖所示： </small>

      <br>





      
      <div style="text-align: center;"><img style="width: 634px; height: 171px;" alt="八枚銀幣" title="八枚銀幣" src="images/eightCoins-1.jpg"><br>


      <br>


      </div>

      <small>
為了方便使用迴圈，使用號碼0至7表示銀幣，範例程式可以讓您輸入假幣重量，但您無法事先得知假幣是哪一枚，程式可得知假幣是哪一枚，且它比真幣輕或重。 </small><br>


      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br><br>void compare(int[], int, int, int); <br>void fake(int[]); <br> <br>int main(void) { <br>    srand(time(NULL)); <br><br>    int coins[8] = {0}; <br>    int i;<br>    for(i = 0; i &lt; 8; i++) {<br>        coins[i] = 10; <br>    }<br><br>    printf("\n輸入假幣重量 ( 比10大或小 )："); <br>    <br>    int input;<br>    scanf("%d", &amp;input); <br>    coins[rand() % 8] = input;<br><br>    fake(coins); <br><br>    printf("\n\n列出所有錢幣重量："); <br>    for(i = 0; i &lt; 8; i++) {<br>        printf("%d ", coins[i]); <br>    }<br>    <br>    return 0; <br>} <br><br>void compare(int coins[], int i, int j, int k) { <br>    if(coins[i] &gt; coins[k]) printf("\n假幣 %d 較重", i + 1); <br>    else                    printf("\n假幣 %d 較輕", j + 1); <br>} <br><br>void fake(int coins[]) { <br>    int c1 = coins[0] + coins[1] + coins[2] - coins[3] - coins[4] - coins[5];<br>    int c2 = coins[0] + coins[3] - coins[1] - coins[4];<br>    <br>    if(!c1) {<br>        if(coins[6] &gt; coins[7]) compare(coins, 6, 7, 0);<br>        else                    compare(coins, 7, 6, 0); <br>    }<br>    else if(c1 &gt; 0) { <br>        if(!c2)                 compare(coins, 2, 5, 0); <br>        else if(c2 &gt; 0)         compare(coins, 0, 4, 1); <br>        else                    compare(coins, 1, 3, 0); <br>    } <br>    else { <br>        if(!c2)                 compare(coins, 5, 2, 0); <br>        else if(c2 &gt; 0)         compare(coins, 3, 1, 0); <br>        else                    compare(coins, 4, 0, 1); <br>    } <br>}<br></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre>interface Fake {<br>    void doAction(int index, boolean isBigger);<br>}<br><br>public class Coins {<br>    public static void compare(int[] coins, int i, int j, int k, Fake fake) {<br>        if(coins[i] &gt; coins[k]) fake.doAction(i + 1, true);<br>        else                    fake.doAction(j + 1, false);<br>    }<br>    <br>    public static void compare(int[] coins, Fake fake) {<br>        Integer h1 = coins[0] + coins[1] + coins[2];<br>        Integer h2 = coins[3] + coins[4] + coins[5];<br>        Integer h3 = coins[0] + coins[3];<br>        Integer h4 = coins[1] + coins[4];<br>        <br>        switch(h1.compareTo(h2)) {<br>            case  0: if(coins[6] &gt; coins[7]) <br>                                  compare(coins, 6, 7, 0, fake);<br>                     else         <br>                                  compare(coins, 7, 6, 0, fake);<br>                     break;<br>            case  1: switch(h3.compareTo(h4)) {<br>                         case  0: compare(coins, 2, 5, 0, fake); break;<br>                         case  1: compare(coins, 0, 4, 1, fake); break;<br>                         case -1: compare(coins, 1, 3, 0, fake); <br>                     } break;<br>            case -1: switch(h3.compareTo(h4)) {<br>                         case  0: compare(coins, 5, 2, 0, fake); break;<br>                         case  1: compare(coins, 3, 1, 0, fake); break;<br>                         case -1: compare(coins, 4, 0, 1, fake); <br>                     }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        compare(new int[] {10, 10, 11, 10, 10, 10, 10, 10},<br>          // JDK8 Lambda<br>          (index, isBigger) -&gt; {<br>             System.out.printf("硬幣 %d 較%s", index, isBigger ? "大" : "小");<br>          }<br>        );<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def compare(coins, i, j, k):<br>    return (i + 1, True) if coins[i] &gt; coins[k] else (j + 1, False)<br>    <br>def coins(coins):<br>    c1 = sum(coins[0:3]) - sum(coins[3:6])<br>    c2 = sum([coins[0], coins[3]]) - sum([coins[1], coins[4]])<br>    return (                           (compare(coins, 6, 7, 0) <br>            if coins[6] &gt; coins[7] else compare(coins, 7, 6, 0)) <br>        if c1 == 0 else (((             compare(coins, 2, 5, 0) <br>            if c2 == 0 else             compare(coins, 0, 4, 1)) <br>            if c2 &gt; 0 else              compare(coins, 1, 3, 0)) <br>        if c1 &gt; 0 else (                compare(coins, 5, 2, 0)<br>            if c2 == 0 else (           compare(coins, 3, 1, 0)<br>            if c2 &gt; 0 else              compare(coins, 4, 0, 1)))))<br>    <br>i, isBigger = coins([10, 10, 10, 10, 2, 10, 10, 10])<br>print('硬幣', i, '重' if isBigger else '輕', end='')</pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>def coins(coins: List[Int]) = {<br>    def compare(coins: List[Int], i: Int, j: Int, k: Int) = {<br>        if(coins(i) &gt; coins(k)) (i + 1, true) else (j + 1, false)<br>    }<br><br>    val h1 = coins.slice(3, 6).sum<br>    val h2 = coins.slice(3, 6).sum<br>    val h3 = coins(0) + coins(3);<br>    val h4 = coins(1) + coins(4);<br>    <br>    h1.compareTo(h2) match {<br>        case  0 =&gt; if(coins(6) &gt; coins(7)) compare(coins, 6, 7, 0)<br>                   else                    compare(coins, 7, 6, 0)<br>        case  1 =&gt; h3.compareTo(h4) match {<br>                       case  0 =&gt;          compare(coins, 2, 5, 0)<br>                       case  1 =&gt;          compare(coins, 0, 4, 1)<br>                       case -1 =&gt;          compare(coins, 1, 3, 0)<br>                   }<br>        case -1 =&gt; h3.compareTo(h4) match {<br>                       case  0 =&gt;          compare(coins, 5, 2, 0)<br>                       case  1 =&gt;          compare(coins, 3, 1, 0)<br>                       case -1 =&gt;          compare(coins, 4, 0, 1)<br>                   }<br>    }<br>}<br><br>val (i, isBigger) = coins(List(10, 10, 11, 10, 10, 10, 10, 10))<br>printf("硬幣 %d 較%s", i, if(isBigger) "重" else "輕")</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre># encoding: Big5<br>def compare(coins, i, j, k)<br>   if coins[i] &gt; coins[k]<br>       {index: i + 1, isBigger: true} <br>   else <br>       {index: j + 1, isBigger: false} <br>   end<br>end<br><br>def coins(coins)<br>    h1 = coins.take(3).reduce(:+)<br>    h2 = coins[3...6].reduce(:+)<br>    h3 = coins[0] + coins[3]<br>    h4 = coins[1] + coins[4]<br>    <br>    case h1 &lt;=&gt; h2<br>    when  0; if coins[6] &gt; coins[7]<br>                      compare(coins, 6, 7, 0)<br>             else<br>                      compare(coins, 7, 6, 0) <br>             end<br>    when  1; case h3 &lt;=&gt; h4<br>             when  0; compare(coins, 2, 5, 0)<br>             when  1; compare(coins, 0, 4, 1)<br>             when -1; compare(coins, 1, 3, 0)<br>             end<br>    when -1; case h3 &lt;=&gt; h4<br>             when  0; compare(coins, 5, 2, 0)<br>             when  1; compare(coins, 3, 1, 0)<br>             when -1; compare(coins, 4, 0, 1)<br>             end<br>    end<br>end<br><br>fake = coins [10, 10, 10, 10, 2, 10, 10, 10]<br>printf("假幣 %d 較%s", fake[:index], if fake[:isBigger]; "重" else "輕" end)<br></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>var coins = function() {<br>    function compare(coins, i, j, k) {<br>        return coins[i] &gt; coins[k] ? {index: i + 1, isBigger: true} : <br>                                     {index: j + 1, isBigger: false};<br>    }<br>    return function(coins) {<br>        var c1 = coins[0] + coins[1] + coins[2] - <br>                 coins[3] - coins[4] - coins[5];<br>        var c2 = coins[0] + coins[3] - coins[1] - coins[4];<br>        return (c1 === 0 ? (coins[6] &gt; coins[7] ? compare(coins, 6, 7, 0)  : <br>                                                  compare(coins, 7, 6, 0)) : <br>               (c1 &gt; 0 ? <br>                   (c2 === 0 ?                    compare(coins, 2, 5, 0)  : <br>                   (c2 &gt; 0 ?                      compare(coins, 0, 4, 1)  : <br>                                                  compare(coins, 1, 3, 0))): <br>                   (c2 === 0 ?                    compare(coins, 5, 2, 0)  : <br>                   (c2 &gt; 0 ?                      compare(coins, 3, 1, 0)  : <br>                                                  compare(coins, 4, 0, 1))))<br>               );<br>    };<br>}();<br><br>var fake = coins([10, 10, 10, 2, 10, 10, 10, 10]);<br>print('假幣 ' + fake.index + ' 較' + (fake.isBigger ? '重' : '輕'));<br></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre>import Text.Printf<br><br>coins cs = case h1 `compare` h2 of<br>               EQ -&gt; if cs !! 6 &gt; cs !! 7 then comp cs 6 7 0<br>                                          else comp cs 7 6 0<br>               GT -&gt; case h3 `compare` h4 of<br>                         EQ -&gt; comp cs 2 5 0<br>                         GT -&gt; comp cs 0 4 1<br>                         LT -&gt; comp cs 1 3 0<br>               LT -&gt; case h3 `compare` h4 of<br>                         EQ -&gt; comp cs 5 2 0<br>                         GT -&gt; comp cs 3 1 0<br>                         LT -&gt; comp cs 4 0 1<br>    where h1 = sum $ take 3 cs<br>          h2 = sum $ take (5 - 3) $ drop 3 cs<br>          h3 = cs !! 0 + cs !! 3<br>          h4 = cs !! 1 + cs !! 4<br>          comp cs i j k= if cs !! i &gt; cs !! k then (i + 1, True) <br>                                              else (j + 1, False)<br>          <br>main = printf "Coin %d is %s" index (if isHeavy then "heavy" else "light")<br>    where (index, isHeavy) = coins [10, 10, 10, 10, 2, 10, 10, 10]<br></pre>
<br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>

<br>





<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/EightCoins.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:41 GMT -->
</html>