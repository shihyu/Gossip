<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/OddArray.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:10 GMT -->
<head>







  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>奇數魔方陣</title></head><body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index-2.html">Algorithm Gossip: 奇數魔方陣</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 




      
      <h2>說明</h2>

      <small>
將1到n(為奇數)的數字排列在nxn的方陣上，且各行、各列與各對角線的和必須相同，如下所示：</small><br>



      
      <div style="text-align: center;"><img style="width: 115px; height: 79px;" alt="奇數魔方陣" title="奇數魔方陣" src="images/oddArray-1.jpg"><br>


      
      <div style="text-align: left;">
      
      <h2>&nbsp;解法</h2>


      </div>


      
      <div style="text-align: left;"><small>填魔術方陣的方法以奇數最為簡單，第一個數字放在第一行第一列的正中央，然後向右(左)上填，如果右(左)上已有數字，則向下填，如下圖所示： <br>


      </small>
      
      <div style="text-align: center;"><small><img style="width: 198px; height: 194px;" alt="奇數魔方陣" title="奇數魔方陣" src="images/oddArray-2.jpg"><br>


      </small></div>

      <small>
      </small></div>


      </div>

      <small>
一般程式語言的陣列索引多由0開始，為了計算方便，我們利用索引1到n的部份，而在計算是向右(左)上或向下時，我們可以將索引值除以n值，如果得到餘數為1就向下，否則就往右(左)上，原理很簡單，看看是不是已經在同一列上繞一圈就對了。 </small><br>


      <br>


      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Scala"><a href="#Ruby">Ruby</a><br>
      </a></h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define N 5 <br><br>int main(void) { <br>    int square[N+1][N+1] = {0}; <br><br>    int i = 0; <br>    int j = (N+1) / 2; <br>    int key;<br>    for(key = 1; key &lt;= N*N; key++) { <br>        if((key % N) == 1) <br>            i++; <br>        else { <br>            i--; <br>            j++; <br>        } <br><br>        if(i == 0) <br>            i = N; <br>        if(j &gt; N) <br>            j = 1; <br><br>        square[i][j] = key; <br>    } <br><br>    int m, n;<br>    for(m = 1; m &lt;= N; m++) { <br>        for(n = 1; n &lt;= N; n++) <br>            printf("%2d ", square[m][n]); <br>    } <br><br>    return 0; <br>} <br></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre>public class Matrix {<br>    public static int[][] magic(int n) {<br>        int[][] square = new int[n+1][n+1]; <br><br>        for(int i = 0, j = (n + 1) / 2, key = 1; key &lt;= n*n; key++) { <br>            if((key % n) == 1) i++; <br>            else { i--; j++; } <br><br>            if(i == 0) i = n; <br>            if(j &gt; n) j = 1; <br><br>            square[i][j] = key; <br>        }<br>        <br>        int[][] matrix = new int[n][n];<br>        <br>        for(int k = 0; k &lt; matrix.length; k++) {<br>           for(int l = 0; l &lt; matrix[0].length; l++) {<br>               matrix[k][l] = square[k+1][l+1];<br>           }<br>        }<br>        <br>        return matrix;<br>    }<br>    <br>    public static void main(String[] args) {<br>        for(int[] row : Matrix.magic(5)) {<br>            for(int number: row) {<br>                System.out.printf("%2d ", number);<br>            }<br>            System.out.println();<br>         }<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def magic(n):<br>    square = []<br>    for i in range(n + 1):<br>        square.append([0] * (n + 1))<br>    i = 0<br>    j = (n + 1) // 2<br>    for key in range(1, n ** 2 + 1):<br>        if key % n == 1:<br>            i += 1<br>        else:<br>            i -= 1<br>            j += 1<br>        if i == 0:<br>            i = n<br>        if j &gt; n:<br>            j = 1<br>        square[i][j] = key<br>    matrix = []<br>    for i in range(n):<br>        matrix.append([0] * n)<br>    for k in range(len(matrix)):<br>        for l in range(len(matrix[0])):<br>            matrix[k][l] = square[k + 1][l + 1]<br>    return matrix<br><br>matrix = magic(5)<br>print(matrix)</pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>object Matrix {<br>    def magic(n: Int) = {<br>        val square = new Array[Array[Int]](n + 1, n + 1)<br>        var i = 0<br>        var j = (n + 1) / 2<br>        for(key &lt;- 1 to n * n) {<br>            if((key % n) == 1) i += 1<br>            else { i -= 1; j += 1}<br><br>            if(i == 0) i = n<br>            if(j &gt; n) j = 1<br>            <br>            square(i)(j) = key<br>        }<br>        <br>        val matrix = new Array[Array[Int]](n, n)<br>        for(k &lt;- 0 until matrix.length; l &lt;- 0 until matrix(0).length) {<br>            matrix(k)(l) = square(k + 1)(l + 1)<br>        }<br>        matrix<br>    }<br>}<br><br>Matrix.magic(5).foreach(row =&gt; {<br>    row.foreach(number =&gt; printf("%2d ", number))<br>    println()<br>})<br></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>def magic(n)<br>    square = Array.new(n + 1) {<br>        Array.new(n + 1, 0)<br>    }<br>    i = 0<br>    j = (n + 1) / 2<br>    1.upto(n ** 2) { |key|<br>        if key % n == 1<br>            i += 1<br>        else<br>            i -= 1<br>            j += 1<br>        end<br>        if i == 0<br>            i = n<br>        end<br>        if j &gt; n<br>            j = 1<br>        end<br>        square[i][j] = key<br>    }<br>    matrix = Array.new(n) {<br>        Array.new(n, 0)<br>    }<br>    matrix.length.times { |k|<br>        matrix[0].length.times { |l|<br>            matrix[k][l] = square[k + 1][l + 1]            <br>        }<br>    }<br>    matrix<br>end<br><br>matrix = magic(5)<br>p matrix<br></pre>
      <br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





<br>


      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>






<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/OddArray.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:11 GMT -->
</html>