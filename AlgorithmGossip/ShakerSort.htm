<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/ShakerSort.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:57 GMT -->
<head>















  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">








  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">








  
  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>Shaker 排序法 - 改良的氣泡排序</title></head><body>








<h3><a href="../index.html">From
Gossip@Openhome</a></h3>








<h1><a href="index-2.html">Algorithm Gossip:&nbsp;Shaker 排序法 - 改良的氣泡排序</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 






      
      <h2>說明</h2>

      <small>

請看看之前介紹過的 <a href="SelectionInsertionBubble.htm">氣泡排序法</a>，以 C 語言的實作為例：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">void bubbleTo(int* arr, int to, int(*compar)(int, int)) {<br>
&nbsp;&nbsp;&nbsp; int i;<br>
&nbsp;&nbsp;&nbsp; for(i = 0; i &lt; to - 1; i++) if(compar(arr[i + 1], arr[i]) &lt; 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SWAP(arr[i + 1], arr[i]);<br>
&nbsp;&nbsp;&nbsp; }<br>
}<br>
      <br>
void bubbleSort(int* arr, int len, int(*compar)(int, int)) {<br>
&nbsp;&nbsp;&nbsp; int i;<br>
&nbsp;&nbsp;&nbsp; for(i = 0; i &lt; len; i++) { bubbleTo(arr, len - i, compar); }<br>
}</span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><br>



      </small></div>

      <small>

&nbsp;<br>

      <br>
實際上氣泡排序過程中，如果在bubbleTo中沒有發生過交換動作，左邊也已排序完成，bubbleSort的迴圈可以提前結束。也就是可以改為以下稍微增進效能。<br>
</small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace; font-weight: bold;">int bubbleTo(int* arr, int to, int(*compar)(int, int)) {</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp; int i, swapped;</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp; for(i = 0, swapped = 0; i &lt; to - 1; i++) if(compar(arr[i + 1], arr[i]) &lt; 0) {</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SWAP(arr[i + 1], arr[i]);</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; swapped = i;</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp; }</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp; return swapped;</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">}</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">void bubbleSort(int* arr, int len, int(*compar)(int, int)) {</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp; int i;</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">&nbsp;&nbsp;&nbsp; for(i = 0; i &lt; len &amp;&amp; bubbleTo(arr, len - i, compar) != 0; i++);</small><br style="font-family: Courier New,Courier,monospace; font-weight: bold;">
      <small style="font-family: Courier New,Courier,monospace; font-weight: bold;">}</small><br>
      </div>
      <small><br>最後交換發生的索引值會被bubbleTo傳回，如果為0，表示沒發生過交換動作，也就是左邊也已排序完成。整個排序
過程中，排序的過程中，陣列右方排序好的元素會一直增加，反過來思考，如果此時氣泡排序方向不斷交換（也就是由左往右，再由右往左），利用兩邊排序好的元
素，提早讓交換動作不再發生，是否可以增加排序效能？Shaker排序法利用這個觀念來改良氣泡排序法。</small>

      <br>



      
      <h2>解法</h2>

      <small>

在上述的氣泡排序法中，在交換動作不再發生時，提早讓排序結束，在排序過程中，陣列右方排序好的元素會一直增加，如我們的例子所示：<br>

      <br>



排序前：95 27 90 49 80 58 6 9 18 50<br>

      <br>

      </small>





      
      <ol>

        <li><small>27 90 49 80 58 6 9 18 50 [95] 95浮出</small></li>

        <li><small>27 49 80 58 6 9 18 50 [90 95] 90浮出</small></li>

        <li><small>27 49 58 6 9 18 50 [80 90 95] 80浮出</small></li>

        <li><small>27 49 6 9 18 50 [58 80 90 95] ......</small></li>

        <li><small>27 6 9 18 49 [50 58 80 90 95] ......</small></li>

        <li><small>6 9 18 27 [49 50 58 80 90 95] ......</small></li>

        <li><small>6 9 18 [27 49 50 58 80 90 95] 沒有發生交換動作，排序結束<br>
</small></li>

      
      </ol>



      <small><br>在第7步時，由於不再發生交換動作，排序提早結束，Shaker排序使用了這個概念，如果左右兩邊的元素都能先排序完成，如此未排序的元素會集中在中間，由於左右兩邊同時排序，中間未排序的部份將會很快的減少，不再出現交換動作的時間也會提前。<br>

      <br>



方法就在於氣泡排序的雙向進行，先讓氣泡排序由左向右進行，再來讓氣泡排序由右往左進行，如此完成一次排序的動作，而您必須使用left與right兩個旗標來記錄左右兩端已排序的元素位置。<br>

      <br>



一個排序的例子如下所示：<br>

      <br>



排序前：45 19 77 81 13 28 18 19 77 11<br>

      <br>

      </small>









      
      <div style="margin-left: 40px;"><small>往右排序：19 45 77 13 28 18 19 77 11 [81]<br>



向左排序：[11] 19 45 77 13 28 18 19 77 [81]<br>



      <br>



往右排序：[11] 19 45 13 28 18 19 [77 77 81]<br>



向左排序：[11 13] 19 45 18 28 19 [77 77 81]<br>



      <br>



往右排序：[11 13] 19 18 28 19 [45 77 77 81]<br>



向左排序：[11 13 18] 19 19 28 [45 77 77 81]<br>



      <br>



往右排序：[11 13 18] 19 19 [28 45 77 77 81]<br>



向左排序：[11 13 18 19 19] [28 45 77 77 81]<br>



      </small></div>



      <small><br>



如上所示，括號中表示左右兩邊已排序完成的部份，當left &gt; right時，則排序完成。 </small><br>





      <br>



      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="#Haskell">Haskell</a><br>
      </h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#define LEN 10<br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void shakerSort(int*, int, int(*)(int, int)); <br>int bubbleL2R(int* arr, int from, int to, int(*)(int, int));<br>int bubbleR2L(int* arr, int from, int to, int(*)(int, int));<br><br>void print(int*, int len);<br>int ascending(int, int);<br>int descending(int, int);<br><br>int main(void) { <br>    int number[LEN] = {10, 9, 1, 2, 5, 3, 8, 7, 12, 11};<br><br>    shakerSort(number, LEN, ascending); <br>    print(number, LEN);<br>    <br>    shakerSort(number, LEN, descending); <br>    print(number, LEN);<br><br>    return 0; <br>} <br><br>void shakerSort(int* number, int len, int(*compar)(int, int)) {<br>    int left, right;<br>    for(left = 0, right = len - 1; <br>        left &lt; right; <br>        right = bubbleL2R(number, left, right, compar), <br>        left = bubbleR2L(number, left, right, compar));<br>} <br><br>int bubbleL2R(int* arr, int left, int right, int(*compar)(int, int)) {<br>    int i, swapped;<br>    for(i = left, swapped = left; <br>            i &lt; right; i++) if(compar(arr[i + 1], arr[i]) &lt; 0) {<br>        SWAP(arr[i + 1], arr[i]);<br>        swapped = i;<br>    }<br>    return swapped;<br>}<br><br>int bubbleR2L(int* arr, int left, int right, int(*compar)(int, int)) {<br>    int i, swapped;<br>    for(i = right, swapped = right; <br>            i &gt; left; i--) if(compar(arr[i], arr[i - 1]) &lt; 0) {<br>        SWAP(arr[i], arr[i - 1]);<br>        swapped = i;<br>    }<br>    return swapped;<br>}<br><br>void print(int* arr, int len) {<br>    int i;<br>    for(i = 0; i &lt; len; i++) { printf("%d ", arr[i]); } <br>    printf("\n");<br>}<br><br>int ascending(int a, int b) { return a - b; }<br>int descending(int a, int b) { return -ascending(a, b); } <br></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre>import java.util.*;<br>import static java.lang.System.out;<br>import static java.util.Collections.swap;<br><br>public class Sort {<br>    public static &lt;T extends Comparable&lt;? super T&gt;&gt; <br>        int ascending(T t1, T t2) {  return t1.compareTo(t2); }<br><br>    public static &lt;T extends Comparable&lt;? super T&gt;&gt; <br>        int descending(T t1, T t2) { return -ascending(t1, t2); }<br>    <br>    public static &lt;T&gt; int bubbleL2R(<br>                List&lt;T&gt; list, int left, int right, Comparator&lt;? super T&gt; c) {<br>        int swapped = left;<br>        for(int i = left; i &lt; right; i++) {<br>            if(c.compare(list.get(i + 1), list.get(i)) &lt; 0) {<br>                swap(list, i + 1, i);<br>                swapped = i;<br>            }<br>        }<br>        return swapped;<br>    }<br>    <br>    public static &lt;T&gt; int bubbleR2L(<br>                List&lt;T&gt; list, int left, int right, Comparator&lt;? super T&gt; c) {<br>        int swapped = right;<br>        for(int i = right; i &gt; left; i--) {<br>            if(c.compare(list.get(i), list.get(i - 1)) &lt; 0) {<br>                swap(list, i, i - 1);<br>                swapped = i;<br>            }<br>        }<br>        return swapped;<br>    }<br>    <br>    public static &lt;T&gt; void sharkSort(<br>        List&lt;T&gt; list, Comparator&lt;? super T&gt; c) {<br>        for(int left = 0, right = list.size() - 1; <br>            left &lt; right; <br>            right = bubbleL2R(list, left, right, c), <br>            left = bubbleR2L(list, left, right, c));<br>    }<br>    <br>    public static &lt;T extends Comparable&lt;? super T&gt;&gt; <br>        void sharkSort(List&lt;T&gt; list) { sharkSort(list, Sort::ascending); }<br>    <br>    <br>    public static void main(String[] args) {<br>        List&lt;Integer&gt; list = <br>            new ArrayList&lt;&gt;(Arrays.asList(10, 9, 1, 2, 5, 3, 8, 7, 12, 11));<br>        <br>        sharkSort(list);<br>        out.println(list);<br>        <br>        sharkSort(list, Sort::descending);<br>        out.println(list);<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def ascending(a, b): return a - b<br>def descending(a, b): return -ascending(a, b)<br>    <br>def sharkSort(xs, compare = ascending):<br>    return [] if not xs else __up(xs, compare)<br>    <br>def __up(xs, compare):<br>    if not xs[1:]: <br>        return xs<br>    else:<br>        s = __down(xs[1:], compare)<br>        return ([s[0]] + __up([xs[0]] + s[1:], compare) <br>                    if compare(xs[0], s[0]) &gt; 0<br>                    else [xs[0]] + s)<br><br>def __down(xs, compare):<br>    if not xs[0:-1]: <br>        return xs<br>    else:<br>        s = __up(xs[0:-1], compare)<br>        return (__down(s[0:-1] + [xs[-1]] , compare) + [s[-1]]<br>                    if compare(xs[-1], s[-1]) &lt; 0<br>                    else s + [xs[-1]])<br>                    <br>list = [10, 9, 1, 2, 5, 3, 8, 7, 12, 11]<br><br>print(sharkSort(list))<br>print(sharkSort(list, descending))<br></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>object Sort {    <br>    def shark[T](xs: List[T], compare: (T, T) =&gt; Boolean):List[T] = {<br>        if(xs.isEmpty) Nil<br>        else up(xs, compare)<br>    }<br>    private def up[T](xs: List[T], <br>                   compare: (T, T) =&gt; Boolean): List[T] = {<br>        if(xs.tail.isEmpty) xs<br>        else {<br>            val s = down(xs.tail, compare)<br>            if(!compare(xs.head, s.head)) <br>                s.head :: up(xs.head :: s.tail, compare)<br>            else xs.head :: s<br>        }<br>    }<br>    private def down[T](xs: List[T], <br>                   compare: (T, T) =&gt; Boolean): List[T] = {<br>        if(xs.init.isEmpty) xs<br>        else {<br>            val s = up(xs.init, compare)<br>            if(compare(xs.last, s.last)) <br>                 down(s.init ++ List(xs.last), compare) ++ List(s.last)<br>            else s ++ List(xs.last)<br>        }<br>    }<br>}<br><br>val list = List(10, 9, 1, 2, 5, 3, 8, 7, 12, 11)<br><br>println(Sort.shark[Int](list, _ &gt; _))<br>println(Sort.shark[Int](list, _ &lt; _))</pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>class Sort<br>    @@ascending = -&gt;(a, b) { a - b }<br>    @@descending = -&gt;(a, b) { -@@ascending.call(a, b) }<br>    <br>    def self.ascending; @@ascending end<br>    def self.descending; @@descending end<br>    <br>    def self.shark(xs, compare)<br>        xs.empty? ? [] : up(xs, compare)<br>    end<br>    def self.up(xs, compare)<br>        if xs[1..-1].empty?<br>            xs<br>        else<br>            s = down(xs[1..-1], compare)<br>            compare.call(xs[0], s[0]) &gt; 0 ? <br>                [s[0]] + up([xs[0]] + s[1..-1], compare) : [xs[0]] + s<br>        end<br>    end<br>    private_class_method :up<br>    <br>    def self.down(xs, compare)<br>        if xs[0..-2].empty?<br>            xs<br>        else<br>            s = up(xs[0..-2], compare)<br>            compare.call(xs[-1], s[-1]) &lt; 0 ? <br>                down(s[0..-2] + [xs[-1]] , compare) + [s[-1]] : s + [xs[-1]]<br>        end<br>    end<br>    private_class_method :down<br>end<br><br>list = [10, 9, 1, 2, 5, 3, 8, 7, 12, 11]<br><br>print(Sort.shark(list, Sort.ascending).to_s + "\n")<br>print(Sort.shark(list, Sort.descending).to_s + "\n")<br></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre>function swap(list, i, j) {<br>    var ele = list[i];<br>    list[i] = list[j];<br>    list[j] = ele;<br>}<br><br>function ascending(a, b) {return a - b;}<br>function descending(a, b) {return -ascending(a, b);}<br>    <br>function sharkSort(list, compare) {<br>    for(var left = 0, right = list.length - 1; <br>        left &lt; right;<br>        right = bubbleL2R(list, left, right, compare), <br>        left = bubbleR2L(list, left, right, compare));<br>}<br><br>function bubbleL2R(list, left, right, compare) {<br>    for(var i = left, swapped = left; i &lt; right; i++) {<br>        if(compare(list[i + 1], list[i]) &lt; 0) {<br>            swap(list, i + 1, i);<br>            swapped = i;<br>        }<br>    }<br>    return swapped;<br>}<br><br>function bubbleR2L(list, left, right, compare) {<br>    for(var i = right, swapped = right; i &gt; left; i--) {<br>        if(compare(list[i], list[i - 1]) &lt; 0) {<br>            swap(list, i, i - 1);<br>            swapped = i;<br>        }<br>    }<br>    return swapped;<br>}<br><br>var list = [10, 9, 1, 2, 5, 3, 8, 7, 12, 11];<br><br>sharkSort(list, ascending);<br>print(list);<br><br>sharkSort(list, descending);<br>print(list);<br></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre>ascending a b = a - b<br>descending a b = -ascending a b<br><br>sharkSort xs compare =<br>    if xs == [] then [] else up xs compare<br>    <br>up xs compare =<br>    if tail xs == []<br>        then xs<br>        else<br>            let s = down (tail xs) compare<br>            in if compare (head xs) (head s) &gt; 0<br>                    then head s : up (head xs : tail s) compare<br>                    else head xs : s<br>                    <br>down xs compare =<br>    if init xs == []<br>        then xs<br>        else<br>            let s = up (init xs) compare<br>            in if compare (last xs) (last s) &lt; 0<br>                    then down (init s ++ [last xs]) compare ++ [last s]<br>                    else s ++ [last xs]<br><br>main = sequence [print $ sharkSort list ascending, <br>                 print $ sharkSort list descending]<br>    where list = [10, 9, 1, 2, 5, 3, 8, 7, 12, 11]<br></pre>
<br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>





      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>



<br>








<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/ShakerSort.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:04:57 GMT -->
</html>