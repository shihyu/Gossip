<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/FibonacciSearch.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:08 GMT -->
<head>








  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>費氏搜尋法</title></head><body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Algorithm Gossip:&nbsp;費氏搜尋法</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 





      
      <h2>說明</h2>

      <small>

二分搜尋法每次搜尋時，都會將搜尋區間分為一半，所以其搜尋時間為O(log(2)n)，log(2)表示以2為底的log值，這邊要介紹的費氏搜尋，其利用費氏數列作為間隔來搜尋下一個數，所以區間收斂的速度更快，搜尋時間為O(logn)。</small><br>



      
      <h2>解法</h2>

      <small>

費氏搜尋使用費氏數列來決定下一個數的搜尋位置，所以必須先製作費氏數列，這在之前有提過；費氏搜尋會先透過公式計算求出第一個要搜尋數的位置，以及其代
表的費氏數，以搜尋對象10個數字來說，第一個費氏數經計算後一定是F5，而第一個要搜尋的位置有兩個可能，例如若在下面的數列搜尋的話（為了計算方便，
通常會將索引0訂作無限小的數，而數列由索引1開始）：<br>

      <br>

      <span style="font-family: Courier New,Courier,monospace;">
-∞ 1 3 5 7 9 13 15 17 19 20</span><br>

      <br>



如果要搜尋5的話，則由索引F<sub>5</sub>（</small><small>F<sub>5</sub></small><small>表示第五個費式數作為索引，也就是5）開始搜尋，接下來如果數列中的數大於指定搜尋值時，就往左找，小於時就向右，每次找的間隔是F<sub>4</sub></small><small>（第四個費式數作為索引，也就是3）</small><small>、F<sub>3</sub></small><small>（第三個費式數作為索引，也就是2）</small><small>、F<sub>2</sub></small><small>（第二個費式數作為索引，也就是1）</small><small>來尋找，當費氏數為0時還沒找到，就表示尋找失敗，如下所示： <br>

      <img style="width: 232px; height: 123px;" alt="費式搜尋" title="費式搜尋" src="images/fibonacciSearch-1.jpg"><br>

      <br>

      </small>











      
      <div style="text-align: left;"><small>如果要搜尋19，由於第一個搜尋值索引F<sub>5</sub>處的值小於19，所以此時必須對齊數列右方，也就是將第一個搜尋值的索引改為F<sub>5</sub>+2 = 7，然後如同上述的方式進行搜尋，如下所示：<br>



      </small></div>



      
      <div style="text-align: center;"><small><img style="width: 234px; height: 138px;" alt="費式搜尋" title="費式搜尋" src="images/fibonacciSearch-2.jpg"></small></div>



      
      <div style="text-align: left;"><small>至於第一個搜尋值是如何找到的？我們可以由以下這個公式來求得，其中n為搜尋對象的個數，</small><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span></small><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span></small><small>為第y個費式數，必須大於等於n，若算出x值，則使用F<sub>x</sub>作為第一個搜尋索引，也就是第x個費式數：<br>

      </small>

      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span></small><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span></small><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;+ m = n<br></span></small><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span></small><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"> &gt;= n + 1<br>x = y - 1<br></span>



      </small></div>

      <small>

&nbsp;<br>

      </small><small>以10個搜尋對象來說：<br>

      </small>



      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span></small><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;+ m = 10 </span><br>



      </small></div>

      <small>

&nbsp;<br>



取</small><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span></small><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span></small><small> = 8, m = 2，所以可以對照費氏數列得到8是第六個費式數，所以y=6，所以x得5，也就是使用第五個費式數的值（也就是5）作為索引開始搜尋。<br>

      <br>



如果數列在索引5處的值大於指定的搜尋值，則第一個搜尋位置就是索引5的位置，如果小於指定的搜尋值，則第一個搜尋位置必須加上m，也就是F<sub>5</sub> + m = 5 + 2 = 7，也就是索引7的位置，其實加上m的原因，是為了要讓下一個搜尋值剛好是數列的最後一個位置。<br>

      <br>



費氏搜尋看來難懂，但只要掌握F<sub>y</sub> + m = n這個公式，自己找幾個實例算一次，很容易就可以理解；費氏搜尋除了收斂快速之外，由於其本身只會使用到加法與減法，在運算上也可以加快。 </small>





      <br>



      </div>



      <br>




      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Scala"><a href="#Ruby">Ruby</a><br>
      </a></h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define INT_MIN -9999<br><br>void createFibonacci(int[], int);     // 建立費氏數列 <br>int findY(int[], int);          // 找Y值 <br>int fibonacciSearch(int[], int, int);  // 費氏搜尋 <br><br>int main(void) {    <br>    int number[] = {1, 2, 3, 5, 6, 8, 9, 10, 11};<br>    int length = sizeof(number) / sizeof(int);<br>    <br>    printf("數列："); <br>    int i;<br>    for(i = 0; i &lt; length; i++) <br>        printf("%d ", number[i]); <br><br>    printf("\n輸入尋找對象："); <br>    int find;<br>    scanf("%d", &amp;find); <br><br>    if((i = fibonacciSearch(number, length, find)) &gt;= 0) <br>        printf("找到數字於索引 %d ", i); <br>    else <br>        printf("\n找不到指定數"); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br>    <br>// 建立費氏數列 <br>void createFibonacci(int Fib[], int length) { <br>    Fib[0] = 0; <br>    Fib[1] = 1; <br>    int i;<br>    for(i = 2; i &lt; length; i++) <br>        Fib[i] = Fib[i-1] + Fib[i-2]; <br>} <br><br>// 找 y 值 <br>int findY(int Fib[], int n) { <br>    int i = 0; <br>    while(Fib[i] &lt;= n) i++; <br>    i--; <br>    return i; <br>} <br><br>// 費式搜尋 <br>int fibonacciSearch(int number[], int length, int find) { <br>    int* Fib = malloc(length * sizeof(int));<br>    int f;<br>    for(f = 0; f &lt; length; f++) {<br>        Fib[f] = INT_MIN;<br>    }<br>    <br>    createFibonacci(Fib, length); <br>    <br>    int y  = findY(Fib, length + 1); <br>    int m = length - Fib[y]; <br>    int x = y - 1; <br>	// printf("\nx = %d, m = %d, Fib[x] = %d\n\n", x, m, Fib[x]); <br>    int i = x; <br>    if(number[i] &lt; find) <br>        i += m; <br><br>    int result = -1;<br>    while(Fib[x] &gt; 0) { <br>        if(number[i] &lt; find) <br>            i += Fib[--x]; <br>        else if(number[i] &gt; find) <br>            i -= Fib[--x]; <br>        else {<br>            result = i;<br>            break;<br>        }<br>    } <br>    <br>    free(Fib);<br><br>    return result; <br>}  <br></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre>public class Search {    <br>    public static int fibonacci(int[] number, int des) { <br>        int[] fib = createFibonacci(number.length); <br>	int max = number.length - 1;<br>        int y  = findY(fib, max+1); <br>        int m = max - fib[y];<br>        int x = y - 1;<br>        // System.out.printf("\nx=%d, m=%d, fib[x]=%d", x, m, fib[x]);<br>        int i = x;<br><br>        if(number[i] &lt; des) <br>            i += m; <br><br>        while(fib[x] &gt; 0) { <br>            if(number[i] &lt; des) <br>                i += fib[--x]; <br>            else if(number[i] &gt; des) <br>                i -= fib[--x]; <br>            else <br>                return i; <br>        } <br>        <br>        return -1; <br><br>    }<br>    <br>    private static int[] createFibonacci(int max) {<br>        int[] fib = new int[max];<br>        for(int i = 0; i &lt; fib.length; i++) {<br>            fib[i] = Integer.MIN_VALUE;   <br>        }<br><br>        fib[0] = 0; <br>        fib[1] = 1; <br><br>        for(int i = 2; i &lt; max; i++) <br>            fib[i] = fib[i-1] + fib[i-2];<br>        <br>        return fib;<br>    }<br>    <br>    private static int findY(int[] fib, int n) {<br>        int i = 0; <br>        while(fib[i] &lt;= n) i++; <br>        i--; <br>        return i;     <br>    }<br>    <br>    public static void main(String[] args) {<br>        int[] number = {1, 2, 3, 5, 6, 8, 9, 10, 11};<br>        int find = Search.fibonacci(number, 2);<br>        System.out.println(find &gt;= 0 ? "找到數值於索引" + find : "找不到數值"); <br>    }<br>} </pre>



      <br><ul><li><a name="Python"></a>Python</li></ul><pre>import sys<br>def search(number, des):<br>    fib = fibonacci(len(number))<br>    max = len(number) - 1<br>    y = findY(fib, max + 1)<br>    m = max - fib[y]<br>    x = y - 1<br>    # print("\nx=%d, m=%d, fib[x]=%d" % (x, m, fib[x]))<br>    i = x<br>    if number[i] &lt; des:<br>        i += m<br>    while fib[x] &gt; 0:<br>        if number[i] &lt; des:<br>            x -= 1<br>            i += fib[x]<br>        elif number[i] &gt; des:<br>            x -= 1<br>            i -= fib[x]<br>        else:<br>            return i<br>    return -1<br><br>def fibonacci(max):<br>    fib = [sys.maxsize] * max<br>    fib[0] = 0<br>    fib[1] = 1<br>    for i in range(2, max):<br>        fib[i] = fib[i -1] + fib[i - 2]<br>    return fib<br><br>def findY(fib, n):<br>    i = 0<br>    while fib[i] &lt;= n:<br>        i += 1<br>    return i - 1<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort()<br>find = search(number, 3)<br>print("找到數值於索引 " + str(find) if find &gt;= 0 else "找不到數值")</pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre>object Search {<br>    def fibonacci(number: Array[Int], des: Int): Int = {<br>        val fib = fibonacci(number.length)<br><br>        def y(i: Int): Int = if(fib(i) &lt;= number.length) y(i + 1) else i - 1<br>        def search(x: Int, i: Int): Int = {<br>            if(fib(x) &gt; 0 &amp;&amp; number(i) != des) {<br>                if(number(i) &lt; des) search(x - 1, i + fib(x - 1))<br>                else search(x - 1, i - fib(x - 1))<br>            } else i<br>        }<br>        <br>        val x = y(0) - 1<br>        if(number(x) &lt; des) search(x, x + number.length - 1 - fib(x + 1))<br>        else search(x, x)<br>    }<br>    <br>    private def fibonacci(max: Int): Array[Int] = {<br>        def fib(n: Int): Int = n match {<br>            case 0 =&gt; 0<br>            case 1 =&gt; 1<br>            case _ =&gt; fib(n - 1) + fib(n - 2)<br>        }<br>        (for(i &lt;- 0 until max) yield fib(i)).toArray<br>    }<br>}<br><br>val number = Array(1, 2, 3, 4, 6, 7, 8)<br>val find = Search.fibonacci(number, 3)<br>println(if(find &gt;= 0) "找到數值於索引 " + find else "找不到數值")<br></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>class Integer<br>    N_BYTES = [42].pack('i').size<br>    N_BITS = N_BYTES * 8<br>    MAX = 2 ** (N_BITS - 2) - 1<br>    MIN = -MAX - 1<br>end<br><br>def search(number, des)<br>    fib = fibonacci(number.length)<br>    max = number.length - 1<br>    y = findY(fib, max + 1)<br>    m = max - fib[y]<br>    x = y - 1<br>    i = x<br>    if number[i] &lt; des<br>        i += m<br>    end<br>    while fib[x] &gt; 0<br>        if number[i] &lt; des<br>            x -= 1<br>            i += fib[x]<br>        elsif number[i] &gt; des<br>            x -= 1<br>            i -= fib[x]<br>        else<br>            return i<br>        end<br>    end<br>    -1<br>end<br><br>def fibonacci(max)<br>    fib = Array.new(max, Integer::MAX)<br>    fib[0] = 0<br>    fib[1] = 1<br>    2.upto(max - 1) { |i|<br>        fib[i] = fib[i -1] + fib[i - 2]<br>    }<br>    fib<br>end<br><br>def findY(fib, n)<br>    i = 0<br>    while fib[i] &lt;= n<br>        i += 1<br>    end<br>    i - 1<br>end<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort!<br>find = search(number, 2)<br>print find &gt;= 0 ? "找到數值於索引 ".encode("Big5") + find.to_s : <br>         "找不到數值".encode("Big5"), "\n"<br></pre>




 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





     <br>




 
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/FibonacciSearch.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:10 GMT -->
</html>