<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/QuickSort2.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:03 GMT -->
<head>









  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">







  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">







  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>快速排序法（二）</title></head><body>







<h3><a href="../index.html">From
Gossip@Openhome</a></h3>







<h1><a href="index-2.html">Algorithm Gossip:&nbsp;快速排序法（二）</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> 





      
      <h2>說明</h2>

      <small>

在 <a href="QuickSort1.htm">快速排序法（一） </a>中，每次將最左邊元素設為軸，而之前快速排序法的速度在於軸的選擇，在這裡的實作中，是選定中間的元素值作比較與分割，這可以增加快速排序法效率。</small><br>



      
      <h2>解法</h2>

      <small>

在這邊的實例作中，取中間元素S的值作比較，並同時由左而右及由右至左分出子數列：<br>
      <br>
      <img style="width: 549px; height: 176px;" alt="" src="images/quickSort2-1.jpg"><br>
      <br>
尚未處理的數列會是在中間被逐步消化完畢，原本選定的S也會被分至子數列之中：<br>
      <br>
      <img style="width: 540px; height: 87px;" alt="" src="images/quickSort2-2.jpg"><br>
      <br>
接下來對左邊子數列與右邊子數列進行相同動作，直到完成排序目的。<br>
      <br>
</small><small></small>




      
      <h2> 實作：<a href="#C">C</a>&nbsp;&nbsp; &nbsp;<a href="#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="#Scala"></a><a href="#Ruby">Ruby</a><br>
      </h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void quickSort(int[], int, int); <br><br>int main(void) { <br>    srand(time(NULL)); <br>    <br>    int number[MAX] = {0};    <br><br>    printf("排序前："); <br>    int i;  <br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>        printf("%d ", number[i]); <br>    } <br><br>    quickSort(number, 0, MAX-1); <br><br>    printf("\n排序後："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>void quickSort(int number[], int left, int right) { <br>    if(left &lt; right) { <br>        int s = number[(left+right)/2]; <br>        int i = left - 1; <br>        int j = right + 1; <br><br>        while(1) { <br>            while(number[++i] &lt; s) ;  // 向右找 <br>            while(number[--j] &gt; s) ;  // 向左找 <br>            if(i &gt;= j) <br>                break; <br>            SWAP(number[i], number[j]); <br>        } <br><br>        quickSort(number, left, i-1);   // 對左邊進行遞迴 <br>        quickSort(number, j+1, right);  // 對右邊進行遞迴 <br>    } <br>} <br></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre>public class Sort {<br>    public static void quick(int[] number) {<br>        sort(number, 0, number.length-1);<br>    }<br>    <br>    private static void sort(int[] number, int left, int right) {<br>        if(left &lt; right) { <br>            int s = number[(left+right)/2]; <br>            int i = left - 1; <br>            int j = right + 1; <br><br>            while(true) { <br>                // 向右找<br>                while(number[++i] &lt; s) ;<br>                // 向左找<br>                while(number[--j] &gt; s) ; <br>                if(i &gt;= j) <br>                    break; <br>                swap(number, i, j); <br>            } <br><br>            sort(number, left, i-1);   // 對左邊進行遞迴 <br>            sort(number, j+1, right);  // 對右邊進行遞迴 <br>        }<br>    }<br>    <br>    private static void swap(int[] number, int i, int j) {<br>        int t = number[i]; <br>        number[i] = number[j]; <br>        number[j] = t;<br>    }<br>}<br></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre>def sort(number):<br>    realsort(number, 0, len(number) - 1)<br><br>def realsort(number, left, right):<br>    if left &lt; right:<br>        s = number[(left + right) // 2]<br>        i = left - 1<br>        j = right + 1<br>        while True:<br>            while True:<br>                i += 1<br>                if number[i] &gt;= s:<br>                    break<br>            while True:<br>                j -= 1<br>                if number[j] &lt;= s:<br>                    break<br>            if i &gt;= j:<br>                break<br>            number[i], number[j] = number[j], number[i]<br>        realsort(number, left, i - 1)<br>        realsort(number, j + 1, right)</pre>&nbsp;<br><ul><li><a name="Scala"></a>Scala</li></ul><pre>object Sort {<br>    def quick(number: Array[Int]) {<br>        sort(number, 0, number.length - 1)<br>    }<br>    <br>    private def sort(number: Array[Int], left: Int, right: Int) {<br>        if(left &lt; right) {<br>            val s = number((left + right) / 2)<br>            var i = left - 1<br>            var j = right + 1<br>            do {<br>                do i += 1 while(number(i) &lt; s)<br>                do j -= 1 while(number(j) &gt; s)<br>            } while(if(i &gt;= j) false else {swap(number, i, j); true})<br>            sort(number, left, i - 1)<br>            sort(number, j + 1, right)<br>        }<br>    }<br>    <br>    private def swap(number: Array[Int], i: Int, j: Int) {<br>        val t = number(i)<br>        number(i) = number(j)<br>        number(j) = t<br>    }<br>}<br></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre>def sort(number)<br>    realsort(number, 0, number.length - 1)<br>end<br><br>def realsort(number, left, right)<br>    if left &lt; right<br>        s = number[(left + right) / 2]<br>        i = left - 1<br>        j = right + 1<br>        while true<br>            while true<br>                i += 1<br>                if number[i] &gt;= s<br>                    break<br>                end<br>            end<br>            while true<br>                j -= 1<br>                if number[j] &lt;= s<br>                    break<br>                end<br>            end<br>            if i &gt;= j<br>                break<br>            end<br>            number[i], number[j] = number[j], number[i]<br>        end<br>        realsort(number, left, j - 1)<br>        realsort(number, j + 1, right)<br>    end<br>end<br></pre>
      <br>
</td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>





      <br>





      
      
 
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><br>





      <br>




      
      
      
      
      <center>
      
      
      
      
       <br>





      </center>





 </td>


    </tr>


  
  </tbody>
</table>


<br>







<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/AlgorithmGossip/QuickSort2.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:05:03 GMT -->
</html>