<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V2/BlockingQueue.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:19 GMT -->
<head>











  
  
  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">










  
  
  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">










  
  
  
  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type"><title>BlockingQueue</title></head><body>










<h3><a href="../index.html">From
Gossip@Openhome</a></h3>










<h1><a href="index-2.html">Java Gossip:&nbsp;BlockingQueue</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>佇列（<span style="font-weight: bold;"></span>Queue）是個先前先出（First In First
Out, FIFO）的資料結構。在JDK 5.0中新增了Blocking Queue，在多執行緒的情況下，如果Blocking
Queue的內容為空，而有個執行緒試圖從Queue中取出元素，則該執行緒會被Block，直到Queue有元素時才解除Block，反過來說，如果
Blocking
Queue滿了，而有個執行緒試圖再把資料填入Queue中，則該執行緒會被Block，直到Queue中有元素被取走後解除Block。<br>

      <br>


BlockingQueue的幾個主要操作為下：</small>
      <br>


      
      <table style="text-align: left; width: 565px; height: 76px;" border="1" cellpadding="2" cellspacing="2">


  <tbody>


    <tr>


      <td style="background-color: rgb(204, 204, 204);"><small>方法</small></td>


      <td style="background-color: rgb(204, 204, 204);"><small>說明</small></td>


    </tr>


    <tr>


      <td><small>add</small></td>


      <td><small>加入元素，如果佇列是滿的，則丟出<tt>IllegalStateException</tt></small></td>


    </tr>


    <tr>


      <td><small>remove</small></td>


      <td><small>傳回並從佇列移除元素，如果佇列是空的，則丟出<tt>NoSuchElementException</tt></small></td>


    </tr>


    <tr>


      <td><small>element</small></td>


      <td><small>傳回元素，如果佇列是空的，則丟出<tt>NoSuchElementException</tt></small></td>


    </tr>


    <tr>


      <td><small>offer</small></td>


      <td><small>加入元素並傳回true，如果佇列是滿的，則傳回false</small></td>


    </tr>


    <tr>


      <td><small>poll</small></td>


      <td><small>傳回並從佇列移除元素，如果佇列是空的，則<span style="font-family: monospace;">傳回null</span></small></td>


    </tr>


    <tr>


      <td><small>peek</small></td>


      <td><small>傳回元素，如果佇列是空的，則<span style="font-family: monospace;">傳回null</span></small></td>


    </tr>


    <tr>


      <td><small>put</small></td>


      <td><small>加入元素，如果佇列是滿，就block</small></td>


    </tr>


    <tr>


      <td><small>take</small></td>


      <td><small>傳回並移除元素，如果佇列是空的，就block</small></td>


    </tr>


  
        
        </tbody>
      
      </table>


      <br>

      <small>
在<tt>java.util.concurrent下提供幾種不同的Blocking Queue，Array</tt>BlockingQueue要指定容量大小來建構，<tt>LinkedBlockingQueue預設沒有容量上限，但也可以指定容量上限，</tt><tt>PriorityBlockingQueue是根據優先權（Priority）來移除元素。</tt><br>

      <br>


在這邊以 <a href="WaitNotify.htm">wait()、notify()</a> 中的生產者、消費者程式為例，使用BlockQueue來加以改寫，好處是我們不用親自處理wait、notify的細節，首先生產者改寫如下：</small>
      <br>


      
      <ul>

        <li>Producer.java</li>

      
      </ul>


      
      <pre>package onlyfun.caterpillar;<br><br>import java.util.concurrent.BlockingQueue;<br><br>public class Producer implements Runnable {<br>    private BlockingQueue&lt;Integer&gt; queue;<br>	<br>    public Producer(BlockingQueue&lt;Integer&gt; queue) {<br>        this.queue = queue;<br>    }<br><br>    public void run() {<br>        for(int product = 1; product &lt;= 10; product++) {<br>            try {<br>                // wait for a random time<br>                Thread.sleep((int) Math.random() * 3000);<br>                queue.put(product);<br>            }<br>            catch(InterruptedException e) {<br>                e.printStackTrace();<br>            }<br>        } <br>    }<br>}</pre>


      <br>

      <small>
消費者類別改寫如下：</small><br>


      
      <ul>

        <li>Consumer.java</li>

      
      </ul>


      
      <pre>package onlyfun.caterpillar;<br><br>import java.util.concurrent.BlockingQueue;<br><br>public class Consumer implements Runnable {<br>    private BlockingQueue&lt;Integer&gt; queue;<br>	<br>    public Consumer(BlockingQueue&lt;Integer&gt; queue) {<br>        this.queue = queue;<br>    }<br>	<br>    public void run() {<br>        for(int i = 1; i &lt;= 10; i++) {<br>            try {<br>                // wait for a random time<br>                Thread.sleep((int) (Math.random() * 3000));<br>                queue.take();<br>            }<br>            catch(InterruptedException e) {<br>                e.printStackTrace();<br>            }<br>        }<br>    }<br>}</pre>


      <br>

      <small>
可以使用下面這個程式來簡單的測試一下：</small><br>


      
      <ul>

        <li>BlockingQueueDemo.java</li>

      
      </ul>


      
      <pre>package onlyfun.caterpillar;<br><br>import java.util.concurrent.ArrayBlockingQueue;<br>import java.util.concurrent.BlockingQueue;<br><br>public class BlockingQueueDemo {<br>    public static void main(String[] args) {<br>        BlockingQueue&lt;Integer&gt; queue = new ArrayBlockingQueue&lt;Integer&gt;(1); <br>        <br>        Thread producerThread = new Thread(new Producer(queue)); <br>        Thread consumerThread = new Thread(new Consumer(queue)); <br> <br>        producerThread.start(); <br>        consumerThread.start(); <br>    }<br>}</pre>

 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>



      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>



      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>



      <br>


      
      
      <center>
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>



      </center>



 </td>


    </tr>


  
  </tbody>
</table>


<br>

<br>






<br>










<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/JavaGossip-V2/BlockingQueue.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:14:19 GMT -->
</html>