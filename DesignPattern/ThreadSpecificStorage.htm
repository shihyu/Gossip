<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/ThreadSpecificStorage.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:52 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Thread-Specific Storage 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern:&nbsp;Thread-Specific
Storage 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
   <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>   <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>無論如何，要編寫一個多執行緒安全（thread-safe）的程式總是困難的，為了使用的共用資源，您必須小心
的對共用資源進行同步，同步帶來一定的效
能延遲，而另一方面，在處理同步的時候，又要注意物件的鎖定與釋放，避免產生死結，種種因素都使得編寫多執行緒程式變得困難。<br>
      <br>
Thread-Specific
Storage模式嘗試從另一個角度來解釋多執行緒共用資源的問題，其思考點很簡單，即然共用資源這麼困難，那麼就乾脆不要共用，何不為每個執行緒創造一
個資源的複本，將每一個執行緒存取資料的行為加以隔離，其實現的方法，就是給予每一個執行緒一個特定空間來保管該執行緒所獨享的資源，也因此而稱之為
Thread- Specific Storage模式。<br>
      <br>
在Java中可以使用java.lang.ThreadLocal來實現這個模式，這個類別是從1.2之後開始提供，不過先來看看，如何自行實
現一個簡單的ThreadLocal類別：</small> <br>
      <ul>
        <li> ThreadLocal.java </li>
      </ul>
      <pre>import java.util.*;<br><br>public class ThreadLocal {<br>    private Map storage = Collections.synchronizedMap(new HashMap());<br><br>    public Object get() {<br>        Thread current = Thread.currentThread();<br>        Object o = storage.get(current);<br><br>        if(o == null &amp;&amp; !storage.containsKey(current)) {<br>            o = initialValue();<br>            storage.put(current, o);<br>        }<br><br>        return o;<br>    }<br><br>    public void set(Object o) {<br>        storage.put(Thread.currentThread(), o);<br>    }<br><br>    public Object initialValue() {<br>        return null;<br>    }<br>} <br></pre>
      <br>
      <small>可以看到程式中使用執行緒本身作為key值，並將所獲得的資源放在Map物件中，如果第一次使用get()，也配置一個空間給
執行緒，而
initialValue()可以用來設定什麼樣的初值要先儲存在這個空間中，在這邊先簡單的設定為null。<br>
      <br>
現在假設有一個原先在單執行緒環境下的資源Some，現在考慮要該其在多執行緒環境下使用，若不想考慮複雜的執行緒共用互斥問題，此時可以使用
ThreadLocal類別來使用Some，例如：</small> <br>
      <ul>
        <li> Resource.java </li>
      </ul>
      <pre>public class Resource {<br>    private static final ThreadLocal threadLocal = new ThreadLocal();<br><br>    public static Some getResource() {<br>        Some resource = (SomeResource) threadLocal.get();<br><br>        if(resource == null) {<br>            resource = new Some();<br>            threadLocal.set(resource);<br>        }<br><br>        return resource;<br>    }<br>} <br></pre>
      <br>
      <small>上面所實作的ThreadLocal類別只是一個簡單的示範，您可以使用java.lang.ThreadLocal來實
現Thread- Specific
Storage模式，以獲得更好的效能，在這邊簡單的示範一個Log程式，它可以記錄每個執行緒的活動，所使用的是
java.util.logging中的類別：</small><br>
      <ul>
        <li> SimpleThreadLogger.java </li>
      </ul>
      <pre>import java.io.*;<br>import java.util.logging.*;                            <br> <br>public class SimpleThreadLogger {<br>    private static final ThreadLocal threadLocal = new ThreadLocal();<br><br>    public static void log(String msg) {<br>        getThreadLogger().log(Level.INFO, msg);<br>    }<br><br>    private static Logger getThreadLogger() {<br>        Logger logger = (Logger) threadLocal.get();<br><br>        if(logger == null) {<br>            try {<br>                logger = Logger.getLogger(Thread.currentThread().getName());<br>                // Logger 預設是在主控台輸出<br>                // 我們加入一個檔案輸出的Handler<br>                // 它會輸出XML的記錄文件<br>                logger.addHandler(<br>                    new FileHandler(<br>                           Thread.currentThread().getName() <br>                           + ".log"));<br>            }<br>            catch(IOException e) {}<br><br>            threadLocal.set(logger);<br>        }<br><br>        return logger;<br>    }<br>} <br></pre>
      <small><br>
可以使用下面這個程式來測試：</small><br>
      <ul>
        <li> LoggerTest.java </li>
      </ul>
      <pre>public class LoggerTest {<br>    public static void main(String[] args) {<br>        new Test("thread1").start();<br>        new Test("thread2").start();<br>        new Test("thread3").start();<br>    }<br>}<br><br>class Test extends Thread {<br>    public Test(String name) {<br>        super(name);<br>    }<br><br>    public void run() {<br>        for(int i = 0; i &lt; 10; i++) {<br>            SimpleThreadLogger.log(getName() + ": message " + i);<br>            try {<br>                Thread.sleep(1000);<br>            }<br>            catch(Exception e) {<br>                SimpleThreadLogger.log(e.toString());<br>            }<br>        }<br>    }<br>} <br></pre>
      <br>
      <small>執行LoggerTest可以在主控台上看到輸出，並可以在同一目錄下找到三個log檔，分別記錄了三個執行緒的活動，透過
ThreadLocal，不用撰寫複雜的執行緒共用互斥邏輯。<br>
      <br>
Thread-Specific
Storage模式的意義之一，就是「有時不共用是好的」，如果共用會產生危險，那就不要共用，當然，這種方式所犧牲掉的就是空間，您必須為每一個執行
緒保留它們獨立的空間，這是一種以空間換取時間與安全性的方法。</small> </td>
    </tr>
  </tbody>
</table>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/ThreadSpecificStorage.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:52 GMT -->
</html>