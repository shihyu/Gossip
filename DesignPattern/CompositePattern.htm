<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/CompositePattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:14 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Composite 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern: Composite 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
<script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>假設您今天要開發一個動畫編輯程式，動畫由影格（Frame）組成，數個影格組合為動畫清單，動畫清單也可以由其它已完成的動
畫清單組成，也可以在動畫清單與清單之間加入個別影格。<br>
      <br>
無論是影格或動畫清單都可以播放，而動畫清單負責的就是組合影格或動畫清單，所以可以這麼設計：<br>
      <img style="width: 593px; height: 307px;" alt="" src="images/Composite-1.jpg"><br>
      <br>
      </small><small>對於Frame而言，Playlist是一個容器，然而Playlist也實作Playable，所以它也可
以播放，您可以進一步地將Playlist組合至另一個Playlist中，以形成更長的播放清單。<br>
      <br>
以Java實現的話。<br>
      </small>
      <pre>import java.util.*;<br><br>interface Playable {<br>    void play();<br>}<br><br>class Frame implements Playable {<br>    private String image;<br>    Frame(String image) {<br>        this.image = image;<br>    }<br>    public void play() {<br>        System.out.println("播放 " + image);<br>    }<br>}<br><br>class Playlist implements Playable {<br>    private List&lt;Playable&gt; list = new ArrayList&lt;Playable&gt;();<br>    public void add(Playable playable) {<br>        list.add(playable);<br>    }<br>    public void play() {<br>        for(Playable playable : list) {<br>            playable.play();<br>        }<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Frame logo = new Frame("片頭 LOGO");<br>        <br>        Playlist playlist1 = new Playlist();<br>        playlist1.add(new Frame("Duke 左揮手"));<br>        playlist1.add(new Frame("Duke 右揮手"));<br>        <br>        Playlist playlist2 = new Playlist();<br>        playlist2.add(new Frame("Duke 走左腳"));<br>        playlist2.add(new Frame("Duke 走右腳"));<br>        <br>        Playlist all = new Playlist();<br>        all.add(logo);<br>        all.add(playlist1);<br>        all.add(playlist2);<br>        <br>        all.play();<br>    }<br>}</pre>
      <small> </small><small><br>
以Python實現的話：<br>
      </small>
      <pre>class Frame:<br>    def __init__(self, image):<br>        self.image = image<br>    def play(self):<br>        print("播放 " + self.image)<br><br>class Playlist:<br>    def __init__(self):<br>        self.list = []<br>    def add(self, playable):<br>        self.list.append(playable);<br>    def play(self):<br>        for playable in self.list:<br>            playable.play()<br>            <br>logo = Frame("片頭 LOGO")<br>        <br>playlist1 = Playlist()<br>playlist1.add(Frame("Duke 左揮手"))<br>playlist1.add(Frame("Duke 右揮手"))<br>        <br>playlist2 = Playlist()<br>playlist2.add(Frame("Duke 走左腳"))<br>playlist2.add(Frame("Duke 走右腳"))<br>        <br>all = Playlist()<br>all.add(logo)<br>all.add(playlist1)<br>all.add(playlist2)<br><br>all.play();</pre>
      <small><br>
以 UML 來表示Composite模式的結構： <br>
      <img style="width: 556px; height: 329px;" alt="" src="images/Composite-2.jpg"><br>
      <br>
      </small><small><br>
具有層次性或組合性的物件可以使用Composite模式，像是電路元件、視窗元件等，使用Composite模式可以大大減低這些元件設計的複雜度，以
Java標準API中AWT視窗元件為例，</small><small>Component上有個paint()方法，可以進行元件的繪製，</small><small>Container
可以容納Component（如Button、Label等），而Container繼承Component，所以Container也可以容納
Container，這也是Composite模式的實際例子：<br>
      <img style="width: 627px; height: 237px;" alt="" src="images/Composite-3.jpg"><br>
      <br>
      <br>
      <br>
      <br>
      </small> </td>
    </tr>
  </tbody>
</table>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/CompositePattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:17 GMT -->
</html>