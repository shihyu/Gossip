<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/InterpreterPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:42 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Interpreter 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern:&nbsp;Interpreter 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
 <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>     <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; text-align: left; width: 690px;">
      <small>對於一個具有層次節點關係的問題來說，如果您要剖析每一個節點，可以使用Interpreter模式，直譯器模式有些類似演算
法中的個別擊破方式，對每個父節點剖析出其子節點組合，然而交給子節點剖析物件繼續剖析，直到剖析至終端節點為止。<br>
      <br>
假設您要實作一個直譯器，可以直譯您文字檔中的程式，並依您自訂的程式文法來執行程式，幾個簡單的程式如下：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">PROGRAM
      </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
PRINT dog SPACE </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
PRINT is SPACE </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
PRINT an SPACE </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
PRINT animai </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">END
      </span><br>
      </small></div>
      <small>&nbsp;<br>
您的這式程個會印出"dog is an animal"的文字，再來一個例子是：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">PROGRAM
      </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
REPEAT 2 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
LINEBREAK </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PRINT dog </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BREAK </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
END </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">END</span><br>
      </small></div>
      <small>&nbsp;<br>
      <br>
這個程式要印出：</small> <br>
      <table style="text-align: left; background-color: rgb(0, 0, 0); font-family: Times New Roman,Times,serif; color: rgb(255, 255, 255); width: 703px; height: 76px;" border="0" cellpadding="2" cellspacing="2">
        <tbody>
          <tr>
            <td style="width: 740px;"><small>------------------------------
            <br style="font-weight: bold;">
&nbsp;dog <br style="font-weight: bold;">
------------------------------ <br style="font-weight: bold;">
&nbsp;dog</small></td>
          </tr>
        </tbody>
      </table>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><br>
      <small>您也可以任意的組合程式，例如：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">PROGRAM
      </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
PRINT begin </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
BREAK </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
REPEAT 3 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
REPEAT 2 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PRINT dog SPACE </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PRINT is SPACE </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PRINT a SPACE </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
PRINT animal </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BREAK </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
END </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
END </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">END</span><br>
      </small></div>
      <small>&nbsp;<br>
這個程式中的幾個關鍵字是PROGRAM、PRINT、SPACE、BREAK、LINEBREAK、REPEAT、END，
PROGRAM是表示程式開始，以END作結，PRINT可以印出一個無空白的字串，SPACE印出一個空白，BREAK是換行，而LINEBREAK是
畫一個直線並換行，REPEAT是迴圈指令，可以指定迴圈次數，以END作結。<br>
      <br>
觀察程式，可以制定出以下的文法，如下：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&lt;program&gt;
::= PROGRAM &lt;command list&gt; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&lt;command
list&gt; ::= &lt;command&gt;* END </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&lt;command&gt;
::= &lt;repeat&gt; | &lt;primitive&gt; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&lt;repeat&gt;
::= REPEAT &lt;number&gt; &lt;command list&gt; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&lt;primitive&gt;
::= PRINT &lt;string&gt; </span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">|
BREAK | SPACE | LINEBREAK</span><br>
      </small></div>
      <small>&nbsp;<br>
程式文法制定需要對程式進行語句分析與定義，在這邊並不討論這個課題，在程式中，command節點由primitive或repeat兩個節點任意組
合，一個command list節點則是零個以上的command節點組合而成，其中repeat還可以組合command
list節點，這是 <a href="CompositePattern.htm">Composite 模式</a>
的應用，可以在程式中組合巢狀迴圈。<br>
      <br>
在直譯程式時，以讀到PROGRAM作為開始節點，接下來剖析程式為command list 節點，並將它們丟給專門剖析command
list的物件繼續剖析，這個物件將之分析，看是不是有repeat或primitive節點，如果有就再往下交由專屬物件進行剖析，如此層層剝開，並由
專屬物件負責剖析工作。<br>
      <br>
以下是個示範程式：<br>
      </small>
      <pre>import java.util.*;<br>import java.io.*;<br><br>interface Node { <br>    void parse(Context context); <br>    void execute();<br>}<br><br>// &lt;program&gt; ::= PROGRAM &lt;command list&gt; <br>class Program implements Node { <br>    private Node commandList; <br>    public void parse(Context context) { <br>        context.skipToken("PROGRAM"); <br>        commandList = new CommandList(); <br>        commandList.parse(context); <br>    } <br>    public void execute() {<br>        commandList.execute();<br>    }<br>}  <br><br>// &lt;command list&gt; ::= &lt;command&gt;* END <br>class CommandList implements Node { <br>    private List&lt;Node&gt; commands = new ArrayList&lt;Node&gt;();<br>    public void parse(Context context) { <br>        while (true) { <br>            if(context.currentToken() == null) { <br>                System.err.println("Missing 'END'"); <br>                break; <br>            } <br>            else if(context.currentToken().equals("END")) {<br>                context.skipToken("END"); <br>                break; <br>            } <br>            else { <br>                Node command = new Command(); <br>                command.parse(context); <br>                commands.add(command); <br>            } <br>        } <br>    }<br>    public void execute() {<br>        for(Node command : commands) {<br>            command.execute();<br>        }<br>    }<br>}  <br><br>// &lt;command&gt; ::= &lt;repeat&gt; | &lt;primitive&gt; <br>class Command implements Node { <br>    private Node node;<br>    public void parse(Context context) { <br>        if(context.currentToken().equals("REPEAT")) { <br>            node = new Repeat(); <br>            node.parse(context); <br>        } else { <br>            node = new Primitive(); <br>            node.parse(context); <br>        } <br>    }<br>    public void execute() {<br>        node.execute();<br>    }<br>}<br><br>// &lt;primitive&gt; ::= PRINT &lt;string&gt; | SPACE | BREAK | LINEBREAK<br>class Primitive implements Node {<br>    private String name;<br>    private String text;<br>    public void parse(Context context) {<br>        name = context.currentToken();<br>        context.skipToken(name);<br>        if (!(name.equals("PRINT") ||<br>              name.equals("BREAK") ||<br>              name.equals("LINEBREAK") ||<br>              name.equals("SPACE"))) {<br>            System.err.println("Undefined Command");<br>        }<br>        if (name.equals("PRINT")) {<br>            text = context.currentToken();<br>            context.nextToken();<br>        }<br>    } <br>    public void execute() {<br>        if(name.equals("PRINT"))<br>            System.out.print(text);<br>        else if(name.equals("SPACE"))<br>            System.out.print(" ");<br>        else if(name.equals("BREAK"))<br>            System.out.println();<br>        else if(name.equals("LINEBREAK"))<br>            System.out.println("\n------------------------------");<br>    }<br>}<br><br>class Repeat implements Node {<br>    private int number;<br>    private Node commandList;<br>    public void parse(Context context) {<br>        context.skipToken("REPEAT");<br>        number = context.currentNumber();<br>        context.nextToken();<br>        commandList = new CommandList();<br>        commandList.parse(context);<br>    }<br>    public void execute() {<br>        for(int i = 0; i &lt; number; i++) {<br>            commandList.execute();<br>        }<br>    }<br>}<br><br>class Context {<br>    private Iterator&lt;String&gt; tokens;<br>    private String currentToken;<br><br>    Context(String filename) throws IOException {<br>        List&lt;String&gt; tokenList = new ArrayList&lt;String&gt;();<br>        BufferedReader reader = new BufferedReader(<br>                                     new FileReader(filename));<br>        String input = null;<br>        while((input = reader.readLine()) != null) {<br>            for(String token : input.trim().split("\\s+")) {<br>                tokenList.add(token);<br>            }<br>        }<br>        reader.close();<br>        tokens = tokenList.iterator();<br>        nextToken();<br>    }<br><br>    String nextToken() {<br>        currentToken = null;<br>        if (tokens.hasNext()) {<br>            currentToken = tokens.next();<br>        } <br>        return currentToken;<br>    }<br><br>    String currentToken() {<br>        return currentToken;<br>    }<br><br>    void skipToken(String token) {<br>        if (!token.equals(currentToken)) {<br>            System.err.println("Warning: " + token + <br>                           " is expected, but " + <br>                           currentToken + " is found.");<br>        }<br>        nextToken();<br>    }<br><br>    int currentNumber() {<br>        return Integer.parseInt(currentToken);<br>    }<br>} <br><br>public class Main {<br>    public static void main(String[] args) throws Exception {<br>        Node node = new Program();<br>        node.parse(new Context(args[0]));<br>        node.execute();<br>    }<br>}</pre>
      <br>
      <small>程式首先剖析完所有節點，再對節點執行任務，來看一下Intrepreter模式的 UML&nbsp;類別結構圖： <br>
      <img style="width: 555px; height: 162px;" alt="" src="images/Interpreter-1.jpg"><br>
      </small><small><br>
TerminalExpression就像我們的primitive，再剖析下去已經沒有子節點了，而NonterminalExpression就像是
repeat，其中也使用了 </small><small><a href="CompositePattern.htm">Composite
模式</a></small><small>，可以遞迴地組合句子為更複雜的語句。<br>
      <br>
以下是使用Python來實作範例：<br>
      </small>
      <pre>import sys<br>import re<br><br># &lt;program&gt; ::= PROGRAM &lt;command list&gt; <br>class Program:<br>    def parse(self, context):<br>        context.skipToken("PROGRAM")<br>        self.commandList = CommandList() <br>        self.commandList.parse(context)<br><br>    def execute(self):<br>        self.commandList.execute()<br><br># &lt;command list&gt; ::= &lt;command&gt;* END <br>class CommandList:<br>    def parse(self, context):<br>        self.commands = []<br>        while True:<br>            if not context.currentToken():<br>                print("Missing 'END'")<br>                break<br>            elif context.currentToken() == "END":<br>                context.skipToken("END")<br>                break<br>            else:<br>                command = Command()<br>                command.parse(context) <br>                self.commands.append(command) <br><br>    def execute(self):<br>        for command in self.commands:<br>            command.execute()<br><br># &lt;command&gt; ::= &lt;repeat&gt; | &lt;primitive&gt; <br>class Command:<br>    def parse(self, context):<br>        if context.currentToken() == "REPEAT":<br>            self.node = Repeat()<br>            self.node.parse(context)<br>        else:<br>            self.node = Primitive()<br>            self.node.parse(context)<br><br>    def execute(self):<br>        self.node.execute()<br><br># &lt;primitive&gt; ::= PRINT &lt;string&gt; | SPACE | BREAK | LINEBREAK<br>class Primitive:<br>    def parse(self, context):<br>        self.name = context.currentToken()<br>        context.skipToken(self.name)<br>        if (self.name != "PRINT" and<br>            self.name != "BREAK" and<br>            self.name != "LINEBREAK" and<br>            self.name != "SPACE"):<br>            print("Undefined Command")<br>        <br>        if self.name == "PRINT":<br>            self.text = context.currentToken()<br>            context.nextToken()<br>    <br>    def execute(self):<br>        if self.name == "PRINT":<br>            print(self.text, end="")<br>        elif self.name == "SPACE":<br>            print(end=" ")<br>        elif self.name == "BREAK":<br>            print()<br>        elif self.name == "LINEBREAK":<br>            print("\n------------------------------")<br><br>class Repeat:<br>    def parse(self, context):<br>        context.skipToken("REPEAT")<br>        self.number = context.currentNumber()<br>        context.nextToken()<br>        self.commandList = CommandList()<br>        self.commandList.parse(context)<br>    <br>    def execute(self):<br>        for i in range(self.number):<br>            self.commandList.execute()<br><br>class Context:<br>    def __init__(self, filename):<br>        tokenList = []<br>        for line in open(filename):<br>            for token in re.split("\s+", line.strip()):<br>                tokenList.append(token)<br>        self.tokens = iter(tokenList)<br>        self.nextToken()<br>    <br>    def nextToken(self):<br>        self.current = None<br>        try:<br>            self.current = next(self.tokens)<br>        except StopIteration: <br>            pass<br>        return self.current<br>       <br>    def currentToken(self):<br>        return self.current<br>    <br>    def skipToken(self, token):<br>        if token != self.current:<br>            print("Warning: " + token + <br>                  " is expected, but " + <br>                  self.currentToken + " is found.");<br>        self.nextToken()<br><br>    def currentNumber(self):<br>        return int(self.current)<br><br>node = Program()<br>node.parse(Context(sys.argv[1]))<br>node.execute()</pre>
      <small> </small><small><br>
      <br>
      <br>
      </small></td>
    </tr>
  </tbody>
</table>

<br>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/InterpreterPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:42 GMT -->
</html>