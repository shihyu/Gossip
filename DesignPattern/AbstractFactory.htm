<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/AbstractFactory.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:03 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Abstract Factory 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern: Abstract Factory 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
<script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>如果您<span style="font-weight: bold;">需要一組可以隨時抽換的元件，並且希望可以簡單地
一次抽換</span>，則可以考慮使用Abstract Factory。例如視窗程式中</small><small>視感（Look-and-
feel）元件的調換，就是Abstract Factory的應用場合。<br>
      <br>
以下是Abstract
Factory的簡單實現，程式中Rectangle依賴於PointCornerFactory的公開定義，使用PointCornerFactory
所提供的一組元件來繪製矩形：<br>
      </small><small><span style="font-family: Courier New,Courier,monospace;"></span><span style="font-family: Courier New,Courier,monospace;"></span></small>
      <pre><span style="font-family: Courier New,Courier,monospace;">interface PointCornerFactory {</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; Point getPoint();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; Corner getCorner();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">}</span><br style="font-family: Courier New,Courier,monospace;"><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">interface Point {</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; void line(int width);</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">}</span><br style="font-family: Courier New,Courier,monospace;"><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">interface Corner {</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; void leftUp();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; void rightUp();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; void leftDown();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; void rightDown();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">}</span><br style="font-family: Courier New,Courier,monospace;"><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">class Rectangle {</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; private int width;</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; private int height;</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; </span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; Rectangle(int width, int height) {</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.width = width;</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.height = height;</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; </span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; void paint(PointCornerFactory factory) {</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point point = factory.getPoint();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Corner corner = factory.getCorner();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; corner.leftUp();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; point.line(width - 2);</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; corner.rightUp();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int i = 0; i &lt; height - 2; i++) {</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; point.line(width);</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; corner.leftDown();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; point.line(width - 2);</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; corner.rightDown();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println();</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br style="font-family: Courier New,Courier,monospace;"><span style="font-family: Courier New,Courier,monospace;">}</span></pre>
      <small><br>
依您所提供的</small><small>PointCornerFactory、Point與Corner實作之不同，可以繪製出不同外觀的矩形，例
如：<br>
      </small>
      <pre>public class Main {<br>    public static void main(String[] args) {<br>        Rectangle rect = new Rectangle(20, 10);<br>        PointCornerFactory factory =<br>            new PointCornerFactory() {<br>                public Point getPoint() {<br>                    return new Point() {<br>                        public void line(int width) {<br>                            for(int i = 0; i &lt; width; i++) {<br>                                System.out.print("-");<br>                            }<br>                        }<br>                    };<br>                }<br>                <br>                public Corner getCorner() {<br>                    return new Corner() {<br>                        public void leftUp() { System.out.print('+'); }<br>                        public void rightUp() { System.out.print('+'); }<br>                        public void leftDown() { System.out.print('+'); }<br>                        public void rightDown() { System.out.print('+'); }<br>                    };<br>                }<br>            };<br>        rect.paint(factory);        <br>    }<br>}</pre>
      <small><br>
      </small><small>如果您要呈現不同的矩形外觀，則可以提供另一組PointCornerFactory、Point、
Conrer實作，對Rectangle而言，就可達成一次抽象所有元件的需求。<br>
      <br>
下圖為AbstractFactory的類別圖：<br>
      <img style="width: 436px; height: 264px;" alt="" src="images/AbstractFactory-1.jpg"><br>
      <br>
圖中AbstractFactory、Part指的是，物件必須具有</small><small>AbstractFactory、Part所定義之公
開協定，而非專指Java中的interface定義。</small><small>對於靜態語言來說，例如Java，必須使用型態來宣告變數，因此根
據需求，可以使用interfact或abstract class來定義</small><small>AbstractFactory、Part所定
義之公開協定。對於動態語言來說，例如Python，真正的型態資訊是在物件之上（而非變數），因此要求的是物件必須具有</small><small>AbstractFactory、
Part之公開方法（無論是「哪一種」物件），例如以下是Python的Abstract Factory實現範例：<br>
      </small>
      <pre>class Rectangle:<br>    def __init__(self, width, height):<br>        self.width = width<br>        self.height = height<br>    def paint(self, factory):<br>        point = factory.getPoint()<br>        corner = factory.getCorner()<br>        corner.leftUp()<br>        point.line(self.width - 2)<br>        corner.rightUp()<br>        print()<br>        for i in range(self.height - 2):<br>            point.line(self.width)<br>            print()        <br>        corner.leftDown()<br>        point.line(self.width - 2);<br>        corner.rightDown();<br>        print()<br>        <br>class Dot:<br>    def line(self, width):<br>        for i in range(width):<br>            print("-", end="")<br><br>class Sharp:<br>    def leftUp(self):<br>        print("#", end="")<br>    def rightUp(self):<br>        print("#", end="")<br>    def leftDown(self):<br>        print("#", end="")<br>    def rightDown(self):<br>        print("#", end="")<br><br>class DotSharpFactory:<br>    def getPoint(self):<br>        return Dot()<br>    def getCorner(self):    <br>        return Sharp()<br>        <br>rect = Rectangle(20, 10)<br>rect.paint(DotSharpFactory())</pre>
      <small><br>
AbstractFactory這個名詞是從的</small><small style="font-weight: bold;">建立可抽換的一組
物件</small><small><span style="font-weight: bold;">角度</span>來看這個模式，如果將焦點放
在使用抽象工廠物件的方法上，因為方法定義了一個樣版流程，流程中真正需要實際物件運作的部份，則呼叫callback物件（工廠物件）來建立，所以從流
程的觀點來看，又稱之為<span style="font-weight: bold;">Template-callback模式</span>。例
如在範例的paint()方法中定義了繪製的流程，真正繪製的物件則是透過callback物件（工廠物件）來建立。<br>
      <br>
      </small><small><br>
      <br>
      </small><small><br>
      </small></td>
    </tr>
  </tbody>
</table>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/AbstractFactory.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:03 GMT -->
</html>