<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/ThreadPool.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:48 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Thread Pool 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern: Thread Pool 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br><script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>在 </small><small><a href="ThreadPerMessage.htm">Thread-Per-Message
模式</a>
中，每次請求來到，就建立一個新的執行緒，用完就不再使用，然後執行緒的建立需要系統資源，對於一個接受許多請求的情況，不斷的建立新執行緒，會導致系統
效能的</small><small>降低</small><small>。<br>
      <br>
可以的話，若能重複使用所建立的執行緒，而不是用完就丟，可以有效的重複利用資源。在 </small><small><a href="WorkerThread.htm">Worker
Thread 模式</a>
的範例中，預先建立好執行緒，當請求佇列有新請求時，通知等待的執行緒取出請求進行處理，其實就是一種重複使用執行緒的方式。<br>
      <br>
該如何重複使用執行緒？執行緒一旦離開run()方法，該執行緒任務就不能再重複使用，所以就是想辦法讓執行緒不離開run()方法，但不執行完run
()方法，又如何能完成您交付給執行緒的任務？看似矛盾的需求，其實在 </small><small><a href="WorkerThread.htm">Worker
Thread 模式</a> 中就有示範過概念了，也就是在run()中設定無窮迴圈：<br>
      </small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">class Worker implements Runnable {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; private RequestQueue
queue;</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; Worker(RequestQueue
queue) {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
this.queue = queue;</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; }</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; public void run() {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
while(true) {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
queue.get().execute();</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; }</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">}</span></small><br>
      </div>
      <small><br>
      </small><small>Thread pool
模式的概念就是，需要使用執行緒時，在一個執行緒池中尋找可用的執行緒，如果找不到再建立新的，執行緒使用完畢後，留在池中重複使用。</small><small><br>
      <br>
以下是個簡單的示範程式，可以看出如何建立可重複使用的執行緒，與執行緒池的基本概念：<br>
      </small>
      <pre>import java.util.*;<br><br>interface Request {<br>    void execute();<br>}<br><br><span style="font-weight: bold;">class WorkerThread extends Thread {<br>    private Request request;<br>    private boolean isContinue = true;<br>    boolean isIdle() {<br>        return request == null;<br>    }<br>    void setRequest(Request request) {<br>        synchronized(this) {<br>            if(isIdle()) {<br>                this.request = request;<br>                notify();<br>            }<br>        }<br>    }<br>    public void run() {<br>        while(isContinue) {<br>            synchronized(this) {<br>                try {<br>                    wait();<br>                }<br>                catch(InterruptedException e) {<br>                    e.printStackTrace();<br>                }<br>                request.execute();<br>                request = null;<br>            }<br>        }<br>    }<br>    void terminate() {<br>        isContinue = false;<br>        setRequest(new Request() {<br>            public void execute() { /* do nothing */ }<br>        });<br>    }<br>}</span><span style="font-weight: bold;"></span><br><br>class WorkerThreadPool {<br>    private List&lt;WorkerThread&gt; workerThreads;<br>    WorkerThreadPool() {<br>        workerThreads = new ArrayList&lt;WorkerThread&gt;();<br>    }<br>    synchronized void service(Request request) {<br>        boolean idleNotFound = true;<br>        for(WorkerThread workerThread : workerThreads) {<br>            if(workerThread.isIdle()) {<br>                workerThread.setRequest(request);<br>                idleNotFound = false;<br>                break;<br>            }<br>        }<br>        if(idleNotFound) {<br>            WorkerThread workerThread = createWorkerThread();<br>            workerThread.setRequest(request);<br>        }<br>    }<br>    synchronized void cleanIdle() {<br>        for(WorkerThread workerThread : workerThreads) {<br>            if(workerThread.isIdle()) {<br>                workerThreads.remove(workerThread);<br>                workerThread.terminate();<br>            }<br>        }<br>    }<br>    private WorkerThread createWorkerThread() {<br>        WorkerThread workerThread = new WorkerThread();<br>        workerThread.start();<br>        workerThreads.add(workerThread);<br>        try {<br>            Thread.sleep(1000); // 給點時間進入 Runnable<br>        }<br>        catch(InterruptedException e) {<br>            e.printStackTrace();<br>        }<br>        return workerThread;<br>    }<br>}</pre>
      <small><br>
範
例中的WorkerThreadPool是個簡單的實現，您可以採用更完善的池化技術，另一個重點則在於WorkerThread如何重用，執行緒一旦啟
動，就進入無窮迴圈並進入等待，如果有設定請求，則被通知執行請求，請求執行完畢，回到迴圈開頭又進入等待，如此循環不斷。以下則是一個使用
WorkerThreadPool的示範：<br>
      </small>
      <pre>class Service {<br><span style="font-weight: bold;">    private WorkerThreadPool pool = new WorkerThreadPool();</span><br>    void accept(Request request) {<br><span style="font-weight: bold;">        pool.service(request);</span><br>    }<br>}<br><br>// 以下模擬客戶發出請求<br>class Client implements Runnable {<br>    private Service service;<br>    Client(Service service) {<br>        this.service = service;<br>    }<br>    public void run() {<br>        while(true) {<br>            Request request = new Request() {<br>                public void execute() {<br>                   System.out.println("執行客戶請求...XD");<br>                   try {<br>                       Thread.sleep((int) (Math.random() * 3000)); <br>                   }<br>                   catch(InterruptedException e) {<br>                       e.printStackTrace();<br>                   }<br>                }<br>            };<br>            service.accept(request);<br>            try {<br>                Thread.sleep((int) (Math.random() * 3000)); <br>            }<br>            catch(InterruptedException e) {<br>                e.printStackTrace();<br>            }<br>        }<br>    }<br>}<br>public class Main {<br>    public static void main(String[] args) {<br>        Service service = new Service();<br>        for(int i = 0; i &lt; 5; i++) {<br>            (new Thread(new Client(service))).start();<br>        }  <br>    }<br>}</pre>
      <small><br>
使用Python來示範的話：<br>
      </small>
      <pre>import threading<br>import time<br>import random<br><br>class WorkerThread(threading.Thread):<br>    def __init__(self):<br>        threading.Thread.__init__(self)<br>        self.condition = threading.Condition()<br>        self.isContinue = True<br>        self.request = None<br>        <br>    def isIdle(self):<br>        return self.request == None<br>        <br>    def setRequest(self, request):<br>        self.condition.acquire()<br>        if self.isIdle():<br>            self.request = request<br>        self.condition.notify()<br>        self.condition.release()<br>    <br>    def run(self):<br>        while self.isContinue:<br>            self.condition.acquire()<br>            self.condition.wait()<br>            self.request()<br>            self.request = None<br>            self.condition.release()<br>    <br>    def terminate(self):<br>        self.isContinue = False<br>        self.setRequest(lambda: None) # do nothing<br><br>class WorkerThreadPool:<br>    def __init__(self):<br>        self.workerThreads = []<br>    <br>    def service(self, request):<br>        idleNotFound = True<br>        for workerThread in self.workerThreads:<br>            if workerThread.isIdle():<br>                workerThread.setRequest(request)<br>                idleNotFound = False<br>                break<br>        if idleNotFound:<br>            workerThread = self.createWorkerThread()<br>            workerThread.setRequest(request)<br>            <br>    def cleanIdle(self):<br>        for workerThread in self.workerThreads:<br>            if workerThread.isIdle():<br>                self.workerThreads.remove(workerThread)<br>                workerThread.terminate()<br><br>    def createWorkerThread(self):<br>        workerThread = WorkerThread()<br>        workerThread.start()<br>        self.workerThreads.append(workerThread)<br>        time.sleep(1)<br>        return workerThread<br><br>class Service:<br>    def __init__(self):<br>        self.pool = WorkerThreadPool()<br>        <br>    def accept(self, request):<br>        self.pool.service(request)<br>        <br>class Client(threading.Thread):<br>    def __init__(self, service):<br>        threading.Thread.__init__(self)<br>        self.service = service<br>        <br>    def run(self):<br>        while True:<br>            second = int(random.random() * 3) # 隨機模擬請求的執行時間<br>            request = lambda: print("執行客戶請求...XD"); time.sleep(second)<br>            self.service.accept(request)<br>            time.sleep(int(random.random() * 3))<br>            <br>service = Service()<br>for i in range(5):<br>    Client(service).start()<br>        <br>while True:<br>    try:<br>        time.sleep(1)<br>    except KeyboardInterrupt:<br>        exit()</pre>
      <small><br>
      </small><small><br>
      </small> </td>
    </tr>
  </tbody>
</table>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/ThreadPool.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:48 GMT -->
</html>