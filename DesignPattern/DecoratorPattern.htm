<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/DecoratorPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:17 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Decorator 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern: Decorator 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
<script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;"><small>您
打算設計一個點餐程式，目前主餐有炸雞、漢堡，您打算讓點了主餐的客入選擇附餐時可以有優惠，如果您使用繼承的方式來達到這個目的，例如：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">class
FriedChicken {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;
&nbsp; double price() {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;
&nbsp; &nbsp; &nbsp; return 49.0;</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;
&nbsp; }</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">class
SideDishOne extends FriedChicken {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;
&nbsp; double price() {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;
&nbsp; &nbsp; &nbsp; return super.price() + 30.0;</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;
&nbsp; }</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span></small><br>
      </div>
      <small><br>
在使用繼承時，多想一下這個問題是否只能用繼承來解決總是好的。以這個設計為例，您繼承父類別之後，<span style="font-weight: bold;">只是取得父類別的price()執行結果再進一步加以處理</span>，另一方面，如果漢堡
也想要搭配附餐一，目前的SideDishOne顯然無法給漢堡<span style="font-weight: bold;">重用</span>，
您還得為漢堡建立有附餐一的子類別。<br>
&nbsp;<br>
如果採取以下的設計，可以解決問題：<br>
      <img style="width: 493px; height: 310px;" alt="" src="images/Decorator-1.jpg"><br>
      </small><br>
      <small>這個設計不採取繼承而改以組合的方式，如果以Java來示範如何為不同的主餐增加附餐的話，如下所示：<br>
      </small>
      <pre>interface Meal {<br>    String getContent();<br>    double price();<br>}<br><br>class FriedChicken implements Meal {<br>    public String getContent() {<br>        return "不黑心炸雞";<br>    }<br>    public double price() {<br>        return 49.0;<br>    }<br>}<br><br>class Hamburger implements Meal {<br>    public String getContent() {<br>        return "美味蟹堡";<br>    }<br>    public double price() {<br>        return 99.0;<br>    }<br>}<br><br>abstract class SideDish implements Meal {<br>    protected Meal meal;<br>    SideDish(Meal meal) {<br>        this.meal = meal;<br>    }<br>}<br><br>class SideDishOne extends SideDish {<br>    SideDishOne(Meal meal) {<br>        super(meal);<br>    }<br>    public String getContent() {<br>        return meal.getContent() + " | 可樂 | 薯條";<br>    }<br>    public double price() {<br>        return meal.price() + 30.0;<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Meal meal = new SideDishOne(new FriedChicken());<br>        System.out.println("點了：" + meal.getContent());<br>        System.out.println("價格：" + meal.price());<br>    }<br>}</pre>
      <small><br>
各種SideDish的實現並不改變Meal實作本來的操作功能，而是基於原本的操作功能再增加處理，SideDish的各種實現，可以套用至Meal的
各種實作，例如FriedChicken或Hambergur。<br>
      <br>
這是<span style="font-weight: bold;">Decorator模式的實現，其不採取繼承的方式，而以組合的方式動態地為物
件添加功能。</span><br>
      <br>
以Python來實現的話：<br>
      </small>
      <pre>class FriedChicken:<br>    def getContent(self):<br>        return "不黑心炸雞"<br>    def price(self):<br>        return 49.0<br><br>class Hamburger:<br>    def getContent(self):<br>        return "美味蟹堡"<br>    def price(self):<br>        return 99.0<br>        <br>class SideDish:<br>    def __init__(self, meal):<br>        self.meal = meal<br><br>class SideDishOne(SideDish):<br>    def __init__(self, meal):<br>        SideDish.__init__(self, meal)<br>        <br>    def getContent(self):<br>        return self.meal.getContent() + " | 可樂 | 薯條"<br>    <br>    def price(self):<br>        return self.meal.price() + 30.0<br><br>meal = SideDishOne(FriedChicken())<br>print("點了：" + meal.getContent())<br>print("價格：" + str(meal.price()))<br></pre>
      <small><br>
以UML來表示Decorator模式之結構：<br>
      <img style="width: 484px; height: 410px;" alt="" src="images/Decorator-2.jpg"><br>
      <br>
      <br>
在Java
Swing中的JTextArea元件預設並沒有捲軸，捲
軸的功能是由JScrollPane元件提供，如果您要加入一個具有捲軸功能的JTextArea，您可以如下進行設計：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">JTextArea
textArea = new JTextArea();</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">JScrollPane
scrollPane = new JScrollPane(textArea);</span><br>
      </small></div>
      <small>&nbsp;</small><small><br>
像這樣動態地為JTextArea加入功能的方法，也是Decorator模式的實現，您不用修改JTextArea的功能，也不用使用繼承來擴充
JTextArea，對JTextArea來說，JScrollPane就好像是一個捲軸外框，直接套
在JTextArea上作裝飾，就好比您在照片上加上一個相框的意思。</small><small><br>
      <br>
在Gof的書中指出另一個範例，它設計一個Stream抽象類，而有一個StreamDecorator類，Stream的子類有處理記憶體串流的
MemoryStream與FileStream，有各種方法可以處理串流，也許只是單純的處理字元，也許會進行壓縮，也許會進行字元轉換，最基本的處理
可能是處理字元，而字元壓縮被視為額外的功能，這個時候我們可以使用裝飾模式，在需要的時候為Stream物件加上必要的功能，事實上在java.io中
的許多輸入輸出物件，就是採取這樣的設計，例如：<br>
      </small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">BufferedReader reader = new
BufferedReader(new FileReader("Main.java"));</span></small><br>
      </div>
      <small><br>
FileReader
沒有緩衝區處理的功能，所以由BufferedReader來提供，BufferedReader並沒有改變FileReader的功能，而是在既有
FileReader的操作上再作加工的動作，而BufferedReader也不只可以用於FileReader，只要是Reader的子類別，都可以
套用BufferedReader，例如讀取使用者輸入時：<br>
      </small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">BufferedReader reader = new </span></small><small style="font-weight: bold; font-family: Courier New,Courier,monospace;">BufferedReader(new
InputStreamReader(System.in));</small><br>
      </div>
      <small style="font-weight: bold;"><br>
      </small><small>透過適當地設計，Decorator角色的類別，也可以重用於適當的元件。<br>
      </small></td>
    </tr>
  </tbody>
</table>

<br>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/DecoratorPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:21 GMT -->
</html>