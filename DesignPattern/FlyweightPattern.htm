<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/FlyweightPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:21 GMT -->
<head>
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">

  
  <link rel="stylesheet" href="css/print.css" type="text/css">

  
  <meta content="text/html; charset=Big5" http-equiv="content-type">
  <title>Flyweight 模式</title>

  
</head><body>
<h3><a href="../index.html">From
Gossip@Openhome</a></h3>

<h1><a href="index-2.html">Design Pattern: Flyweight 模式</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
 <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script><br><br>     <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>
      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>
      <br>
      <center>
       <br>
      </center>
      </td>
      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>您現在打算建立一個文書處理程式，文件中的文字可以設置字型資訊，也許您是這麼設定一段文字的字型資訊：<br>
      </small>
      <div style="margin-left: 40px;"><small style="font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">text.setFont(new Font("細明體", Style.BOLD,
12));</span></small><br>
      </div>
      <small><br>
文書處理程式中的文字都會有字型資訊，但可能有一些字型資訊是重複的，例如有些文字都是細明體、粗體、大小12的字型，有些文字都是標楷</small><small>體、
斜體、大小16的字型，對於同樣字型資訊的文字，卻每次都用新建字型物件的方式來設定，雖然是小物件，但數量多的話，也有可能佔用相當的記憶體。<br>
      <br>
對於小且可以資訊重複的物件，可以考慮共用，例如：<br>
      </small>
      <pre>import java.util.*;<br>import java.lang.ref.*;<br><br>interface Style {<br>    final static int PLAIN = 1;<br>    final static int BOLD = 2;<br>    final static int ITALIC = 3;<br>}<br><br>class Font {<br>    final String name;<br>    final int style;<br>    final int size;<br>    <br>    Font(String name, int style, int size) {<br>        this.name = name;<br>        this.style = style;<br>        this.size = size;<br>    }<br>    <br>    public boolean equals(Object other) {<br>        if (other instanceof Font) {<br>            if (other == this) {<br>                return true;<br>            }<br>            Font font = (Font) other;<br>            return font.style == style <br>                   &amp;&amp; font.size == size<br>                   &amp;&amp; font.name.equals(this.name);<br>        }<br>        return false;<br>        <br>    }<br>    public int hashCode() {<br>        return (style * 37 + size * 13) * name.hashCode();<br>    }<br>}<br><br>class FontFactory {<br>    private static Map&lt;Font, WeakReference&lt;Font&gt;&gt; flyweights =<br>        new WeakHashMap&lt;Font, WeakReference&lt;Font&gt;&gt;();<br>       <br>    static Font create(String name, int style, int size) {<br>        Font font = new Font(name, style, size);<br>        if(!flyweights.containsKey(font)) {<br>            flyweights.put(font, new WeakReference&lt;Font&gt;(font));<br>        }<br>        return flyweights.get(font).get();<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Font font1 = FontFactory.create("細明體", Style.BOLD, 12);<br>        Font font2 = FontFactory.create("細明體", Style.BOLD, 12);<br>        System.out.println(font1 == font2);<br>    }<br>}</pre>
      <small><br>
在這邊搭配了<span style="font-weight: bold;"> </span></small><small><a href="SimpleFactory.htm">Simple
Factory 模式</a></small><small>，
隱藏了Font建立的細節，</small><small>最主要是如何共用物件以節省記憶體的使用量，您可以只簡單地使用HashMap，不讓重複資訊
的物件佔用記憶體，而範例</small><small>程式中則進一步使用了WeakHashMap，這是Java所提供的Map實現，可以在記憶體量
不足時，主動釋放未被程式其它部份參考的物件。</small><br>
      <small><br>
如果是Python實現的話，以下是個簡單示範：<br>
      </small>
      <pre>import weakref<br><br>class Style:<br>    PLAIN = 1<br>    BOLD = 2<br>    ITALIC = 3<br><br>class Font:<br>    def __init__(self, name, style, size):<br>        self.name = name<br>        self.style = style<br>        self.size = size<br>    def __repr__(self):<br>        return repr(self.name) + repr(self.style) + repr(self.size)<br><br>class FontFactory:<br>    __flyweight = weakref.WeakValueDictionary()<br>    <br>    def create(name, style, size):<br>        font = Font(name, style, size)<br>        if not FontFactory.__flyweight.get(repr(font), None):<br>            FontFactory.__flyweight[repr(font)] = font<br>        return FontFactory.__flyweight[repr(font)]<br>        <br>font1 = FontFactory.create("細明體", Style.BOLD, 12)<br>font2 = FontFactory.create("細明體", Style.BOLD, 12)<br>print(font1 is font2)</pre>
      <small><br>
      </small><small>Java中Flyweight模式的實際應用是字串，如果您在Java程式中使用下面的方式來宣告，則實際上
是指向同一個字串物件：<br>
      </small>
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">String
str1 = "flyweight";</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">String
str2 = "flyweight"; </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">System.out.println(str1
== str2);</span><br>
      </small></div>
      <small>&nbsp;<br>
程式的執行結果會顯示True，在Java中，會維護一個String Pool，對於一些可以共享的字串物件，會先在String
Pool中查找是否存在相同的String內容（字元相同），如果有就直接傳回，而不是直接創造一個新的String物件，以減少記憶體的耗用。<br>
      <br>
      </small><img style="width: 450px; height: 242px;" alt="" src="images/Flyweight-1.jpg"><br>
      </td>
    </tr>
  </tbody>
</table>

<br>

<br>

<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/FlyweightPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:21 GMT -->
</html>