<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/AdapterPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:11 GMT -->
<head>





  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">





  
  
  
  
  
  <title>Adapter 模式</title></head>
<body>





<h3><a href="../index.html">From
Gossip@Openhome</a></h3>





<h1><a href="index-2.html">Design Pattern:&nbsp;Adapter 模式 - Object Adapter</a></h1>



<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">



  <tbody>



    <tr>



      <td style="width: 250px; text-align: center; vertical-align: top;"><comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>&nbsp;
      
      
      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      
      
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>








      <comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>








      <comment title=" adsense for content" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment>
      
      
      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->&#160;</script>&nbsp;
      
      
      
      
      
      
      
      <script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js"></script><comment title=" adsense for content end" xmlns="http://disruptive-innovations.com/zoo/nvu"></comment><br>








      <br>







      
      
      
      
      
      
      
      <center>
      
      
      
      
      
      
      
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
</script>
<script type="text/javascript" src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>








      </center>








 </td>



      <td style="vertical-align: top; width: 690px; text-align: left;">
      <small>


物件之間溝通時介面的不匹配時有所見，也許您在開發應用程式的過程中已設計了一些方法供具某些公開協定的物件使用，您打算引入了先前開發過的類別，或者是第三方的類別，但很常發現到它們之間的公開介面並不一致。<br><br>舉個例子來說，在JDK5之後有了個新的foreach語法，預設如果是個陣列或Collection物件，則可以這麼使用：<br></small><div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">for(String s : list) {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; System.out.println(s);</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span></small><br></div><small><br>事實上，JDK5所引入的foreach語法，只要是有實作java.lang.Iterable介面的物件，就可以套用，</small><small>java.lang.Iterable是在JDK5之後新增的介面：</small><br><div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">package java.lang;<br>public interface Iterable&lt;T&gt; {</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; Iterator&lt;T&gt; iterator();</span></small><br style="font-weight: bold; font-family: Courier New,Courier,monospace;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span></small><br></div><small><br>foreach語法可以簡化程式的撰寫，如果你有個類別，想要能夠參與foreach語法，但本身沒有實作Iterable介面該如何？例如您想要String也可以用foreach語法逐一取出字元的話，那麼您可以使用以下類似的作法：<br></small><pre>import java.util.*;<br><br>class IterableString implements Iterable&lt;Character&gt; {<br>    private String str;<br>    IterableString(String str) {<br>        this.str = str;<br>    }<br>    public Iterator&lt;Character&gt; iterator() {<br>        return new Iterator&lt;Character&gt;() {<br>                   private int index;<br>                   public boolean hasNext() {<br>                       return index &lt; str.length();<br>                   }<br>                   public Character next() {<br>                       return str.charAt(index++);<br>                   }<br>                   public void remove() {<br>                       throw new RuntimeException("Not supported");<br>                   }<br>               };<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) throws Exception {<br>         String original = new String("I like foreach!");<br>         for(char c : new IterableString(original)) {<br>             System.out.println(c);<br>         }<br>    }<br>}</pre><small><br>這是Object Adapter模式的一個實現，以類別圖來表示</small><small>Object Adapter模式的話：</small><br><small><img style="width: 505px; height: 180px;" alt="" src="images/AdapterPattern-1.jpg"><br><br>就上例而言，Iterable就是Target角色，String就是Adaptee的角色，IterableString就是Adapter的角色。<br><br>如果使用Python正式地實現Object Adapter，則可以像以下的實作方式：<br></small><pre>class Adaptee:<br>    def doAction(self):<br>        return 'Adaptee'<br> <br>class Adapter:<br>    def __init__(self, adaptee):<br>        self.adaptee = adaptee<br> <br>    def request(self):<br>        return self.adaptee.doAction()<br> <br>def printIt(x):<br>    print(x.request())<br><br>client = Adapter(Adaptee())<br>printIt(client)</pre><small><br>由於Python可以動態地為類別添加屬性，即使是未</small><small>添加屬性前就已建立的物件，在類別動態添加屬性之後，也可依Python的名稱空間搜尋順序套用上新的屬性，用這種方式，您可以為Adaptee動態地添加公開介面，例如：<br></small><pre>class Adaptee:<br>    def doAction(self):<br>        return 'Adaptee'<br> <br>def printIt(x):<br>    print(x.request())<br><br>client = Adaptee()<br>Adaptee.request = lambda self : self.doAction()<br><br>printIt(client)</pre><small><br>雖然實現的方式有點巧妙，不過這也是Object Adapter的實現，只不過在添加的方法中包裹原物件的操作。<br></small><small><br></small>
      </td>



    </tr>



  
  
  </tbody>
</table>



<br>


<br>


<script src="../../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-143766-1";
urchinTracker();
</script>
</body>
<!-- Mirrored from openhome.cc/Gossip/DesignPattern/AdapterPattern.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 28 Jul 2013 09:07:11 GMT -->
</html>